*. Function signatures:
    
    def interp1d(x, y, new_x, kind='linear', low=np.NaN, high=np.NaN, \
                        kindkw={}, lowkw={}, highkw={}, \
                        remove_bad_data = False, bad_data=[], interp_axis = 0):

     o. the trailing \ for new lines are not necessary for functions since line continuation
        is implicit with the open/close parentheses.
     o. [minor] I would just use NaN instead of np.NaN.  						
     o. It is dangerous to initialize containers as default arguments because they are
        effectively a singleton for the function.  We can discuss this if you don't know
        what I am talking about.
     o. kindkw, lowkw, and highkw aren't really necessary I don't think.  They should go.
	 Xo. Do you need both remove_bad_data and bad_data?  If bad_data is None, then you 
	    don't remove bad_data...
	 Xo. I think I would change interp_axis to just be axis.  This is consistent with many
	    other functions in numpy.
	 Xo. The choice of whether axis=0 or axis=-1 by default is a reasonable question.
	    fft defaults to axis=-1.  This is also the faster axis to operate across in the
	    standard case.  It is, however, the opposite of how some people think about 
	    things (columns vs. rows).  Talk to Travis O. for his take.  Mine is to use axis=-1.
	
	I think all of this might simplify the interface to the following:
	
    def interp1d(x, y, new_x, kind='linear', low=NaN, high=NaN, bad_data=None, axis=-1):

*. _remove_bad_data should be left up to the interpolation method if it knows what to do.
   otherwise, it is handled by this top level class.
   And, we definitely don't want the list comprehension in the remove_bad_data class.

X*. I am glad to see your docstrings.

X*. Move tests into a seprate test directory.

X*. Follow scipy/FORMAT_GUIDLINES.txt in the main scipy directory.

For example:

	test_callFormat -> test_call_format

	Here are the rules:

	Follow the standard Python formatting rules when writing code for SciPy.  Guido
	describes them "here":http://www.python.org/doc/essays/styleguide.html.  A few
	reminders follow:

	   Xo Use 4 spaces for indentation levels.  Do not use tabs as they can result
	     in indentation confusion.  Most editors have a feature that will insert 4
	     spaces when the tab key is hit.  Also, many editors will automatically
	     search/replace leading tabs with 4 spaces.

	   o Only 80 characters on a line.

	   Xo use all lowercase function names with underscore separated words:

	        def set_some_value()

	     instead of:

	        def setSomeValue()


	   Xo use CamelCase class names:

	        def BaseClass()

	     instead of:

	        def base_class()

X*. make_array_safe
   I would prefer 'make_array_safe' named atleast_1d_and_contiguous().  This is more specific
   and it is immediately clear to other developers what the check does.  If you add other checks,
   then perhaps come up with a more generic name, but this explicit names, when possible, help
   readability.

   Also, numpy has an ascontiguousrarray() function that would simplify the code a line or so.

   Also, this function lives in multiple places, interpolate1d and interpolate_wrapper.

X*. isinstance(value, str) should be isinstance(value, basestring) so that we handle
   both strings and unicode correctly.

X*. If the input to interp1d is a scalar, the return value should be a scalar.
   [add test to handle this.]
   This fails in the following:

    In [5]: x = arange(10)
	In [6]: y = arange(10)*2.
	In [7]: interpolate1d.interp1d(x,y,3.2)
	Out[7]: array([ 6.4])

  