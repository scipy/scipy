# After changing this file, check it on:
#   http://lint.travis-ci.org/
language: python

addons:
  apt:
    packages: &common_packages
    - libatlas-base-dev
    - liblapack-dev
    - gfortran
    - libgmp-dev
    - libmpfr-dev
    - libsuitesparse-dev
    - ccache
    - swig
    - libmpc-dev

env:
  global:
   # Wheelhouse for pre-release wheels
   - PRE_WHEELS="https://pypi.anaconda.org/scipy-wheels-nightly/simple"
   # Using a single thread can actually speed up some computations on Travis
   - OPENBLAS_NUM_THREADS=1
   - OTHERSPEC=""

matrix:
  include:
    - python: 3.7
      name: "ARM - Test Group 1"
      arch: arm64
      dist: bionic
      env:
        - TESTMODE=fast
        - COVERAGE=
        - USE_WHEEL=1
        - PIP_NO_CACHE_DIR=off
        - NUMPYSPEC="numpy"
        - TEST_GROUP_COUNT=2
        - TEST_GROUP=1
    - python: 3.7
      name: "ARM - Test Group 2"
      arch: arm64
      dist: bionic
      env:
        - TESTMODE=fast
        - COVERAGE=
        - USE_WHEEL=1
        - PIP_NO_CACHE_DIR=off
        - NUMPYSPEC="numpy"
        - TEST_GROUP_COUNT=2
        - TEST_GROUP=2
    - python: 3.7
      name: "Power PC"
      os: linux
      arch: ppc64le
      env:
        - TESTMODE=fast
        - COVERAGE=
        - NUMPYSPEC="--upgrade numpy --no-cache-dir"

cache:
  directories:
    - $HOME/.ccache
    - $HOME/.cache/pip
    - $HOME/Library/Caches/pip


before_install:
  - echo $TRAVIS_OS_NAME
  - |
    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      free -m
      export PATH=/usr/lib/ccache:$PATH
      ccache --zero-stats
    fi
  - |
    if [[ "$NPY_USE_BLAS_ILP64" == "1" ]]; then
      target=$(python tools/openblas_support.py)
      echo "[openblas64_]" > site.cfg
      echo "library_dirs = $target/lib" >> site.cfg
      echo "include_dirs = $target/include" >> site.cfg
      echo "runtime_library_dirs = $target/lib" >> site.cfg
    fi
  - export CCACHE_COMPRESS=1
  - if [ -n "$CC" ]; then ln -s `which ccache` "/usr/lib/ccache/$CC" || true; fi
  - if [ -n "$CXX" ]; then ln -s `which ccache` "/usr/lib/ccache/$CXX" || true; fi
  - python --version # just to check
  - export NPY_NUM_BUILD_JOBS=2
  - uname -a
  - df -h
  - ulimit -a
  - set -e -o pipefail
  - mkdir builds
  - cd builds
  - |
    if [ -n "${USE_DEBUG}" ]; then
        # Work in our own virtualenv to isolate from travis-ci packages.
        virtualenv --python=$USE_DEBUG venv
        source venv/bin/activate
    fi
  - python --version
  - python -c 'import sys; print("Python debug build:", hasattr(sys, "gettotalrefcount"))'
  - travis_retry pip install --upgrade pip==20.2.4 setuptools wheel $OTHERSPEC cython pytest pytest-xdist mpmath argparse gmpy2 pybind11
  - travis_retry pip install --upgrade $NUMPYSPEC
  - |
    if [ -z "${USE_DEBUG}" -a "${TRAVIS_CPU_ARCH}" == "amd64" -a "${TRAVIS_PYTHON_VERSION}" != "3.8" ]; then
        if ! expr "$NUMPYSPEC" : ".*--pre.*" > /dev/null; then
            # Install these only when not using Numpy prerelease
            travis_retry pip install numba==0.49.1
            travis_retry pip install --only-binary=:all: sparse
        fi
    fi
  - |
    if [ -n "${TEST_GROUP_COUNT}" ]; then
        travis_retry pip install pytest-test-groups
        export TEST_GROUP_ARGS="--test-group-count=${TEST_GROUP_COUNT} --test-group=${TEST_GROUP} --test-group-random-seed=1234"
    fi
  - |
    if [ "${TESTMODE}" == "full" ]; then
        travis_retry pip install matplotlib scikit-umfpack scikit-sparse
    fi
  - |
    if [ -n "${COVERAGE}" ]; then
        travis_retry pip install pytest-cov coverage codecov
    fi
  - |
    if [ "${REFGUIDE_CHECK}" == "1" ]; then
        travis_retry pip install matplotlib Sphinx==1.7.2
    fi
  - |
    if [ "${ASV_CHECK}" == "1" ]; then
        travis_retry pip install "asv>=0.4.1"
    fi
  - pip uninstall -y nose
  - ccache -s
  - cd ..


script:
  - python -c 'import numpy as np; print("relaxed strides checking:", np.ones((10,1),order="C").flags.f_contiguous)'
  # Make sure that relaxed strides checking is actually in effect; otherwise fail loudly
  - if [ "$NPY_RELAXED_STRIDES_CHECKING" == "1" ]; then python -c'import numpy as np; assert np.ones((10,1),order="C").flags.f_contiguous'; fi
  # Test that mpmath actually uses gmpy2
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then python -c 'import mpmath.libmp; assert mpmath.libmp.BACKEND == "gmpy"'; fi
  - |
    if [ "${USE_WHEEL}" == "1" ]; then
        # Run setup.py build before pip wheel, to build in current directory
        # and make more efficient use of ccache
        echo "setup.py build"
        python tools/suppress_output.py python setup.py build
        echo "pip wheel"
        python tools/suppress_output.py pip wheel --no-build-isolation .
        pip install --no-cache-dir scipy*.whl
        USE_WHEEL_BUILD="--no-build"
    elif [ "${USE_SDIST}" == "1" ]; then
        echo "setup.py sdist"
        python tools/suppress_output.py python setup.py sdist
        # Move out of source directory to avoid finding local scipy
        cd dist
        echo "pip install"
        # Note: uses build isolation, which is what pip does with sdists by default
        # Note: don't use a fixed build dir (which would help for ccache), because
        #       --build is partially broken and the workaround in commit b4617dd764
        #       messes with build isolation.
        pip install $PWD/scipy* -v
        cd ..
        USE_WHEEL_BUILD="--no-build"
    fi
  - export SCIPY_AVAILABLE_MEM=3G
  - python -u runtests.py -g -j2 --build-only $COVERAGE $USE_WHEEL_BUILD
  # Only run tests against pull-requests
  - |
    if [ "${TRAVIS_PULL_REQUEST}" != "false" ]; then
      python -u runtests.py -g -j2 -m $TESTMODE $COVERAGE $USE_WHEEL_BUILD -- -rfEX --durations=10 $TEST_GROUP_ARGS 2>&1 | tee runtests.log
      tools/validate_runtests_log.py $TESTMODE < runtests.log
    fi
  - |
    if [ "${TRAVIS_PULL_REQUEST}" != "false" ] && [ "${REFGUIDE_CHECK}" == "1" ]; then
      python runtests.py -g --refguide-check
    fi
  # pyfftw missing should raise an error when running benchmarks with SCIPY_ALLOW_BENCH_IMPORT_ERRORS=0
  - |
    if [ "${TRAVIS_PULL_REQUEST}" != "false" ] && [ "${ASV_CHECK}" == "1" ]; then
      (cd benchmarks && python -masv check -E existing && ! SCIPY_ALLOW_BENCH_IMPORT_ERRORS=0 python -masv check -E existing > /dev/null)
    fi
  # Check dynamic symbol hiding works on Linux
  - |
    if [ "${TRAVIS_PULL_REQUEST}" != "false" ] && [ "$TRAVIS_OS_NAME" == "linux" ]; then
      ./tools/check_pyext_symbol_hiding.sh build
    fi


after_script:
  - ccache -s
  # Upload coverage information
  - |
    if [ "${TRAVIS_PULL_REQUEST}" != "false" ] && [ -n "${COVERAGE}" ]; then
        RUN_DIR=`echo build/testenv/lib/python*/site-packages`
        # Produce gcov output for codecov to find
        find build -name '*.gcno' -type f -exec gcov -pb {} +
        mv *.gcov "$RUN_DIR/"
        # Run codecov
        pushd "$RUN_DIR"
        codecov -X gcov
        popd
    fi


notifications:
  # Perhaps we should have status emails sent to the mailing list, but
  # let's wait to see what people think before turning that on.
  email: false
