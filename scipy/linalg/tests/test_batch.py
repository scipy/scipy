import pytest
import numpy as np
from numpy.testing import assert_allclose
from scipy import linalg


real_floating = [np.float32, np.float64]
complex_floating = [np.complex64, np.complex128]
floating = real_floating + complex_floating


def get_nearly_hermitian(shape, dtype, atol, rng):
    # Generate a batch of nearly Hermitian matrices with specified
    # `shape` and `dtype`. `atol` controls the level of noise in
    # Hermitian-ness to by generated by `rng`.
    A = rng.random(shape).astype(dtype)
    At = np.conj(A.swapaxes(-1, -2))
    noise = rng.standard_normal(size=A.shape).astype(dtype) * atol
    return A + At + noise


class TestMatrixInScalarOut:

    def batch_test(self, fun, args=(), kwargs=None, dtype=np.float64,
                   batch_shape=(5, 3), core_shape=(4, 4), seed=8342310302941288912051):
        kwargs = {} if kwargs is None else kwargs
        rng = np.random.default_rng(seed)
        # test_expm_cond doesn't need symmetric/hermitian matrices, and
        # test_issymmetric doesn't need hermitian matrices, but it doesn't hurt.
        A = get_nearly_hermitian(batch_shape + core_shape, dtype, 3e-4, rng)

        res = fun(A, *args, **kwargs)

        for i in range(batch_shape[0]):
            for j in range(batch_shape[1]):
                ref = fun(A[i, j], *args, **kwargs)
                assert_allclose(res[i, j], ref)

        return res

    @pytest.mark.parametrize('dtype', floating)
    def test_expm_cond(self, dtype):
        self.batch_test(linalg.expm_cond, dtype=dtype)

    @pytest.mark.parametrize('dtype', floating)
    def test_issymmetric(self, dtype):
        res = self.batch_test(linalg.issymmetric, dtype=dtype, kwargs=dict(atol=1e-3))
        assert not np.all(res)  # ensure test is not trivial: not all True or False;
        assert np.any(res)      # also confirms that `atol` is passed to issymmetric

    @pytest.mark.parametrize('dtype', floating)
    def test_ishermitian(self, dtype):
        res = self.batch_test(linalg.issymmetric, dtype=dtype, kwargs=dict(atol=1e-3))
        assert not np.all(res)  # ensure test is not trivial: not all True or False;
        assert np.any(res)      # also confirms that `atol` is passed to ishermitian

