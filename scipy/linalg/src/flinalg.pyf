!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module _flinalg ! in 
    interface  ! in :_flinalg
        subroutine ddet_c(det,a,n,piv,info) ! in :_flinalg:det.f
            callprotoargument double*,double*,int*,int*,int*
            double precision intent(out) :: det
            double precision dimension(n,n),intent(in,copy),check(shape(a,0)==shape(a,1)) :: a
            integer, optional,intent(hide),depend(a) :: n=shape(a,0)
            integer dimension(n),intent(hide),depend(n) :: piv
            integer intent(out) :: info
        end subroutine ddet_c
        subroutine ddet_r(det,a,n,piv,info) ! in :_flinalg:det.f
            callprotoargument double*,double*,int*,int*,int*
            double precision intent(out) :: det
            double precision dimension(n,n),intent(c,in,copy),check(shape(a,0)==shape(a,1)) :: a
            integer, optional,intent(hide),depend(a) :: n=shape(a,0)
            integer dimension(n),intent(hide),depend(n) :: piv
            integer intent(out) :: info
        end subroutine ddet_r
        subroutine sdet_c(det,a,n,piv,info) ! in :_flinalg:det.f
            callprotoargument float*,float*,int*,int*,int*
            real intent(out) :: det
            real dimension(n,n),intent(in,copy),check(shape(a,0)==shape(a,1)) :: a
            integer, optional,intent(hide),depend(a) :: n=shape(a,0)
            integer dimension(n),intent(hide),depend(n) :: piv
            integer intent(out) :: info
        end subroutine sdet_c
        subroutine sdet_r(det,a,n,piv,info) ! in :_flinalg:det.f
            callprotoargument float*,float*,int*,int*,int*
            real intent(out) :: det
            real dimension(n,n),intent(c,in,copy),check(shape(a,0)==shape(a,1)) :: a
            integer, optional,intent(hide),depend(a) :: n=shape(a,0)
            integer dimension(n),intent(hide),depend(n) :: piv
            integer intent(out) :: info
        end subroutine sdet_r
        subroutine zdet_c(det,a,n,piv,info) ! in :_flinalg:det.f
            callprotoargument complex_double*,complex_double*,int*,int*,int*
            complex*16 intent(out) :: det
            complex*16 dimension(n,n),intent(in,copy),check(shape(a,0)==shape(a,1)) :: a
            integer, optional,intent(hide),depend(a) :: n=shape(a,0)
            integer dimension(n),intent(hide),depend(n) :: piv
            integer intent(out) :: info
        end subroutine zdet_c
        subroutine zdet_r(det,a,n,piv,info) ! in :_flinalg:det.f
            callprotoargument complex_double*,complex_double*,int*,int*,int*
            complex*16 intent(out) :: det
            complex*16 dimension(n,n),intent(c,in,copy),check(shape(a,0)==shape(a,1)) :: a
            integer, optional,intent(hide),depend(a) :: n=shape(a,0)
            integer dimension(n),intent(hide),depend(n) :: piv
            integer intent(out) :: info
        end subroutine zdet_r
        subroutine cdet_c(det,a,n,piv,info) ! in :_flinalg:det.f
            callprotoargument complex_float*,complex_float*,int*,int*,int*
            complex intent(out) :: det
            complex dimension(n,n),intent(in,copy),check(shape(a,0)==shape(a,1)) :: a
            integer, optional,intent(hide),depend(a) :: n=shape(a,0)
            integer dimension(n),intent(hide),depend(n) :: piv
            integer intent(out) :: info
        end subroutine cdet_c
        subroutine cdet_r(det,a,n,piv,info) ! in :_flinalg:det.f
            callprotoargument complex_float*,complex_float*,int*,int*,int*
            complex intent(out) :: det
            complex dimension(n,n),intent(c,in,copy),check(shape(a,0)==shape(a,1)) :: a
            integer, optional,intent(hide),depend(a) :: n=shape(a,0)
            integer dimension(n),intent(hide),depend(n) :: piv
            integer intent(out) :: info
        end subroutine cdet_r
        subroutine dlu_c(p,l,u,a,m,n,k,piv,info,permute_l,m1) ! in :_flinalg:lu.f
            callprotoargument double*,double*,double*,double*,int*,int*,int*,int*,int*,int*,int*
            double precision dimension(m1,m1),intent(out),depend(m1) :: p
            double precision dimension(m,k),intent(out),depend(m,k) :: l
            double precision dimension(k,n),intent(out),depend(k,n) :: u
            double precision dimension(m,n),intent(in,copy) :: a
            integer, optional,intent(hide),depend(a) :: m=shape(a,0)
            integer, optional,intent(hide),depend(a) :: n=shape(a,1)
            integer, optional,intent(hide),depend(m,n) :: k=(m<n?m:n)
            integer dimension(k),intent(hide),depend(k) :: piv
            integer intent(out) :: info
            integer, optional,intent(in) :: permute_l=0
            integer, optional,intent(hide),depend(permute_l,m) :: m1=(permute_l?1:m)
        end subroutine dlu_c
        subroutine zlu_c(p,l,u,a,m,n,k,piv,info,permute_l,m1) ! in :_flinalg:lu.f
            callprotoargument double*,complex_double*,complex_double*,complex_double*,int*,int*,int*,int*,int*,int*,int*
            double precision dimension(m1,m1),intent(out),depend(m1) :: p
            complex*16 dimension(m,k),intent(out),depend(m,k) :: l
            complex*16 dimension(k,n),intent(out),depend(k,n) :: u
            complex*16 dimension(m,n),intent(in,copy) :: a
            integer, optional,intent(hide),depend(a) :: m=shape(a,0)
            integer, optional,intent(hide),depend(a) :: n=shape(a,1)
            integer, optional,intent(hide),depend(m,n) :: k=(m<n?m:n)
            integer dimension(k),intent(hide),depend(k) :: piv
            integer intent(out) :: info
            integer, optional,intent(in) :: permute_l=0
            integer, optional,intent(hide),depend(permute_l,m) :: m1=(permute_l?1:m)
        end subroutine zlu_c
        subroutine slu_c(p,l,u,a,m,n,k,piv,info,permute_l,m1) ! in :_flinalg:lu.f
            callprotoargument float*,float*,float*,float*,int*,int*,int*,int*,int*,int*,int*
            real dimension(m1,m1),intent(out),depend(m1) :: p
            real dimension(m,k),intent(out),depend(m,k) :: l
            real dimension(k,n),intent(out),depend(k,n) :: u
            real dimension(m,n),intent(in,copy) :: a
            integer, optional,intent(hide),depend(a) :: m=shape(a,0)
            integer, optional,intent(hide),depend(a) :: n=shape(a,1)
            integer, optional,intent(hide),depend(m,n) :: k=(m<n?m:n)
            integer dimension(k),intent(hide),depend(k) :: piv
            integer intent(out) :: info
            integer, optional,intent(in) :: permute_l=0
            integer, optional,intent(hide),depend(permute_l,m) :: m1=(permute_l?1:m)
        end subroutine slu_c
        subroutine clu_c(p,l,u,a,m,n,k,piv,info,permute_l,m1) ! in :_flinalg:lu.f
            callprotoargument float*,complex_float*,complex_float*,complex_float*,int*,int*,int*,int*,int*,int*,int*
            real dimension(m1,m1),intent(out),depend(m1) :: p
            complex dimension(m,k),intent(out),depend(m,k) :: l
            complex dimension(k,n),intent(out),depend(k,n) :: u
            complex dimension(m,n),intent(in,copy) :: a
            integer, optional,intent(hide),depend(a) :: m=shape(a,0)
            integer, optional,intent(hide),depend(a) :: n=shape(a,1)
            integer, optional,intent(hide),depend(m,n) :: k=(m<n?m:n)
            integer dimension(k),intent(hide),depend(k) :: piv
            integer intent(out) :: info
            integer, optional,intent(in) :: permute_l=0
            integer, optional,intent(hide),depend(permute_l,m) :: m1=(permute_l?1:m)
        end subroutine clu_c
    end interface 
end python module _flinalg

! This file was auto-generated with f2py (version:1.21.0).
! See http://cens.ioc.ee/projects/f2py2e/
