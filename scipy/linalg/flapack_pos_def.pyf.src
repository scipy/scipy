! Signatures for f2py-wrappers of FORTRAN LAPACK Positive Definite Matrix functions.
!

subroutine <prefix>pstrf(n,a,lda,piv,rank_c,tol,work,info,lower)
    ! c,x,info = pstrf(a,b,lower=0,overwrite_a=0,overwrite_b=0)
    ! Solve A * X = B.
    ! A is symmetric/hermitian positive semidefinite
    ! P**T * A * P = U**T * U ,  if UPLO = 'U',
    ! P**T * A * P = L  * L**T,  if UPLO = 'L',
    ! where U is an upper triangular matrix and L is lower triangular, and
    ! P is stored as vector PIV.

    callstatement (*f2py_func)((lower?"L":"U"),&n,a,&lda,piv,&rank_c,&tol,work,&info)
    callprotoargument char*,int*,<ctype>*,int*,int*,int*,<ctypereal>*,<ctypereal>*,int*
    
    integer optional,intent(in),check(lower==0||lower==1) :: lower = 0
    integer depend(a),intent(hide):: n = shape(a,0)
    <ftype> dimension(n,n),check(shape(a,0)==shape(a,1)),intent(in,out,copy,out=c) :: a
    integer intent(hide),depend(a) :: lda=max(1,shape(a, 0))
    integer intent(out),dimension(n),depend(n) :: piv
    integer intent(out) :: rank_c
    <ftypereal> optional, intent(in) :: tol = -1.0
    <ftypereal> intent(hide),dimension(2*n),depend(n) :: work
    integer intent(out) :: info
end subroutine <prefix>pstrf


subroutine <prefix>pstf2(n,a,lda,piv,rank_c,tol,work,info,lower)
    ! c,x,info = pstf2(a,b,lower=0,overwrite_a=0,overwrite_b=0)
    ! Solve A * X = B.
    ! A is symmetric positive semidefinite
    ! P**T * A * P = U**T * U ,  if UPLO = 'U',
    ! P**T * A * P = L  * L**T,  if UPLO = 'L',
    ! where U is an upper triangular matrix and L is lower triangular, and
    ! P is stored as vector PIV.

    callstatement (*f2py_func)((lower?"L":"U"),&n,a,&lda,piv,&rank_c,&tol,work,&info)
    callprotoargument char*,int*,<ctype>*,int*,int*,int*,<ctypereal>*,<ctypereal>*,int*

    integer optional,intent(in),check(lower==0||lower==1) :: lower = 0
    integer depend(a),intent(hide):: n = shape(a,0)
    <ftype> dimension(n,n),check(shape(a,0)==shape(a,1)),intent(in,out,copy,out=c) :: a
    integer intent(hide),depend(a) :: lda=max(1,shape(a, 0))
    integer intent(out),dimension(n),depend(n) :: piv
    integer intent(out) :: rank_c
    <ftypereal> optional,intent(in) :: tol = -1.0
    <ftypereal> intent(hide),dimension(2*n),depend(n) :: work
    integer intent(out) :: info
end subroutine <prefix>pstf2


subroutine <prefix>posv(n,nrhs,a,b,info,lower)
    ! c,x,info = posv(a,b,lower=0,overwrite_a=0,overwrite_b=0)
    ! Solve A * X = B.
    ! A is symmetric positive defined
    ! A = U^T * U, C = U if lower = 0
    ! A = L * L^T, C = L if lower = 1
    ! C is triangular matrix of the corresponding Cholesky decomposition.

    callstatement (*f2py_func)((lower?"L":"U"),&n,&nrhs,a,&n,b,&n,&info)
    callprotoargument char*,int*,int*,<ctype>*,int*,<ctype>*,int*,int*

    integer optional,intent(in),check(lower==0||lower==1) :: lower = 0

    integer depend(a),intent(hide):: n = shape(a,0)
    integer depend(b),intent(hide):: nrhs = shape(b,1)
    <ftype> dimension(n,n),intent(in,out,copy,out=c) :: a
    check(shape(a,0)==shape(a,1)) :: a
    <ftype> dimension(n,nrhs),intent(in,out,copy,out=x),depend(n):: b
    check(shape(a,0)==shape(b,0)) :: b
    integer intent(out) :: info

end subroutine <prefix>posv

subroutine <prefix>posvx(fact,n,nrhs,a,lda,af,ldaf,equed,s,b,ldb,x,ldx,rcond,ferr,berr,work,irwork,info,lower)
    ! Solve A * X = B for Symmetric/Hermitian A
    ! "expert" version of the ?POSV routines
    threadsafe
    callstatement (*f2py_func)(fact,(lower?"L":"U"),&n,&nrhs,a,&lda,af,&ldaf,equed,s,b,&ldb,x,&ldx,&rcond,ferr,berr,work,irwork,&info)
    callprotoargument char*,char*,int*,int*,<ctype>*,int*,<ctype>*,int*,char*,<ctypereal>*,<ctype>*,int*,<ctype>*,int*,<ctypereal>*,<ctypereal>*,<ctypereal>*,<ctype>*,<int,int,float,double>*,int*
 
    character optional,intent(in):: fact = "E"
    integer optional,intent(in),check(lower==0||lower==1) :: lower = 0
    integer depend(a),intent(hide):: n = shape(a,0)
    integer depend(b),intent(hide):: nrhs = shape(b,1)
    <ftype> dimension(n,n),check(shape(a,0)==shape(a,1)),intent(in,copy,out,out=a_s):: a
    integer depend(a),intent(hide):: lda = shape(a,0)
    <ftype> optional,intent(in,out,out=lu),dimension(n,n),depend(n):: af
    integer depend(af),intent(hide):: ldaf = shape(af,0)
    character optional,intent(in,out):: equed = "Y"
    <ftypereal> optional,dimension(n),depend(n),intent(in,out):: s
    <ftype> dimension(n,nrhs),check(shape(b,0)==n),depend(n),intent(in,copy,out,out=b_s):: b
    integer depend(b),intent(hide):: ldb = shape(b,0)
    <ftype> dimension(n,nrhs),depend(n,nrhs),intent(out):: x
    integer depend(x),intent(hide):: ldx = shape(x,0)
    <ftypereal> intent(out):: rcond
    <ftypereal> intent(out),dimension(nrhs),depend(nrhs):: ferr
    <ftypereal> intent(out),dimension(nrhs),depend(nrhs):: berr
    <ftype> intent(hide),dimension(<3*n,3*n,2*n,2*n>),depend(n):: work
    <integer,integer,real,double precision> intent(hide),dimension(n),depend(n):: irwork
    integer intent(out):: info
 
end subroutine <prefix>posvx

subroutine <prefix>pocon(uplo,n,a,lda,anorm,rcond,work,irwork,info)
    ! Computes the 1- or inf- norm reciprocal condition number estimate
    ! for a positive definite symmetric/hermitian matrix.
    threadsafe
    callstatement (*f2py_func)(uplo,&n,a,&lda,&anorm,&rcond,work,irwork,&info)
    callprotoargument char*,int*,<ctype>*,int*,<ctypereal>*,<ctypereal>*,<ctype>*,<int,int,float,double>*,int*
 
    character optional,intent(in):: uplo = 'U'
    integer depend(a),intent(hide):: n = shape(a,0)
    <ftype> dimension(n,n),check(shape(a,0)==shape(a,1)),intent(in):: a
    integer depend(a),intent(hide):: lda = shape(a,0)
    <ftypereal> intent(in):: anorm
    <ftypereal> intent(out):: rcond
    <ftype> depend(n),dimension(<3*n,3*n,2*n,2*n>),intent(hide,cache):: work
    <integer,integer,real, double precision> depend(n),dimension(n),intent(hide,cache):: irwork
    integer intent(out):: info
 
end subroutine <prefix>pocon
 
subroutine <prefix2>potrf(n,a,lda,info,lower,clean)
    ! c,info = potrf(a,lower=0,clean=1,overwrite_a=0)
    ! Compute Cholesky decomposition of symmetric positive defined matrix:
    ! A = U^T * U, C = U if lower = 0
    ! A = L * L^T, C = L if lower = 1
    ! C is triangular matrix of the corresponding Cholesky decomposition.
    ! clean==1 zeros strictly lower or upper parts of U or L, respectively
 
    callstatement (*f2py_func)((lower?"L":"U"),&n,a,&lda,&info); if(clean){int i,j;if(lower){for(i=0;i\<n;++i) for(j=i+1;j\<n;++j) *(a+j*n+i)=0.0;} else {for(i=0;i\<n;++i) for(j=i+1;j<n;++j) *(a+i*n+j)=0.0;}}
    callprotoargument char*,int*,<ctype2>*,int*,int*
 
    integer optional,intent(in),check(lower==0||lower==1) :: lower = 0
    integer optional,intent(in),check(clean==0||clean==1) :: clean = 1
    integer depend(a),intent(hide) :: n = shape(a,0)
    <ftype2> dimension(n,n),check(shape(a,0)==shape(a,1)),intent(in,out,copy,out=c) :: a
    integer depend(n),intent(hide) :: lda = MAX(1,n)
    integer intent(out) :: info
 
end subroutine <prefix2>potrf
 
subroutine <prefix2c>potrf(n,a,lda,info,lower,clean)
    ! c,info = potrf(a,lower=0,clean=1,overwrite_a=0)
    ! Compute Cholesky decomposition of symmetric positive defined matrix:
    ! A = U^H * U, C = U if lower = 0
    ! A = L * L^H, C = L if lower = 1
    ! C is triangular matrix of the corresponding Cholesky decomposition.
    ! clean==1 zeros strictly lower or upper parts of U or L, respectively
 
    callstatement (*f2py_func)((lower?"L":"U"),&n,a,&lda,&info); if(clean){int i,j,k;if(lower){for(i=0;i\<n;++i) for(j=i+1;j\<n;++j) {k=j*n+i;(a+k)->r=(a+k)->i=0.0;}} else {for(i=0;i\<n;++i) for(j=i+1;j\<n;++j) {k=i*n+j;(a+k)->r=(a+k)->i=0.0;}}}
    callprotoargument char*,int*,<ctype2c>*,int*,int*
 
    integer optional,intent(in),check(lower==0||lower==1) :: lower = 0
    integer optional,intent(in),check(clean==0||clean==1) :: clean = 1
    integer depend(a),intent(hide):: n = shape(a,0)
    <ftype2c> dimension(n,n),check(shape(a,0)==shape(a,1)),intent(in,out,copy,out=c) :: a
    integer depend(n),intent(hide) :: lda = MAX(1,n)
    integer intent(out) :: info
 
end subroutine <prefix2c>potrf
 
subroutine <prefix>potrs(n,nrhs,c,b,info,lower)
     ! x,info = potrs(c,b,lower=0=1,overwrite_b=0)
    ! Solve A * X = B.
    ! A is symmetric positive defined
    ! A = U^T * U, C = U if lower = 0
    ! A = L * L^T, C = L if lower = 1
    ! C is triangular matrix of the corresponding Cholesky decomposition.
 
    callstatement (*f2py_func)((lower?"L":"U"),&n,&nrhs,c,&n,b,&n,&info)
    callprotoargument char*,int*,int*,<ctype>*,int*,<ctype>*,int*,int*
 
    integer optional,intent(in),check(lower==0||lower==1) :: lower = 0
 
    integer depend(c),intent(hide):: n = shape(c,0)
    integer depend(b),intent(hide):: nrhs = shape(b,1)
    <ftype> dimension(n,n),intent(in) :: c
    check(shape(c,0)==shape(c,1)) :: c
    <ftype> dimension(n,nrhs),intent(in,out,copy,out=x),depend(n):: b
    check(shape(c,0)==shape(b,0)) :: b
    integer intent(out) :: info
 
end subroutine <prefix>potrs
 
subroutine <prefix>potri(n,c,info,lower)
    ! inv_a,info = potri(c,lower=0,overwrite_c=0)
    ! Compute A inverse A^-1.
    ! A = U^T * U, C = U if lower = 0
    ! A = L * L^T, C = L if lower = 1
    ! C is triangular matrix of the corresponding Cholesky decomposition.
 
    callstatement (*f2py_func)((lower?"L":"U"),&n,c,&n,&info)
    callprotoargument char*,int*,<ctype>*,int*,int*
 
    integer optional,intent(in),check(lower==0||lower==1) :: lower = 0
 
    integer depend(c),intent(hide):: n = shape(c,0)
    <ftype> dimension(n,n),intent(in,out,copy,out=inv_a) :: c
    check(shape(c,0)==shape(c,1)) :: c
    integer intent(out) :: info

end subroutine <prefix>potri
