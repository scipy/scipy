! Signatures for f2py-wrappers of FORTRAN LAPACK General Banded Matrix functions.
!

subroutine <prefix>gbsv(n,kl,ku,nrhs,ab,piv,b,info)
     ! lub,piv,x,info = gbsv(kl,ku,ab,b,overwrite_ab=0,overwrite_b=0)
    ! Solve A * X = B
    ! A = P * L * U
    ! A is a band matrix of order n with kl subdiagonals and ku superdiagonals
    ! starting at kl-th row.
    ! X, B are n-by-nrhs matrices
 
    callstatement {int i=2*kl+ku+1;(*f2py_func)(&n,&kl,&ku,&nrhs,ab,&i,piv,b,&n,&info);for(i=0;i\<n;--piv[i++]);}
    callprotoargument int*,int*,int*,int*,<ctype>*,int*,int*,<ctype>*,int*,int*
    integer depend(ab),intent(hide):: n = shape(ab,1)
    integer intent(in) :: kl
    integer intent(in) :: ku
    integer depend(b),intent(hide) :: nrhs = shape(b,1)
    <ftype> dimension(2*kl+ku+1,n),depend(kl,ku), check(2*kl+ku+1==shape(ab,0)) :: ab
    integer dimension(n),depend(n),intent(out) :: piv
    <ftype> dimension(n,nrhs),depend(n),check(shape(ab,1)==shape(b,0)) :: b
    integer intent(out) :: info
    intent(in,out,copy,out=x) b
    intent(in,out,copy,out=lub) ab

end subroutine <prefix>gbsv


subroutine <prefix2>gbsvx(fact,trans,n,kl,ku,nrhs,ab,ldab,afb,ldafb,piv,equed,r,c,b,ldb,x,ldx,rcond,ferr,berr,work,iwork,info)
     ! ?GBSVX uses the LU factorization to compute the solution to a real
     ! system of linear equations A * X = B, A**T * X = B, or A**H * X = B,
     ! where A is a band matrix of order N with KL subdiagonals and KU
     ! superdiagonals, and X and B are N-by-NRHS matrices.

     ! Error bounds on the solution and a condition estimate are also
     ! provided.

    callstatement {int i;for(i=0;i\<n;++piv[i++]);(*f2py_func)(&"NEF"[fact],&"NTC"[trans],&n,&kl,&ku,&nrhs,ab,&ldab,afb,&ldafb,piv,equed,r,c,b,&ldb,x,&ldx,&rcond,ferr,berr,work,iwork,&info);for(i=0;i\<n;--piv[i++]);}
    callprotoargument char*,char*,int*,int*,int*,int*,<ctype2>*,int*,<ctype2>*,int*,int*,char*,<ctype2>*,<ctype2>*,<ctype2>*,int*,<ctype2>*,int*,<ctype2>*,<ctype2>*,<ctype2>*,<ctype2>*,int*,int*

    integer intent(in), check((0<=fact) && (fact<3)) :: fact = 0
    integer intent(in), check((0<=trans) && (trans<3)) :: trans = 0

    integer depend(ab),intent(hide):: n = shape(ab,1)
    integer intent(in), check(0<=kl) :: kl
    integer intent(in), check(0<=ku) :: ku
    integer intent(hide), depend(b) :: nrhs = shape(b,1)
    <ftype2> intent(in,out,copy,out=a), dimension(ldab,n), check(kl+ku+1==shape(ab,0)) :: ab
    integer intent(hide), depend(ab) :: ldab = max(1, shape(ab,0))
    <ftype2> optional, intent(in,out,copy,out=lu), depend(kl, ku), dimension(2*kl+ku+1,n), check(2*kl+ku+1==shape(afb,0)) :: afb
    integer intent(hide), depend(afb)  :: ldafb = max(1, shape(afb, 0))
    integer optional, intent(in,out,copy,out=ipiv), depend(n), dimension(n) :: piv
    character optional, intent(in,out), check((*equed=='N')||(*equed=='R')||(*equed=='C')||(*equed=='B')) :: equed = 'N'
    <ftype2> optional, intent(in,out), depend(n), dimension(n) :: r
    <ftype2> optional, intent(in,out), depend(n), dimension(n) :: c
    <ftype2>  intent(in,out), depend(n), dimension(ldb, nrhs), check(n==shape(b, 0)) :: b
    integer intent(hide) :: ldb = max(1, shape(b, 0))
    <ftype2> depend(n, nrhs), intent(out), dimension(ldx, nrhs) :: x
    integer intent(hide) :: ldx = max(1, n)
    <ftype2> intent(out) :: rcond
    <ftype2> intent(out), depend(nrhs), dimension(nrhs) :: ferr
    <ftype2> intent(out), depend(nrhs), dimension(nrhs) :: berr
    <ftype2> intent(out), depend(n), dimension(3 * n) :: work
    integer intent(hide), depend(n), dimension(n) :: iwork
    integer intent(out) :: info
end subroutine <prefix2>gbsvx


subroutine <prefix2c>gbsvx(fact,trans,n,kl,ku,nrhs,ab,ldab,afb,ldafb,piv,equed,r,c,b,ldb,x,ldx,rcond,ferr,berr,work,rwork,info)
     ! ?GBSVX uses the LU factorization to compute the solution to a real
     ! system of linear equations A * X = B, A**T * X = B, or A**H * X = B,
     ! where A is a band matrix of order N with KL subdiagonals and KU
     ! superdiagonals, and X and B are N-by-NRHS matrices.

     ! Error bounds on the solution and a condition estimate are also
     ! provided.

    callstatement {int i;for(i=0;i\<n;++piv[i++]);(*f2py_func)(&"NEF"[fact],&"NTC"[trans],&n,&kl,&ku,&nrhs,ab,&ldab,afb,&ldafb,piv,equed,r,c,b,&ldb,x,&ldx,&rcond,ferr,berr,work,rwork,&info);for(i=0;i\<n;--piv[i++]);}
    callprotoargument char*,char*,int*,int*,int*,int*,<ctype2c>*,int*,<ctype2c>*,int*,int*,char*,<ctype2>*,<ctype2>*,<ctype2c>*,int*,<ctype2c>*,int*,<ctype2>*,<ctype2>*,<ctype2>*,<ctype2c>*,<ctype2>*,int*

    integer intent(in), check((0<=fact) && (fact<3)) :: fact = 0
    integer intent(in), check((0<=trans) && (trans<3)) :: trans = 0

    integer depend(ab),intent(hide):: n = shape(ab,1)
    integer intent(in), check(0<=kl) :: kl
    integer intent(in), check(0<=ku) :: ku
    integer intent(hide), depend(b) :: nrhs = shape(b,1)
    <ftype2c> intent(in,out,copy,out=a), dimension(ldab,n), check(kl+ku+1==shape(ab,0)) :: ab
    integer intent(hide), depend(ab) :: ldab = max(1, shape(ab,0))
    <ftype2c> optional, intent(in,out,copy,out=lu), depend(kl, ku), dimension(2*kl+ku+1,n), check(2*kl+ku+1==shape(afb,0)) :: afb
    integer intent(hide), depend(afb)  :: ldafb = max(1, shape(afb, 0))
    integer optional, intent(in,out,copy,out=piv), depend(n), dimension(n) :: piv
    character optional, intent(in,out), check((*equed=='N')||(*equed=='R')||(*equed=='C')||(*equed=='B')) :: equed = 'N'
    <ftype2> optional, intent(in,out), depend(n), dimension(n) :: r
    <ftype2> optional, intent(in,out), depend(n), dimension(n) :: c
    <ftype2c>  intent(in,out), depend(n), dimension(ldb, nrhs), check(n==shape(b, 0)) :: b
    integer intent(hide) :: ldb = max(1, shape(b, 0))
    <ftype2c> depend(n, nrhs), intent(out), dimension(ldx, nrhs) :: x
    integer intent(hide) :: ldx = max(1, n)
    <ftype2> intent(out) :: rcond
    <ftype2> intent(out), depend(nrhs), dimension(nrhs) :: ferr
    <ftype2> intent(out), depend(nrhs), dimension(nrhs) :: berr
    <ftype2c> intent(out), depend(n), dimension(2 * n) :: work
    <ftype2> intent(hide), depend(n), dimension(n) :: rwork
    integer intent(out) :: info
end subroutine <prefix2c>gbsvx


subroutine <prefix>gbtrf(m,n,ab,kl,ku,ldab,ipiv,info)
    ! in :Band:dgbtrf.f
    ! lu,ipiv,info = dgbtrf(ab,kl,ku,[m,n,ldab,overwrite_ab])
    ! Compute  an  LU factorization of a real m-by-n band matrix

    ! threadsafe  ! FIXME: should this be added ?

    callstatement {int i;(*f2py_func)(&m,&n,&kl,&ku,ab,&ldab,ipiv,&info); for(i=0,n=MIN(m,n);i\<n;--ipiv[i++]);}
    callprotoargument int*,int*,int*,int*,<ctype>*,int*,int*,int*

    ! let the default be a square matrix:
    integer optional,depend(ab) :: m=shape(ab,1)
    integer optional,depend(ab) :: n=shape(ab,1)
    integer :: kl
    integer :: ku

    <ftype> dimension(ldab,n),intent(in,out,copy,out=lu) :: ab
    integer optional,check(shape(ab,0)==ldab),depend(ab) :: ldab=max(shape(ab,0),1)
    integer dimension(MIN(m,n)),depend(m,n),intent(out) :: ipiv
    integer intent(out):: info

end subroutine <prefix>gbtrf

subroutine <prefix>gbtrs(ab,kl,ku,b,ipiv,trans,n,nrhs,ldab,ldb,info) ! in :Band:dgbtrs.f
    ! x,info = dgbtrs(ab,kl,ku,b,ipiv,[trans,n,ldab,ldb,overwrite_b])
    ! solve a system of linear equations A * X = B or A' * X = B
    ! with a general band matrix A using the  LU  factorization
    ! computed by DGBTRF
    !
    ! TRANS   Specifies the form of the system of equations.
    !  0  = 'N':  A * X =B  (No transpose)
    !  1  = 'T':  A'* X = B  (Transpose)
    !  2  = 'C':  A'* X = B  (Conjugate transpose = Transpose)
    
    callstatement {int i;for(i=0;i\<n;++ipiv[i++]);(*f2py_func)((trans>0?(trans==1?"T":"C"):"N"),&n,&kl,&ku,&nrhs,ab,&ldab,ipiv,b,&ldb,&info);for(i=0;i\<n;--ipiv[i++]);}
    callprotoargument char*,int*,int *,int*,int*,<ctype>*,int*,int*,<ctype>*,int*,int*
    !character optional:: trans='N'
    integer optional:: trans=0
    integer optional,depend(ab) :: n=shape(ab,1)
    integer :: kl
    integer :: ku
    integer intent(hide),depend(b):: nrhs=shape(b,1)

    <ftype> dimension(ldab,n),intent(in) :: ab
    integer optional,check(shape(ab,0)==ldab),depend(ab) :: ldab=shape(ab,0)

    integer dimension(n),intent(in) :: ipiv
    <ftype> dimension(ldb,nrhs),intent(in,out,copy,out=x) :: b
    integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
    !integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
    integer intent(out):: info

end subroutine <prefix>gbtrs
