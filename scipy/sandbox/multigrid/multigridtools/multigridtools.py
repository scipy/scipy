# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.32
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _multigridtools
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


U_NODE = _multigridtools.U_NODE
C_NODE = _multigridtools.C_NODE
F_NODE = _multigridtools.F_NODE

def sa_get_aggregates(*args):
    """sa_get_aggregates(int n_row, int Ap, int Aj, std::vector<(int)> Bj)"""
    return _multigridtools.sa_get_aggregates(*args)


def rs_strong_connections(*args):
    """
      rs_strong_connections(int n_row, float theta, int Ap, int Aj, float Ax, std::vector<(int)> Sp,
          std::vector<(int)> Sj,
          std::vector<(float)> Sx)
      rs_strong_connections(int n_row, double theta, int Ap, int Aj, double Ax,
          std::vector<(int)> Sp, std::vector<(int)> Sj,
          std::vector<(double)> Sx)
      """
    return _multigridtools.rs_strong_connections(*args)

def rs_interpolation(*args):
    """
      rs_interpolation(int n_nodes, int Ap, int Aj, float Ax, int Sp, int Sj,
          float Sx, int Tp, int Tj, float Tx, std::vector<(int)> Bp,
          std::vector<(int)> Bj, std::vector<(float)> Bx)
      rs_interpolation(int n_nodes, int Ap, int Aj, double Ax, int Sp, int Sj,
          double Sx, int Tp, int Tj, double Tx, std::vector<(int)> Bp,
          std::vector<(int)> Bj, std::vector<(double)> Bx)
      """
    return _multigridtools.rs_interpolation(*args)

def sa_strong_connections(*args):
    """
      sa_strong_connections(int n_row, float epsilon, int Ap, int Aj, float Ax,
          std::vector<(int)> Sp, std::vector<(int)> Sj,
          std::vector<(float)> Sx)
      sa_strong_connections(int n_row, double epsilon, int Ap, int Aj, double Ax,
          std::vector<(int)> Sp, std::vector<(int)> Sj,
          std::vector<(double)> Sx)
      """
    return _multigridtools.sa_strong_connections(*args)

def sa_smoother(*args):
    """
      sa_smoother(int n_row, float omega, int Ap, int Aj, float Ax, int Sp,
          int Sj, float Sx, std::vector<(int)> Bp,
          std::vector<(int)> Bj, std::vector<(float)> Bx)
      sa_smoother(int n_row, double omega, int Ap, int Aj, double Ax,
          int Sp, int Sj, double Sx, std::vector<(int)> Bp,
          std::vector<(int)> Bj, std::vector<(double)> Bx)
      """
    return _multigridtools.sa_smoother(*args)

def gauss_seidel(*args):
    """
      gauss_seidel(int n_row, int Ap, int Aj, float Ax, float x, float b,
          int row_start, int row_stop, int row_step)
      gauss_seidel(int n_row, int Ap, int Aj, double Ax, double x, double b,
          int row_start, int row_stop, int row_step)
      gauss_seidel(long long n_row, long long Ap, long long Aj, float Ax,
          float x, float b, long long row_start, long long row_stop,
          long long row_step)
      gauss_seidel(long long n_row, long long Ap, long long Aj, double Ax,
          double x, double b, long long row_start,
          long long row_stop, long long row_step)
      """
    return _multigridtools.gauss_seidel(*args)

def jacobi(*args):
    """
      jacobi(int n_row, int Ap, int Aj, float Ax, float x, float b,
          float temp, int row_start, int row_stop,
          int row_step, float omega)
      jacobi(int n_row, int Ap, int Aj, double Ax, double x, double b,
          double temp, int row_start, int row_stop,
          int row_step, double omega)
      jacobi(long long n_row, long long Ap, long long Aj, float Ax,
          float x, float b, float temp, long long row_start,
          long long row_stop, long long row_step,
          float omega)
      jacobi(long long n_row, long long Ap, long long Aj, double Ax,
          double x, double b, double temp, long long row_start,
          long long row_stop, long long row_step,
          double omega)
      """
    return _multigridtools.jacobi(*args)
