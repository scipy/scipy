# Last Change: Mon Nov 26 04:00 PM 2007 J
# vim:syntax=python
from os.path import join as pjoin

import sys
from distutils.sysconfig import get_python_inc

from numpy.distutils.misc_util import get_numpy_include_dirs
from numpy.distutils.scons import GetNumpyEnvironment

from numpy.distutils.scons import CheckF77LAPACK

env = GetNumpyEnvironment(ARGUMENTS)

# Configuration
config = env.NumpyConfigure(custom_tests = {'CheckF77LAPACK' : CheckF77LAPACK})
if not config.CheckF77LAPACK():
    warnings.warn("Could not find F77 LAPACK")
config.Finish()

if sys.platform=='win32':
    superlu_defs = [('NO_TIMER',1)]
else:
    superlu_defs = []
superlu_defs.append(('USE_VENDOR_BLAS', 1))

env.AppendUnique(CPPDEFINES = superlu_defs)
env.AppendUnique(CPPPATH = get_numpy_include_dirs())
env.AppendUnique(CPPPATH = env['F2PYINCLUDEDIR'])

# Build superlu 
src = env.NumpyGlob(pjoin('SuperLU', 'SRC', '*.c'))
superlu = env.NumpyStaticExtLibrary('superlu_src', source = src, 
                                    CPPDEFINES = superlu_defs)

env.AppendUnique(LIBS = ['superlu_src'])
env.AppendUnique(LIBPATH = env['build_dir'])

# Build common objects files
com_env = env.Copy()
com_env.AppendUnique(CPPPATH = get_python_inc())
com_src = [pjoin(env['build_dir'], i) for i in ['_superlu_utils.c', \
                                                '_superluobject.c']]
com_objs = com_env.SharedObject(source = com_src)

# Build _zsuperlu
env.NumpyPythonExtension('_zsuperlu', source = ['_zsuperlumodule.c'] + com_objs)

# Build _csuperlu
env.NumpyPythonExtension('_csuperlu', source = ['_csuperlumodule.c'] + com_objs)

# Build _dsuperlu
env.NumpyPythonExtension('_dsuperlu', source = ['_dsuperlumodule.c'] + com_objs)

# Build _ssuperlu
env.NumpyPythonExtension('_ssuperlu', source = ['_ssuperlumodule.c'] + com_objs)
