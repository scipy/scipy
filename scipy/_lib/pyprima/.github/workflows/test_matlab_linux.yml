name: Test MATLAB, Linux

on:
  # Trigger the workflow on push or pull request
  push:
  workflow_dispatch:
    inputs:
      git-ref:
        description: Git Ref (Optional)
        required: false

# Show the git ref in the workflow name if it is invoked manually.
run-name: ${{ github.event_name == 'workflow_dispatch' && format('Manual run {0}', inputs.git-ref) || '' }}


jobs:
  test:
    name: Test MATLAB
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        matlab: [R2020b, R2021a, R2021b, R2022a, R2022b, R2023a, R2023b, R2024a, latest]

    steps:

      - name: Set http.postBuffer and core.compression
        # This is a workaround for random "early EOF" of checkout.
        # See https://github.com/actions/checkout/issues/748, https://github.com/actions/checkout/issues/1379
        if: startsWith(matrix.os, 'windows')
        run: git config --global http.postBuffer 1048576000 && git config --global core.compression 0

      - name: Clone Repository (Latest)
        uses: actions/checkout@v4
        if: github.event.inputs.git-ref == ''
        with:
          submodules: recursive
        #   ssh-key: ${{ secrets.SSH_PRIVATE_KEY_ACT }} # This forces checkout to use SSH, not HTTPS
        # As of 231227, checkout with ssh fails frequently on Windows runners.
      - name: Clone Repository (Custom Ref)
        uses: actions/checkout@v4
        if: github.event.inputs.git-ref != ''
        with:
          ref: ${{ github.event.inputs.git-ref }}
          submodules: recursive
        #   ssh-key: ${{ secrets.SSH_PRIVATE_KEY_ACT }} # This forces checkout to use SSH, not HTTPS
        # As of 231227, checkout with ssh fails frequently on Windows runners.

      - name: Miscellaneous setup
        run: bash .github/scripts/misc_setup

      - name: Revise fmxapi.F90
        shell: bash
        run: |
          cd matlab/mex_gateways/
          $SEDI "s|\(.*maybe due to overflow.*$\)|\1\nwrite(*,*) 'x = ', x; write(*,*) 'x_dp = ', x_dp|" fmxapi.F90
          cat fmxapi.F90

      - name: Revise postprima.m
        shell: bash
        run: |
          cd matlab/interfaces/private/
          $SEDI "s/max(\[0, chist\]) > 0)/max(\[0, chist\]) > 0)\nprobinfo.raw_data\noutput\nchist/" postprima.m
          cat postprima.m

      - name: Decide gfortran version for MATLAB on Linux
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          GFVER=${{ env.GFORTRAN_VERSION }}
          if [[ "${{ matrix.os }}" = "ubuntu-20.04" ]] ; then
              GFVER=11
          fi
          if [[ "${{ matrix.matlab }}" = "R2020b" || "${{ matrix.matlab }}" = "R2021a" || "${{ matrix.matlab }}" = "R2021b" ]] ; then
              GFVER=9
          fi
          echo "GFVER=$GFVER" >> $GITHUB_ENV
      - name: Set up gfortran on Linux
        if: startsWith(matrix.os, 'ubuntu')
        uses: fortran-lang/setup-fortran@main
        with:
          compiler: gcc
          version: ${{ env.GFVER }}
      - name: Check gfortran version on Linux
        if: startsWith(matrix.os, 'ubuntu')
        run: which gfortran && gfortran --version

      - name: Decide the version of oneAPI to use
        shell: bash
        run: |
          ONEAPI_VERSION=
          if [[ "${{ matrix.os }}" = "windows-"* ]] ; then
              if [[ "${{ matrix.matlab }}" = "R2020"* || "${{ matrix.matlab }}" = "R2021"* || "${{ matrix.matlab }}" = "R2022"* || "${{ matrix.matlab }}" = "R2023"* ]] ; then
                  ONEAPI_VERSION=2023
              fi
          fi
          echo "ONEAPI_VERSION=$ONEAPI_VERSION" >> $GITHUB_ENV
          echo "ONEAPI_VERSION:" $ONEAPI_VERSION

      - name: Install Intel oneAPI on macOS
        if: startsWith(matrix.os, 'macos')
        run: bash .github/scripts/install_oneapi_macos.sh $ONEAPI_VERSION

      - name: Install Intel oneAPI on Windows
        if: startsWith(matrix.os, 'windows')
        run: cmd.exe "/K" '".github\scripts\install_oneapi_windows.bat %ONEAPI_VERSION%"'

      - name: Set up MATLAB
        uses: matlab-actions/setup-matlab@v2.2.0
        with:
          release: ${{ matrix.matlab }}
          cache: true
          products: Parallel_Computing_Toolbox

      - name: Conduct the test
        uses: matlab-actions/run-command@v2.1.1
        with:
          command: |
            cd matlab/tests; testprima_ex();
