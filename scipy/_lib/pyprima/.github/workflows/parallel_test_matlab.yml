name: Parallel test, MATLAB

on:
  # Trigger the workflow on push or pull request
  #push:
  #pull_request:  # DANGEROUS! MUST be disabled for self-hosted runners!
  # Trigger the workflow by cron. The default time zone of GitHub Actions is UTC.
  schedule:
    - cron: '0 14 2-31/2 * *'
  # Trigger the workflow manually
  workflow_dispatch:
    inputs:
      git-ref:
        description: Git Ref (Optional)
        required: false
      random-seed:
        description: Random Seed (Optional)
        required: false
      dimension:
        description: Dimension (Optional)
        required: false
      np:
        description: Number of Parallel Calls (Optional)
        required: false

# Show the git ref in the workflow name if it is invoked manually.
run-name: ${{ github.event_name == 'workflow_dispatch' && format('Manual run {0} , seed {1}, dimension {2}, {3} parallel calls', inputs.git-ref, inputs.random-seed, inputs.dimension, inputs.np) || '' }}

jobs:
  test:
    name: Parallel test of PRIMA
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        # Only the following combinations of OS and MATLAB support parfor
        os: [ubuntu-latest, windows-latest, macos-12, macos-13]
        matlab: [R2023a, R2023b, R2024a, latest]
        solver: [uobyqa, newuoa, bobyqa, lincoa, cobyla]


    steps:

      - name: Set http.postBuffer and core.compression
        # This is a workaround for random "early EOF" of checkout.
        # See https://github.com/actions/checkout/issues/748, https://github.com/actions/checkout/issues/1379
        if: startsWith(matrix.os, 'windows')
        run: git config --global http.postBuffer 1048576000 && git config --global core.compression 0

      - name: Clone Repository (Latest)
        uses: actions/checkout@v4
        if: github.event.inputs.git-ref == ''
        with:
        #   ssh-key: ${{ secrets.SSH_PRIVATE_KEY_ACT }} # This forces checkout to use SSH, not HTTPS
        # As of 231227, checkout with ssh fails frequently on Windows runners.
          submodules: recursive
      - name: Clone Repository (Custom Ref)
        uses: actions/checkout@v4
        if: github.event.inputs.git-ref != ''
        with:
          ref: ${{ github.event.inputs.git-ref }}
        #   ssh-key: ${{ secrets.SSH_PRIVATE_KEY_ACT }} # This forces checkout to use SSH, not HTTPS
        # As of 231227, checkout with ssh fails frequently on Windows runners.
          submodules: recursive

      - name: Miscellaneous setup
        run: bash .github/scripts/misc_setup

      - name: Set up gfortran on Linux
        if: startsWith(matrix.os, 'ubuntu')
        uses: fortran-lang/setup-fortran@main
        with:
          compiler: gcc
          version: ${{ env.GFORTRAN_VERSION }}
      - name: Check gfortran version on Linux
        if: startsWith(matrix.os, 'ubuntu')
        run: which gfortran && gfortran --version

      - name: Decide the version of oneAPI to use
        shell: bash
        run: |
          ONEAPI_VERSION=
          if [[ "${{ matrix.os }}" = "windows-"* ]] ; then
              if [[ "${{ matrix.matlab }}" = "R2020"* || "${{ matrix.matlab }}" = "R2021"* || "${{ matrix.matlab }}" = "R2022"* || "${{ matrix.matlab }}" = "R2023"* ]] ; then
                  ONEAPI_VERSION=2023
              fi
          fi
          echo "ONEAPI_VERSION=$ONEAPI_VERSION" >> $GITHUB_ENV
          echo "ONEAPI_VERSION:" $ONEAPI_VERSION

      - name: Install Intel oneAPI on macOS
        if: startsWith(matrix.os, 'macos')
        run: bash .github/scripts/install_oneapi_macos.sh $ONEAPI_VERSION

      - name: Install Intel oneAPI on Windows
        if: startsWith(matrix.os, 'windows')
        run: cmd.exe "/K" '".github\scripts\install_oneapi_windows.bat %ONEAPI_VERSION%"'

      - name: Set up MATLAB with optimization toolbox
        uses: matlab-actions/setup-matlab@v2.2.0
        with:
          release: ${{ matrix.matlab }}
          products: Optimization_Toolbox Parallel_Computing_Toolbox
          cache: true

      - name: Conduct the test
        uses: matlab-actions/run-command@v2.1.1
        with:
          command: |
            ver;
            root_dir = pwd();
            cd(fullfile(root_dir, 'matlab/tests'));
            options = struct();
            if ~isempty('${{ inputs.random-seed }}')
                options.seed = str2num('${{ inputs.random-seed }}');
            end
            if ~isempty('${{ inputs.dimension }}')
                options.n = str2num('${{ inputs.dimension }}');
            end
            if ~isempty('${{ inputs.np }}')
                options.np = str2num('${{ inputs.np }}');
            end
            options

            % Conduct the test multiple times. Some errors may not occur during the first test.
            exception = [];
            try
              parallel('${{ matrix.solver }}', options);
              options.compile = false;
              parallel('${{ matrix.solver }}', options);
              parallel('${{ matrix.solver }}', options);
            catch exception
            end

            % Copy the crash dump files to root_dir if exceptions occur.
            if ~isempty(exception)
              copy_crash_dump_files(root_dir)
              dir(root_dir)
              rethrow(exception);
            end


      - name: Store artifacts
        uses: actions/upload-artifact@v4.3.1
        if: always()  # Always run even if the workflow is canceled manually or due to overtime.
        with:
          name: ${{ matrix.solver }}
          path: |
            matlab_crash_dump*



  # The following job check whether the tests were successful or cancelled due to timeout.
  # N.B.: Remember to specify `continue-on-error: true` for the job of the tests.
  check_success_timeout:
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    needs: test
    steps:
      - name: Clone the GitHub actions scripts
        uses: actions/checkout@v4
        with:
          repository: equipez/github_actions_scripts
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY_ACT }} # This forces checkout to use SSH, not HTTPS
          path: scripts

      - name: Check whether the tests were successful or cancelled due to timeout
        run: bash scripts/check_success_timeout ${{ secrets.GITHUB_TOKEN }} ${{ github.repository }} ${{ github.run_id }}
