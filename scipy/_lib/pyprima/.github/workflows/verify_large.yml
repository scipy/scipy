name: Verification, large

on:
  # Trigger the workflow on push or pull request
  push:
  pull_request:  # DANGEROUS! MUST be disabled for self-hosted runners!
  # Trigger the workflow by cron. The default time zone of GitHub Actions is UTC.
  schedule:
    - cron: '0 13 * * *'
  # Trigger the workflow manually
  workflow_dispatch:
    inputs:
      git-ref:
        description: Git Ref (Optional)
        required: false
      random-seed:
        description: Random Seed (Optional)
        required: false

# Show the git ref in the workflow name if it is invoked manually.
run-name: ${{ github.event_name == 'workflow_dispatch' && format('Manual run {0} , seed {1}', inputs.git-ref, inputs.random-seed) || '' }}


jobs:
  test:
    name: Verify PRIMA.
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        matlab: [latest]
        solver: [newuoa, cobyla, lincoa, bobyqa, uobyqa]
        dim: [large]

    steps:

      - name: Clone Repository (Latest)
        uses: actions/checkout@v4
        if: github.event.inputs.git-ref == ''
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY_ACT }} # This forces checkout to use SSH, not HTTPS
          submodules: recursive
      - name: Clone Repository (Custom Ref)
        uses: actions/checkout@v4
        if: github.event.inputs.git-ref != ''
        with:
          ref: ${{ github.event.inputs.git-ref }}
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY_ACT }} # This forces checkout to use SSH, not HTTPS
          submodules: recursive

      - name: Miscellaneous setup
        run: bash .github/scripts/misc_setup

      - name: Clone MatCUTEst
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY_ACT }} # This forces checkout to use SSH, not HTTPS
          repository: matcutest/matcutest_compiled
          path: matcutest

      - name: Set up gfortran on Linux
        if: startsWith(matrix.os, 'ubuntu')
        uses: fortran-lang/setup-fortran@main
        with:
          compiler: gcc
          version: ${{ env.GFORTRAN_VERSION }}
      - name: Check gfortran version on Linux
        if: startsWith(matrix.os, 'ubuntu')
        run: which gfortran && gfortran --version

      - name: Check MATLAB
        id: check_matlab
        run: if type 'matlab' &> /dev/null ; then echo "::set-output name=has_matlab::true" ; fi

      - name: Set up MATLAB
        if: ${{ steps.check_matlab.outputs.has_matlab != 'true' }}
        uses: matlab-actions/setup-matlab@v2.2.0
        with:
          release: ${{ matrix.matlab }}
          cache: true
          products: Parallel_Computing_Toolbox

      - name: Revise get_solvers.m to print the revised header file
        run: |
          cd matlab/tests/private || exit 1
          sed -i "s|\(^.*\)\(setup(solver.*$\)|\1header_file\n\1system(['cat ', header_file]);\n\1\2|" get_solvers.m

      - name: Revise setup_compiler_options.m to print the revised mexopt file
        run: |
          cd matlab/tests/private || exit 1
          sed -i "s|return|for ifile = 1 : length(config_files), ifile, cfile = fullfile(config_dir, config_files{ifile}) , system(['cat ', cfile]); end|" set_compiler_options.m

      - name: Conduct the test
        uses: matlab-actions/run-command@v2.1.1
        with:
          command: |
            ver;
            root_dir = pwd();

            cd(fullfile(root_dir, 'matcutest')); install(); which macup

            cd(fullfile(root_dir, 'matlab/tests'));
            options = struct();
            options.verbose = true;
            options.nr = 5;
            options.no_classical = true;  % We do not test the classical mode on "large" problems.
            if ~isempty('${{ inputs.random-seed }}')
                options.seed = str2num('${{ inputs.random-seed }}');
            else
                copyfile('private/year_week.m', cd());
                options.seed = year_week('Asia/Shanghai');
            end
            options
            verify('${{ matrix.solver }}', '${{ matrix.dim }}', options);
            cd(root_dir); setup path; setup clean; setup uninstall  % Test that `setup` works properly.

      - name: List problems that started but did not end
        # The solver got stuck when solving these problems. Investigate what happened.
        if: always()
        shell: bash
        run: |
          solver=${{ matrix.solver }}
          cd /tmp/${solver}_verify_prima/
          ls -R1 *${solver}*_start > ${solver}_prob_start
          ls -R1 *${solver}*_end > ${solver}_prob_end
          diff ${solver}_prob_start ${solver}_prob_end > ${solver}_stuck || :
          printf "\n\n>>>>>>>>>>>>>>>>\nProblems that started but did not end:\n\n"
          cat ${solver}_stuck
          printf "\n<<<<<<<<<<<<<<<<\n\n"

      - name: Store artifacts
        uses: actions/upload-artifact@v4.3.1
        if: always()  # Always run even if the workflow is canceled manually or due to overtime.
        with:
          name: artifact-${{ matrix.solver }}-${{ matrix.dim }}
          path: |
            /tmp/${{ matrix.solver }}_verify_prima/*start*
            /tmp/${{ matrix.solver }}_verify_prima/*end*
            /tmp/${{ matrix.solver }}_verify_prima/*stuck*
            /tmp/${{ matrix.solver }}_verify_prima/fort.*

  # The following job check whether the tests were successful or cancelled due to timeout.
  # N.B.: Remember to specify `continue-on-error: true` for the job of the tests.
  check_success_timeout:
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    needs: test
    steps:
      - name: Clone the GitHub actions scripts
        uses: actions/checkout@v4
        with:
          repository: equipez/github_actions_scripts
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY_ACT }} # This forces checkout to use SSH, not HTTPS
          path: scripts

      - name: Check whether the tests were successful or cancelled due to timeout
        run: bash scripts/check_success_timeout ${{ secrets.GITHUB_TOKEN }} ${{ github.repository }} ${{ github.run_id }}
