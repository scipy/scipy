name: Plot performance profiles for UOBYQA, small

on:
  # Trigger the workflow on push or pull request
  push:
  pull_request:  # DANGEROUS! MUST be disabled for self-hosted runners!
  # Trigger the workflow by cron. The default time zone of GitHub Actions is UTC.
  # schedule:
  #   - cron: '0 2,6,10,14,18,22 * * *'
  # Trigger the workflow manually
  workflow_dispatch:
    inputs:
      git-ref:
        description: Git Ref (Optional)
        required: false

# Show the git ref in the workflow name if it is invoked manually.
run-name: ${{ github.event_name == 'workflow_dispatch' && format('Manual run {0}', inputs.git-ref) || '' }}


jobs:
  test:
    name: Profile PRIMA.
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        matlab: [latest]
        dim: [small]
        solver: [uobyqa]
        competitor: [classical, archiva, norma]

    steps:

      - name: Clone Repository (Latest)
        uses: actions/checkout@v4
        if: github.event.inputs.git-ref == ''
        with:
          fetch-depth: 2  # checkout fetches only one commit by default. Set it to two for the `norma` test
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY_ACT }} # This forces checkout to use SSH, not HTTPS
          submodules: recursive
      - name: Clone Repository (Custom Ref)
        uses: actions/checkout@v4
        if: github.event.inputs.git-ref != ''
        with:
          fetch-depth: 2  # checkout fetches only one commit by default. Set it to two for the `norma` test
          ref: ${{ github.event.inputs.git-ref }}
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY_ACT }} # This forces checkout to use SSH, not HTTPS
          submodules: recursive
      - name: Set norma to the last commit to prepare for profiling
        if: ${{ matrix.competitor == 'norma' }}
        run: git checkout HEAD^ && cd .development && bash ./archnorma && cd ../ && git checkout -

      - name: Miscellaneous setup
        run: bash .github/scripts/misc_setup

      - name: Clone MatCUTEst
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY_ACT }} # This forces checkout to use SSH, not HTTPS
          repository: matcutest/matcutest_compiled
          path: matcutest

      - name: Set up gfortran on Linux
        if: startsWith(matrix.os, 'ubuntu')
        uses: fortran-lang/setup-fortran@main
        with:
          compiler: gcc
          version: ${{ env.GFORTRAN_VERSION }}
      - name: Check gfortran version on Linux
        if: startsWith(matrix.os, 'ubuntu')
        run: which gfortran && gfortran --version

      - name: Install epstopdf and ghostscript
        if: startsWith(matrix.os, 'ubuntu')
        run: bash .github/scripts/install_epstopdf && bash .github/scripts/install_ghostscript

      - name: Check MATLAB
        id: check_matlab
        run: if type 'matlab' &> /dev/null ; then echo "::set-output name=has_matlab::true" ; fi

      - name: Set up MATLAB
        if: ${{ steps.check_matlab.outputs.has_matlab != 'true' }}
        uses: matlab-actions/setup-matlab@v2.2.0
        with:
          release: ${{ matrix.matlab }}
          cache: true
          products: Parallel_Computing_Toolbox

      - name: Conduct the test
        uses: matlab-actions/run-command@v2.1.1
        with:
          command: |
            ver;
            root_dir = pwd();

            cd(fullfile(root_dir, 'matcutest')); install(); which macup
            cd(fullfile(root_dir, 'matlab/tests'));

            prof('${{ matrix.solver }}', '${{ matrix.dim }}', '${{ matrix.competitor }}');


            % Move the files to prepare for uploading artifacts

            movefile(fullfile(cd(), 'testdata', '*summary*.pdf'), '/tmp/${{ matrix.solver }}_profile_prima/');
            movefile(fullfile(cd(), 'testdata', '*.txt'), '/tmp/${{ matrix.solver }}_profile_prima/');

      - name: List problems that started but did not end
        # The solver got stuck when solving these problems. Investigate what happened.
        if: always()
        shell: bash
        run: |
          solver=${{ matrix.solver }}
          cd /tmp/${solver}_profile_prima/
          ls -R1 *${solver}*_start > ${solver}_prob_start
          ls -R1 *${solver}*_end > ${solver}_prob_end
          diff ${solver}_prob_start ${solver}_prob_end > ${solver}_stuck || :
          printf "\n\n>>>>>>>>>>>>>>>>\nProblems that started but did not end:\n\n"
          cat ${solver}_stuck
          printf "\n<<<<<<<<<<<<<<<<\n\n"

      - name: Store artifacts
        uses: actions/upload-artifact@v4.3.1
        if: always()  # Always run even if the workflow is canceled manually or due to overtime.
        with:
          name: artifact-${{ matrix.solver }}-${{ matrix.dim }}-${{ matrix.competitor }}
          path: |
            /tmp/${{ matrix.solver }}_profile_prima/*summary*.pdf
            /tmp/${{ matrix.solver }}_profile_prima/*.txt
            /tmp/${{ matrix.solver }}_profile_prima/*start*
            /tmp/${{ matrix.solver }}_profile_prima/*end*
            /tmp/${{ matrix.solver }}_profile_prima/*stuck*
            /tmp/${{ matrix.solver }}_profile_prima/fort.*

      - name: Remove the test data
        if: always()  # Always run even if the workflow is canceled manually or due to overtime.
        run: rm -rf ./matlab/tests/testdata && rm -rf /tmp/${{ matrix.solver }}_profile_prima


  merge_artifacts:
    continue-on-error: true  # As of 20240218, this action may fail if there are too many artifacts. We ignore the failure.
    if: always()
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: 00-merged-artifacts
          pattern: artifact-*-*
