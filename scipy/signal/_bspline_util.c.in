#include "Python.h"
#include <math.h>
#include <stddef.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

#include "_splinemodule.h"

#define NO_IMPORT_ARRAY
#include "numpy/arrayobject.h"

#ifndef M_PI
#define M_PI           3.14159265358979323846  /* pi */
#endif

#ifdef __GNUC__
#define CONJ(a) (~((__complex__ double)a))
#define ABSQ(a) (__real__ (a*CONJ(a)))
#else
#define CONJ(a) ((a))
#define ABSQ(a) ( (a*CONJ(a)))
#endif


{{py:

CNAME = ['C', 'Z']
CTYPE = ['__complex__ float', '__complex__ double']

RNAME = ['S', 'D']
RTYPE = ['float', 'double']

NAMES = CNAME + RNAME
TYPES = CTYPE + RTYPE
RTYPES = RTYPE + RTYPE

}}

{{for SUB, TYP in zip(RNAME, RTYPE)}}
// Approximate steady state conditions for the system cs / (1 - a2 * z^-1 - a3 * z^-2)
static {{TYP}} {{SUB}}_hc(int, {{TYP}}, double, double);
// Approximate steady state conditions for the system cs / (1 - a2 * z - a3 * z^2)
static {{TYP}} {{SUB}}_hs(int, {{TYP}}, double, double);
{{endfor}}


{{for SUB, TYP, RTYP in zip(NAMES, TYPES, RTYPES)}}
{{if SUB in CNAME}}
#ifdef __GNUC__
{{endif}}
int {{SUB}}_SYM_IIR1_initial({{TYP}} z1, {{TYP}} *x, {{TYP}} *yp0,
                             int M, int N, {{RTYP}} precision)
{
    {{TYP}} powz1, diff;
    {{RTYP}} err;
    int k;

    if (ABSQ(z1) >= 1.0) return -2; /* z1 not less than 1 */

   /* Fix starting value assuming mirror-symmetric boundary conditions. */
    for(int i = 0; i < M; i++) {
        yp0[i] = x[N * i];
    }

    powz1 = 1.0;
    k = 0;
    precision *= precision;
    do {
    	powz1 *= z1;
        for(int i = 0; i < M; i++) {
            yp0[i] += powz1 * x[N * i + k];
        }
    	diff = powz1;
    	err = ABSQ(diff);
    	k++;
    } while((err > precision) && (k < N));

    if (k >= N){
        /* sum did not converge */
        return -3;
    }

    return 0;
}
{{if SUB in CNAME}}
#endif
{{endif}}
{{endfor}}

/**
Compute the starting initial conditions for the system
cs / (1 - a2 * z^-1 - a3 * z^-2) against signals x, where:

a2 = 2 * r * cos(omega)
a3 = - r ** 2
cs = 1 - 2 * r * cos(omega) + r ** 2

Arguments
---------
x: double* or float*
    2D strided pointer signal of size (M, N). When M > 1, multiple signals
    will be processed independently.
yp: double* or float*
    Strided output state condition pointer of size (M, 2).
    yp[:, 0] will contain the initial conditions y[n - 1],
    whereas yp[:, 1] will contain the initial conditions y[n - 2].
M: int
    Number of signals to compute initial conditions for.
N: int
    Length of the signals.
precision: double* or float*
    Precision up to which the initial conditions will be computed.
**/
{{for SUB, TYP in zip(RNAME, RTYPE)}}
int {{SUB}}_SYM_IIR2_initial_fwd(double r, double omega,
        {{TYP}} *x, {{TYP}} *yp, int M, int N, {{TYP}} precision) {
    /* Fix starting values assuming mirror-symmetric boundary conditions. */
    {{TYP}} cs = 1 - 2 * r * cos(omega) + r * r;

    for(int i = 0; i < M; i++) {
        // Compute starting condition y[n - 1]
        yp[2 * i] = {{SUB}}_hc(0, cs, r, omega) * x[N * i];
    }

    int k = 0;
    precision *= precision;

    {{TYP}} err;
    {{TYP}} diff;

    do {
        diff = {{SUB}}_hc(k+1, cs, r, omega);
        for(int i = 0; i < M; i++) {
            // Keep computing starting condition y[n - 1]
            yp[2 * i] += diff * x[N * i + k];
        }
        err = diff * diff;
        k++;
    } while((err > precision) && (k < N));

    if (k >= N) {return -3;}     /* sum did not converge */

    for(int i = 0; i < M; i++) {
        // Compute starting condition y[n - 2]
        yp[2 * i + 1] = {{SUB}}_hc(0, cs, r, omega) * x[N * i + 1];
        yp[2 * i + 1] += {{SUB}}_hc(1, cs, r, omega) * x[N * i];
    }

    k = 0;
    do {
        diff = {{SUB}}_hc(k+2, cs, r, omega);
        for(int i = 0; i < M; i++) {
            // Keep computing starting condition y[n - 2]
            yp[2 * i + 1] += diff * x[N * i + k];
        }
        err = diff * diff;
        k++;
    } while((err > precision) && (k < N));

    if (k >= N) {return -3;}     /* sum did not converge */
    return 0;
}
{{endfor}}

/**
Compute the starting initial conditions for the system (ran in backwards)
cs / (1 - a2 * z - a3 * z^2) against signal x, where:

a2 = 2 * r * cos(omega)
a3 = - r ** 2
cs = 1 - 2 * r * cos(omega) + r ** 2

Arguments
---------
x: double* or float*
    2D strided pointer signal of size (M, N). When M > 1, multiple signals
    will be processed independently.
yp: double* or float*
    Output state condition pointer of size (M, 2), yp[:, 0] will contain the
    initial conditions y[n + 1], whereas yp[:, 1] will contain the initial
    condition y[n + 2].
M: int
    Number of signals to compute initial conditions for.
N: int
    Length of the signals.
precision: double* or float*
    Precision up to which the initial conditions will be computed.
**/
{{for SUB, TYP in zip(RNAME, RTYPE)}}
int {{SUB}}_SYM_IIR2_initial_bwd(double r, double omega,
        {{TYP}} *x, {{TYP}} *yp, int M, int N, {{TYP}} precision) {
    double rsq = r * r;
    {{TYP}} cs = 1 - 2 * r * cos(omega) + rsq;

    /* Fix starting values assuming mirror-symmetric boundary conditions. */
    int k = 0;

    {{TYP}} err;
    {{TYP}} diff;

    do {
	    diff = ({{SUB}}_hs(k, cs, rsq, omega) + {{SUB}}_hs(k+1, cs, rsq, omega));
	    for(int i = 0; i < M; i++) {
            // Compute initial condition y[n + 1]
            yp[2 * i] += diff * x[N * i + N - 1 - k];
        }
	    err = diff * diff;
	    k++;
    } while((err > precision) && (k < N));

    if (k >= N) {return -3;}     /* sum did not converge */

    k = 0;
    do {
        diff = ({{SUB}}_hs(k-1, cs, rsq, omega) + {{SUB}}_hs(k+2, cs, rsq, omega));
        for(int i = 0; i < M; i++) {
            // Compute initial condition y[n + 2]
            yp[2 * i + 1] += diff * x[N * i + N - 1 - k];
        }
        err = diff * diff;
        k++;
    } while((err > precision) && (k < N));

    if (k >= N) {return -3;}     /* sum did not converge */

    return 0;
}
{{endfor}}

/* h must be odd length */
/* strides in units of sizeof(DATA TYPE) bytes */

{{for SUB, TYP in zip(NAMES, TYPES)}}
{{if SUB in CNAME}}
#ifdef __GNUC__
{{endif}}
void {{SUB}}_FIR_mirror_symmetric({{TYP}} *in, {{TYP}} *out, int N,
                            {{TYP}} *h, int Nh, int instride, int outstride)
{
    int n, k;
    int Nhdiv2 = Nh >> 1;
    {{TYP}} *outptr;
    {{TYP}} *inptr;
    {{TYP}} *hptr;

    /* first part boundary conditions */
    outptr = out;
    for (n=0; n < Nhdiv2; n++) {
	*outptr = 0.0;
	hptr = h;
	inptr = in + (n + Nhdiv2)*instride;
	for (k=-Nhdiv2; k <= n; k++) {
	    *outptr += *hptr++ * *inptr;
	    inptr -= instride;
	}
	inptr += instride;
	for (k=n+1; k <= Nhdiv2; k++) {
	    *outptr += *hptr++ * *inptr;
	    inptr += instride;
	}
	outptr += outstride;
    }

    /* middle section */
    outptr = out + Nhdiv2*outstride;
    for (n=Nhdiv2; n < N-Nhdiv2; n++) {
	*outptr = 0.0;
	hptr = h;
	inptr = in + (n + Nhdiv2)*instride;
	for (k=-Nhdiv2; k <= Nhdiv2; k++) {
	    *outptr += *hptr++ * *inptr;
	    inptr -= instride;
	}
	outptr += outstride;
    }

    /* end boundary conditions */
    outptr = out + (N - Nhdiv2)*outstride;
    for (n=N-Nhdiv2; n < N; n++) {
	*outptr = 0.0;
	hptr = h;
	inptr = in + (2*N - 1 - n - Nhdiv2)*instride;
	for (k=-Nhdiv2; k <= n-N; k++) {
	    *outptr += *hptr++ * *inptr;
	    inptr += instride;
	}
	inptr -= instride;
	for (k=n+1-N; k <= Nhdiv2; k++) {
	    *outptr += *hptr++ * *inptr;
	    inptr -= instride;
	}
	outptr += outstride;
    }

}
{{if SUB in CNAME}}
#endif
{{endif}}
{{endfor}}

{{for SUB, TYP in zip(NAMES, TYPES)}}
{{if SUB in CNAME}}
#ifdef __GNUC__
{{endif}}
int {{SUB}}_separable_2Dconvolve_mirror({{TYP}} *in, {{TYP}} *out,
                              int M, int N, {{TYP}} *hr, {{TYP}} *hc,
                              int Nhr, int Nhc,
                              npy_intp *instrides, npy_intp *outstrides)
{
    int m, n;
    {{TYP}} *tmpmem;
    {{TYP}} *inptr=NULL, *outptr=NULL;

    tmpmem = malloc(M*N*sizeof({{TYP}}));
    if (tmpmem == NULL) return -1;

    if (Nhr > 0) {
	/* filter across rows */
	inptr = in;
	outptr = tmpmem;
	for (m = 0; m < M; m++) {
	    {{SUB}}_FIR_mirror_symmetric (inptr, outptr, N, hr, Nhr, instrides[1], 1);
	    inptr += instrides[0];
	    outptr += N;
	}
    }
    else
	memmove(tmpmem, in, M*N*sizeof({{TYP}}));

    if (Nhc > 0) {
	/* filter down columns */
	inptr = tmpmem;
	outptr = out;
	for (n = 0; n < N; n++) {
	    {{SUB}}_FIR_mirror_symmetric (inptr, outptr, M, hc, Nhc, N, outstrides[0]);
	    outptr += outstrides[1];
	    inptr += 1;
	}
    }
    else
	memmove(out, tmpmem, M*N*sizeof({{TYP}}));

    free(tmpmem);
    return 0;
}
{{if SUB in CNAME}}
#endif
{{endif}}
{{endfor}}

/**
Approximate the steady state of a two-pole filter in polar form for a
step input.
**/
{{for SUB, TYP in zip(RNAME, RTYPE)}}
{{TYP}} {{SUB}}_hc(int k, {{TYP}} cs, double r, double omega)
{
    if (k < 0) return 0.0;
    if (omega == 0.0)
	return cs * pow(r, (double )k) * (k+1);
    else if (omega == M_PI)
	return cs * pow(r, (double )k) * (k+1) * (1 - 2*(k % 2));
    return cs * pow(r, (double) k) * sin(omega * (k+1)) / sin(omega);
}
{{endfor}}


/**
Approximate the steady state of a two-pole filer in polar form ran in backwards
for a step input.
**/
{{for SUB, TYP in zip(RNAME, RTYPE)}}
{{TYP}} {{SUB}}_hs(int k, {{TYP}} cs, double rsq, double omega)
{
    {{TYP}} cssq;
    {{TYP}} c0;
    double gamma, rsupk;

    cssq = cs * cs;
    k = abs(k);
    rsupk = pow(rsq, ((double ) k) / 2.0);
    if (omega == 0.0) {
	c0 = (1+rsq)/ ((1-rsq)*(1-rsq)*(1-rsq)) * cssq;
	gamma = (1-rsq) / (1+rsq);
	return c0 * rsupk * (1 + gamma * k);
    }
    if (omega == M_PI) {
	c0 = (1+rsq)/ ((1-rsq)*(1-rsq)*(1-rsq)) * cssq;
	gamma = (1-rsq) / (1+rsq) * (1 - 2 * (k % 2));
	return c0 * rsupk * (1 + gamma * k);
    }
    c0 = cssq * (1.0+rsq)/(1.0-rsq) / (1-2*rsq*cos(2*omega) + rsq*rsq);
    gamma = (1.0 - rsq)/ (1.0+rsq) / tan(omega);
    return c0 * rsupk * (cos(omega*k) + gamma * sin(omega * k));
}

{{endfor}}
