from .utils import (
    fill_array_with_not_implemented,
    fill_linalg_with_not_implemented,
    fill_array_module_with_not_implemented
)
from scipy.sparse import csr_array

from .array_api_version import __array_api_version__
from .csr import *
from ..import linalg
from numpy import (
    e,
    pi,
    inf,
    nan,
    newaxis,
    iinfo,
    finfo,
    can_cast,
    result_type,
    abs,
    add,
    sin,
    arccos as acos,
    arccosh as acosh,
    arcsin as asin,
    arcsinh as asinh,
    arctan as atan,
    arctan2 as atan2,
    arctanh as atanh,
    ceil,
    conj,
    cos,
    cosh,
    divide,
    exp,
    expm1,
    imag,
    log,
    log1p,
    log2,
    log10,
    logaddexp,
    negative,
    positive,
    power as pow,
    real,
    remainder,
    round,
    sign,
    sinh,
    square,
    sqrt,
    tan,
    tanh,
    trunc,
    int8,
    int16,
    int32,
    int64,
    uint8,
    uint16,
    uint32,
    uint64,
    float32,
    float64,
    complex64,
    complex128,
    _bool as bool
)

# From numpy
__all__ = [
    "bool",
    "int8",
    "int16",
    "int32",
    "int64",
    "uint8",
    "uint16",
    "uint32",
    "uint64",
    "float32",
    "float64",
    "complex64",
    "complex128",
    "e",
    "pi",
    "inf",
    "nan",
    "newaxis",
    "iinfo",
    "finfo",
    "can_cast",
    "result_type",
    "abs",
    "add",
    "sin",
    "acos",
    "acosh",
    "asin",
    "asinh",
    "atan",
    "atan2",
    "atanh",
    "ceil",
    "conj",
    "cos",
    "cosh",
    "divide",
    "exp",
    "expm1",
    "imag",
    "log",
    "log1p",
    "log2",
    "log10",
    "logaddexp",
    "negative",
    "positive",
    "pow",
    "real",
    "remainder",
    "round",
    "sign",
    "sin",
    "sinh",
    "square",
    "sqrt",
    "tan",
    "tanh",
    "trunc",
]

# From scipy
__all__ += [
    "linalg"
]

# Implemented directly
__all__ += [
    "asarray",
    "empty",
    "empty_like",
    "eye",
    "full",
    "full_like",
    "ones",
    "ones_like",
    "zeros",
    "zeros_like",
    "arange",
    "linspace",
    "floor",
    "take",
    "any",
    "less",
    "less_equal",
    "greater",
    "greater_equal",
    "all",
    "isnan",
    "isfinite",
    "reshape",
    "isinf",
    "mean",
    "min",
    "max",
    "sum",
    "argmax",
    "argmin",
    "var",
    "unique_values",
    "unique_counts",
    "unique_all",
    "unique_inverse",
    "__array_api_version__",
    "logical_and",
    "logical_or",
    "logical_xor",
    "multiply",
    "subtract",
    "matmul",
    "not_equal",
    "bitwise_left_shift",
    "bitwise_right_shift",
    "bitwise_invert",
    "bitwise_or",
    "bitwise_or",
    "bitwise_and",
    "equal",
]

fill_array_with_not_implemented(csr_array)
fill_linalg_with_not_implemented()
fill_array_module_with_not_implemented(globals())
