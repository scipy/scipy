# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_coo', [dirname(__file__)])
        except ImportError:
            import _coo
            return _coo
        if fp is not None:
            try:
                _mod = imp.load_module('_coo', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _coo = swig_import_helper()
    del swig_import_helper
else:
    import _coo
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def coo_tocsr(*args):
  """
    coo_tocsr(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        npy_bool_wrapper const [] Ax, int [] Bp, int [] Bj, npy_bool_wrapper [] Bx)
    coo_tocsr(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        signed char const [] Ax, int [] Bp, int [] Bj, signed char [] Bx)
    coo_tocsr(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        unsigned char const [] Ax, int [] Bp, int [] Bj, unsigned char [] Bx)
    coo_tocsr(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        short const [] Ax, int [] Bp, int [] Bj, short [] Bx)
    coo_tocsr(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        unsigned short const [] Ax, int [] Bp, int [] Bj, unsigned short [] Bx)
    coo_tocsr(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        int const [] Ax, int [] Bp, int [] Bj, int [] Bx)
    coo_tocsr(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        unsigned int const [] Ax, int [] Bp, int [] Bj, unsigned int [] Bx)
    coo_tocsr(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        long long const [] Ax, int [] Bp, int [] Bj, long long [] Bx)
    coo_tocsr(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        unsigned long long const [] Ax, int [] Bp, int [] Bj, unsigned long long [] Bx)
    coo_tocsr(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        float const [] Ax, int [] Bp, int [] Bj, float [] Bx)
    coo_tocsr(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        double const [] Ax, int [] Bp, int [] Bj, double [] Bx)
    coo_tocsr(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        long double const [] Ax, int [] Bp, int [] Bj, long double [] Bx)
    coo_tocsr(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        npy_cfloat_wrapper const [] Ax, int [] Bp, int [] Bj, npy_cfloat_wrapper [] Bx)
    coo_tocsr(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        npy_cdouble_wrapper const [] Ax, int [] Bp, int [] Bj, npy_cdouble_wrapper [] Bx)
    coo_tocsr(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        npy_clongdouble_wrapper const [] Ax, int [] Bp, int [] Bj, npy_clongdouble_wrapper [] Bx)
    """
  return _coo.coo_tocsr(*args)

def coo_tocsc(*args):
  """
    coo_tocsc(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        npy_bool_wrapper const [] Ax, int [] Bp, int [] Bi, npy_bool_wrapper [] Bx)
    coo_tocsc(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        signed char const [] Ax, int [] Bp, int [] Bi, signed char [] Bx)
    coo_tocsc(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        unsigned char const [] Ax, int [] Bp, int [] Bi, unsigned char [] Bx)
    coo_tocsc(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        short const [] Ax, int [] Bp, int [] Bi, short [] Bx)
    coo_tocsc(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        unsigned short const [] Ax, int [] Bp, int [] Bi, unsigned short [] Bx)
    coo_tocsc(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        int const [] Ax, int [] Bp, int [] Bi, int [] Bx)
    coo_tocsc(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        unsigned int const [] Ax, int [] Bp, int [] Bi, unsigned int [] Bx)
    coo_tocsc(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        long long const [] Ax, int [] Bp, int [] Bi, long long [] Bx)
    coo_tocsc(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        unsigned long long const [] Ax, int [] Bp, int [] Bi, unsigned long long [] Bx)
    coo_tocsc(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        float const [] Ax, int [] Bp, int [] Bi, float [] Bx)
    coo_tocsc(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        double const [] Ax, int [] Bp, int [] Bi, double [] Bx)
    coo_tocsc(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        long double const [] Ax, int [] Bp, int [] Bi, long double [] Bx)
    coo_tocsc(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        npy_cfloat_wrapper const [] Ax, int [] Bp, int [] Bi, npy_cfloat_wrapper [] Bx)
    coo_tocsc(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        npy_cdouble_wrapper const [] Ax, int [] Bp, int [] Bi, npy_cdouble_wrapper [] Bx)
    coo_tocsc(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        npy_clongdouble_wrapper const [] Ax, int [] Bp, int [] Bi, npy_clongdouble_wrapper [] Bx)
    """
  return _coo.coo_tocsc(*args)

def coo_todense(*args):
  """
    coo_todense(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        npy_bool_wrapper const [] Ax, npy_bool_wrapper [] Bx, int fortran)
    coo_todense(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        signed char const [] Ax, signed char [] Bx, int fortran)
    coo_todense(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        unsigned char const [] Ax, unsigned char [] Bx, int fortran)
    coo_todense(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        short const [] Ax, short [] Bx, int fortran)
    coo_todense(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        unsigned short const [] Ax, unsigned short [] Bx, int fortran)
    coo_todense(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        int const [] Ax, int [] Bx, int fortran)
    coo_todense(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        unsigned int const [] Ax, unsigned int [] Bx, int fortran)
    coo_todense(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        long long const [] Ax, long long [] Bx, int fortran)
    coo_todense(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        unsigned long long const [] Ax, unsigned long long [] Bx, int fortran)
    coo_todense(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        float const [] Ax, float [] Bx, int fortran)
    coo_todense(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        double const [] Ax, double [] Bx, int fortran)
    coo_todense(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        long double const [] Ax, long double [] Bx, int fortran)
    coo_todense(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        npy_cfloat_wrapper const [] Ax, npy_cfloat_wrapper [] Bx, int fortran)
    coo_todense(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        npy_cdouble_wrapper const [] Ax, npy_cdouble_wrapper [] Bx, int fortran)
    coo_todense(int const n_row, int const n_col, int const nnz, int const [] Ai, int const [] Aj, 
        npy_clongdouble_wrapper const [] Ax, npy_clongdouble_wrapper [] Bx, int fortran)
    """
  return _coo.coo_todense(*args)

def coo_matvec(*args):
  """
    coo_matvec(int const nnz, int const [] Ai, int const [] Aj, npy_bool_wrapper const [] Ax, npy_bool_wrapper const [] Xx, 
        npy_bool_wrapper [] Yx)
    coo_matvec(int const nnz, int const [] Ai, int const [] Aj, signed char const [] Ax, signed char const [] Xx, 
        signed char [] Yx)
    coo_matvec(int const nnz, int const [] Ai, int const [] Aj, unsigned char const [] Ax, unsigned char const [] Xx, 
        unsigned char [] Yx)
    coo_matvec(int const nnz, int const [] Ai, int const [] Aj, short const [] Ax, short const [] Xx, 
        short [] Yx)
    coo_matvec(int const nnz, int const [] Ai, int const [] Aj, unsigned short const [] Ax, unsigned short const [] Xx, 
        unsigned short [] Yx)
    coo_matvec(int const nnz, int const [] Ai, int const [] Aj, int const [] Ax, int const [] Xx, 
        int [] Yx)
    coo_matvec(int const nnz, int const [] Ai, int const [] Aj, unsigned int const [] Ax, unsigned int const [] Xx, 
        unsigned int [] Yx)
    coo_matvec(int const nnz, int const [] Ai, int const [] Aj, long long const [] Ax, long long const [] Xx, 
        long long [] Yx)
    coo_matvec(int const nnz, int const [] Ai, int const [] Aj, unsigned long long const [] Ax, 
        unsigned long long const [] Xx, unsigned long long [] Yx)
    coo_matvec(int const nnz, int const [] Ai, int const [] Aj, float const [] Ax, float const [] Xx, 
        float [] Yx)
    coo_matvec(int const nnz, int const [] Ai, int const [] Aj, double const [] Ax, double const [] Xx, 
        double [] Yx)
    coo_matvec(int const nnz, int const [] Ai, int const [] Aj, long double const [] Ax, long double const [] Xx, 
        long double [] Yx)
    coo_matvec(int const nnz, int const [] Ai, int const [] Aj, npy_cfloat_wrapper const [] Ax, 
        npy_cfloat_wrapper const [] Xx, npy_cfloat_wrapper [] Yx)
    coo_matvec(int const nnz, int const [] Ai, int const [] Aj, npy_cdouble_wrapper const [] Ax, 
        npy_cdouble_wrapper const [] Xx, npy_cdouble_wrapper [] Yx)
    coo_matvec(int const nnz, int const [] Ai, int const [] Aj, npy_clongdouble_wrapper const [] Ax, 
        npy_clongdouble_wrapper const [] Xx, npy_clongdouble_wrapper [] Yx)
    """
  return _coo.coo_matvec(*args)

def coo_count_diagonals(*args):
  """coo_count_diagonals(int const nnz, int const [] Ai, int const [] Aj) -> int"""
  return _coo.coo_count_diagonals(*args)
# This file is compatible with both classic and new-style classes.


