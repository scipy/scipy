{
    "Normal": "\nNormal distribution with prescribed mean and standard deviation.\n\nThe probability density function of the normal distribution is:\n\n.. math::\n\n    f(x) = \\frac{1}{\\sigma \\sqrt{2 \\pi}} \\exp {\n        \\left( -\\frac{1}{2}\\left( \\frac{x - \\mu}{\\sigma} \\right)^2 \\right)}\n\nfor :math:`x` in (-\\infty, \\infty).\nThis class accepts one parameterization:\n`mu` for :math:`\\mu \\in (-\\infty, \\infty)`, `sigma` for :math:`\\sigma \\in (0, \\infty)`.\n\n\nParameters\n----------\ntol : positive float, optional\n    The desired relative tolerance of calculations. Left unspecified,\n    calculations may be faster; when provided, calculations may be\n    more likely to meet the desired accuracy.\nvalidation_policy : {None, \"skip_all\"}\n    Specifies the level of input validation to perform. Left unspecified,\n    input validation is performed to ensure appropriate behavior in edge\n    case (e.g. parameters out of domain, argument outside of distribution\n    support, etc.) and improve consistency of output dtype, shape, etc.\n    Pass ``'skip_all'`` to avoid the computational overhead of these\n    checks when rough edges are acceptable.\ncache_policy : {None, \"no_cache\"}\n    Specifies the extent to which intermediate results are cached. Left\n    unspecified, intermediate results of some calculations (e.g. distribution\n    support, moments, etc.) are cached to improve performance of future\n    calculations. Pass ``'no_cache'`` to reduce memory reserved by the class\n    instance.\n\nAttributes\n----------\nAll parameters are available as attributes.\n\nMethods\n-------\nsupport\nplot\nsample\nmoment\nmean\nmedian\nmode\nvariance\nstandard_deviation\nskewness\nkurtosis\npdf\nlogpdf\ncdf\nicdf\nccdf\niccdf\nlogcdf\nilogcdf\nlogccdf\nilogccdf\nentropy\nlogentropy\n\nNotes\n-----\nThe following abbreviations are used throughout the documentation.\n\n- PDF: probability density function\n- CDF: cumulative distribution function\n- CCDF: complementary CDF\n- entropy: differential entropy\n- log-*F*: logarithm of *F* (e.g. log-CDF)\n- inverse *F*: inverse function of *F* (e.g. inverse CDF)\n\nThe API documentation is written to describe the API, not to serve as\na statistical reference. Effort is made to be correct at the level\nrequired to use the functionality, not to be mathematically rigorous.\nFor example, continuity and differentiability may be implicitly assumed.\nFor precise mathematical definitions, consult your preferred mathematical\ntext.\n\nExamples\n--------\nTo use the distribution class, it must be instantiated using keyword\nparameters corresponding with one of the accepted parameterizations.\n\n>>> import numpy as np\n>>> import matplotlib.pyplot as plt\n>>> from scipy import stats\n>>> from scipy.stats import Normal\n>>> X = Normal(mu=-0.81, sigma=0.69)\n\nFor convenience, the ``plot`` method can be used to visualize the density\nand other functions of the distribution.\n\n>>> X.plot()\n>>> plt.show()\n\nThe support of the underlying distribution is available using the ``support``\nmethod.\n\n>>> X.support()\n(np.float64(-inf), np.float64(inf))\n\nThe numerical values of parameters associated with all parameterizations\nare available as attributes.\n\n>>> X.mu, X.sigma\n(np.float64(-0.81), np.float64(0.69))\n\nTo evaluate the probability density function of the underlying distribution\nat argument ``x=-1.13``:\n\n>>> x = -1.13\n>>> X.pdf(x)\n0.5192263911374636\n\nThe cumulative distribution function, its complement, and the logarithm\nof these functions are evaluated similarly.\n\n>>> np.allclose(np.exp(X.logccdf(x)), 1 - X.cdf(x))\nTrue\n\nThe inverse of these functions with respect to the argument ``x`` is also\navailable.\n\n>>> logp = np.log(1 - X.ccdf(x))\n>>> np.allclose(X.ilogcdf(logp), x)\nTrue\n\nNote that distribution functions and their logarithms also have two-argument\nversions for working with the probability mass between two arguments. The\nresult tends to be more accurate than the naive implementation because it avoids\nsubtractive cancellation.\n\n>>> y = -0.56\n>>> np.allclose(X.ccdf(x, y), 1 - (X.cdf(y) - X.cdf(x)))\nTrue\n\nThere are methods for computing measures of central tendency,\ndispersion, higher moments, and entropy.\n\n>>> X.mean(), X.median(), X.mode()\n(np.float64(-0.81), np.float64(-0.81), np.float64(-0.81))\n>>> X.variance(), X.standard_deviation()\n(np.float64(0.4760999999999999), np.float64(0.69))\n>>> X.skewness(), X.kurtosis()\n(np.float64(0.0), np.float64(3.0))\n>>> np.allclose(X.moment(order=6, kind='standardized'),\n...             X.moment(order=6, kind='central') / X.variance()**3)\nTrue\n>>> np.allclose(np.exp(X.logentropy()), X.entropy())\nTrue\n\nPseudo-random samples can be drawn from\nthe underlying distribution using ``sample``.\n\n>>> X.sample(shape=(4,))\narray([-1.55763675, -1.46907271, -0.06965848, -1.24340849])  # may vary\n\n"
}