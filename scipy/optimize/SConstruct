# Last Change: Sat Nov 24 07:00 PM 2007 J
# vim:syntax=python

import os
from os.path import join as pjoin, splitext
import glob

from numpy.distutils.misc_util import get_numpy_include_dirs
from numpy.distutils.scons import get_python_inc#, get_pythonlib_dir
from numpy.distutils.scons import GetNumpyEnvironment
from numpy.distutils.scons import CheckF77LAPACK

from numpy.distutils.scons.configuration import write_info

env = GetNumpyEnvironment(ARGUMENTS)
env.Append(CPPPATH = get_numpy_include_dirs())
env.Append(CPPPATH = env['F2PYINCLUDEDIR'])
#if os.name == 'nt':
#    # NT needs the pythonlib to run any code importing Python.h, including
#    # simple code using only typedef and so on, so we need it for configuration
#    # checks
#    env.AppendUnique(LIBPATH = [get_pythonlib_dir()])

#=======================
# Starting Configuration
#=======================
config = env.NumpyConfigure(custom_tests = {'CheckLAPACK' : CheckF77LAPACK})

#-----------------
# Checking Lapack
#-----------------
st = config.CheckLAPACK()
if not st:
    has_lapack = 0
else:
    has_lapack = 1

config.Finish()
write_info(env)

#==========
#  Build
#==========

# minpack lib
minpack_src = glob.glob(pjoin('minpack', '*.f'))
env.NumpyStaticExtLibrary('minpack', source = minpack_src)

# rootfind lib
rootfind_src = glob.glob(pjoin('Zeros', '*.c'))
env.NumpyStaticExtLibrary('rootfind', source = rootfind_src)

env.AppendUnique(LIBS = ['minpack', 'rootfind'])
env.AppendUnique(LIBPATH = env['build_dir'])

# _minpack pyextension
env.NumpyPythonExtension('_minpack', '_minpackmodule.c')

# _zeros pyextension
env.NumpyPythonExtension('_zeros', 'zeros.c')

# _lbfgsb pyextension
src = pjoin('lbfgsb', 'routines.f')
lbfgsb_src = env.F2py(pjoin(env['build_dir'], '_lbfgsbmodule.c'), 
                      pjoin(env['build_dir'], 'lbfgsb', 'lbfgsb.pyf'))
env.NumpyPythonExtension('_lbfgsb', source = [src] + lbfgsb_src)

# _cobyla pyextension
src = [pjoin('cobyla', i) for i in ['cobyla2.f', 'trstlp.f']]
wrap_src = env.F2py(pjoin(env['build_dir'], 'cobyla', '_cobylamodule.c'), 
                    pjoin(env['build_dir'], 'cobyla', 'cobyla.pyf'))
env.NumpyPythonExtension('_cobyla', source = src + wrap_src)

# _minpack2 pyextension
src = [pjoin('minpack2', i) for i in ['dcsrch.f', 'dcstep.f']]
wrap_src = env.F2py(pjoin(env['build_dir'], 'minpack2', 'minpack2module.c'), 
                    pjoin(env['build_dir'], 'minpack2', 'minpack2.pyf'))
env.NumpyPythonExtension('minpack2', source = src + wrap_src)

# moduleTNC pyextension
env.NumpyPythonExtension('moduleTNC', 
                         source = [pjoin('tnc', i) for i in \
                                                   ['moduleTNC.c', 'tnc.c']])
