# Last Change: Thu Jun 12 07:00 PM 2008 J
# vim:syntax=python
from os.path import join as pjoin
import warnings

from numpy.distutils.misc_util import get_numpy_include_dirs
from numscons import GetNumpyEnvironment, CheckF77Clib, CheckF77BLAS

env = GetNumpyEnvironment(ARGUMENTS)
env.Tool('f2py')

# Configuration
config = env.NumpyConfigure(custom_tests = {'CheckF77Clib' : CheckF77Clib,
                                            'CheckF77BLAS' : CheckF77BLAS})

if not config.CheckF77Clib():
    raise Exception("Could not check F77 runtime, needed for interpolate")
if not config.CheckF77BLAS():
    raise Exception("Could not find F77 BLAS, needed for integrate package")

config.Finish()

env.AppendUnique(CPPPATH = get_numpy_include_dirs())
env.AppendUnique(CPPPATH = env['F2PYINCLUDEDIR'])

# XXX: lapack integration

# Build linpack_lite
src = [str(s) for s in env.Glob(pjoin('linpack_lite', '*.f'))]
linpack_lite = env.DistutilsStaticExtLibrary('linpack_lite', source = src)

# Build mach
# XXX: do not use optimization flags for mach
src = [str(s) for s in env.Glob(pjoin('mach', '*.f'))]
mach = env.DistutilsStaticExtLibrary('mach', source = src)

# Build quadpack
src = [str(s) for s in env.Glob(pjoin('quadpack', '*.f'))]
quadpack = env.DistutilsStaticExtLibrary('quadpack', source = src)

# Build odepack
src = [str(s) for s in env.Glob(pjoin('odepack', '*.f'))]
odepack = env.DistutilsStaticExtLibrary('odepack', source = src)

env.AppendUnique(LIBPATH = '.')
env.AppendUnique(LINKFLAGSEND = env['F77_LDFLAGS'])

quadenv = env.Clone()
quadenv.Prepend(LIBS = ['quadpack', 'linpack_lite', 'mach'])

odenv = env.Clone()
odenv.Prepend(LIBS = ['odepack', 'linpack_lite', 'mach'])

# Build _quadpack
quadenv.DistutilsPythonExtension('_quadpack', source = '_quadpackmodule.c')

# Build _odepack
odenv.DistutilsPythonExtension('_odepack', source = '_odepackmodule.c')

# Build vode
odenv.DistutilsPythonExtension('vode', source = 'vode.pyf')
