import pytest
import numpy as np
from numpy.testing import assert_allclose, assert_equal
import scipy.special as sc


class TestHyperu:

    def test_negative_x(self):
        a, b, x = np.meshgrid(
            [-1, -0.5, 0, 0.5, 1],
            [-1, -0.5, 0, 0.5, 1],
            np.linspace(-100, -1, 10),
        )
        assert np.all(np.isnan(sc.hyperu(a, b, x)))

    def test_special_cases(self):
        assert sc.hyperu(0, 1, 1) == 1.0

    @pytest.mark.parametrize('a', [0.5, 1, np.nan])
    @pytest.mark.parametrize('b', [1, 2, np.nan])
    @pytest.mark.parametrize('x', [0.25, 3, np.nan])
    def test_nan_inputs(self, a, b, x):
        assert np.isnan(sc.hyperu(a, b, x)) == np.any(np.isnan([a, b, x]))

    @pytest.mark.parametrize(
        'a,b,x,expected',
        [(1e-15, 1.0, 1e-15, 1.0000000000000346),
         (-1e-15, 1.0, 1e-15, 0.9999999999999655),
         (1e-15, 1.0, 9.954054173515295e-13, 1.0000000000000275),
         (-1e-15, 1.0, 9.954054173515295e-13, 0.9999999999999724),
         (1e-15, 1.0, 9.908319448927685e-10, 1.0000000000000207),
         (-1e-15, 1.0, 9.908319448927685e-10, 0.9999999999999792),
         (1e-15, 1.0, 9.8627948563121e-07, 1.0000000000000138),
         (-1e-15, 1.0, 9.8627948563121e-07, 0.9999999999999861),
         (1e-15, 1.0, 0.0009817479430199864, 1.0000000000000069),
         (-1e-15, 1.0, 0.0009817479430199864, 0.9999999999999931),
         (1e-15, 1.0, 0.9772372209558107, 1.0),
         (-1e-15, 1.0, 0.9772372209558107, 1.0),
         (1e-15, 1.0, 0.5, 1.0000000000000007),
         (-1e-15, 1.0, 0.5, 0.9999999999999993),
         (1e-15, 1.0, 0.58, 1.0000000000000004),
         (-1e-15, 1.0, 0.58, 0.9999999999999994),
         (1e-15, 1.0, 0.66, 1.0000000000000004),
         (-1e-15, 1.0, 0.66, 0.9999999999999996),
         (1e-15, 1.0, 0.74, 1.0000000000000002),
         (-1e-15, 1.0, 0.74, 0.9999999999999997),
         (1e-15, 1.0, 0.8200000000000001, 1.0000000000000002),
         (-1e-15, 1.0, 0.8200000000000001, 0.9999999999999998),
         (1e-15, 1.0, 0.9, 1.0),
         (-1e-15, 1.0, 0.9, 0.9999999999999999),
         (9.954054173515295e-13, 1.0, 1e-15, 1.00000000003438),
         (-9.954054173515295e-13, 1.0, 1e-15, 0.99999999996562),
         (9.954054173515295e-13, 1.0, 9.954054173515295e-13, 1.0000000000275087),
         (-9.954054173515295e-13, 1.0, 9.954054173515295e-13, 0.9999999999724913),
         (9.954054173515295e-13, 1.0, 9.908319448927685e-10, 1.0000000000206373),
         (-9.954054173515295e-13, 1.0, 9.908319448927685e-10, 0.9999999999793627),
         (9.954054173515295e-13, 1.0, 9.8627948563121e-07, 1.0000000000137659),
         (-9.954054173515295e-13, 1.0, 9.8627948563121e-07, 0.9999999999862342),
         (9.954054173515295e-13, 1.0, 0.0009817479430199864, 1.0000000000068943),
         (-9.954054173515295e-13, 1.0, 0.0009817479430199864, 0.9999999999931056),
         (9.954054173515295e-13, 1.0, 0.9772372209558107, 1.0000000000000229),
         (-9.954054173515295e-13, 1.0, 0.9772372209558107, 0.9999999999999771),
         (9.954054173515295e-13, 1.0, 0.5, 1.00000000000069),
         (-9.954054173515295e-13, 1.0, 0.5, 0.99999999999931),
         (9.954054173515295e-13, 1.0, 0.58, 1.0000000000005422),
         (-9.954054173515295e-13, 1.0, 0.58, 0.9999999999994578),
         (9.954054173515295e-13, 1.0, 0.66, 1.0000000000004137),
         (-9.954054173515295e-13, 1.0, 0.66, 0.9999999999995864),
         (9.954054173515295e-13, 1.0, 0.74, 1.0000000000002998),
         (-9.954054173515295e-13, 1.0, 0.74, 0.9999999999997002),
         (9.954054173515295e-13, 1.0, 0.8200000000000001, 1.0000000000001976),
         (-9.954054173515295e-13, 1.0, 0.8200000000000001, 0.9999999999998025),
         (9.954054173515295e-13, 1.0, 0.9, 1.0000000000001048),
         (-9.954054173515295e-13, 1.0, 0.9, 0.9999999999998951),
         (9.908319448927685e-10, 1.0, 1e-15, 1.000000034222123),
         (-9.908319448927685e-10, 1.0, 1e-15, 0.999999965777877),
         (9.908319448927685e-10, 1.0, 9.954054173515295e-13, 1.0000000273822613),
         (-9.908319448927685e-10, 1.0, 9.954054173515295e-13, 0.9999999726177387),
         (9.908319448927685e-10, 1.0, 9.908319448927685e-10, 1.0000000205423998),
         (-9.908319448927685e-10, 1.0, 9.908319448927685e-10, 0.9999999794576003),
         (9.908319448927685e-10, 1.0, 9.8627948563121e-07, 1.000000013702538),
         (-9.908319448927685e-10, 1.0, 9.8627948563121e-07, 0.999999986297462),
         (9.908319448927685e-10, 1.0, 0.0009817479430199864, 1.0000000068626764),
         (-9.908319448927685e-10, 1.0, 0.0009817479430199864, 0.9999999931373236),
         (9.908319448927685e-10, 1.0, 0.9772372209558107, 1.0000000000228146),
         (-9.908319448927685e-10, 1.0, 0.9772372209558107, 0.9999999999771852),
         (9.908319448927685e-10, 1.0, 0.5, 1.0000000006867924),
         (-9.908319448927685e-10, 1.0, 0.5, 0.9999999993132076),
         (9.908319448927685e-10, 1.0, 0.58, 1.0000000005397331),
         (-9.908319448927685e-10, 1.0, 0.58, 0.999999999460267),
         (9.908319448927685e-10, 1.0, 0.66, 1.000000000411706),
         (-9.908319448927685e-10, 1.0, 0.66, 0.999999999588294),
         (9.908319448927685e-10, 1.0, 0.74, 1.0000000002983445),
         (-9.908319448927685e-10, 1.0, 0.74, 0.9999999997016554),
         (9.908319448927685e-10, 1.0, 0.8200000000000001, 1.0000000001966316),
         (-9.908319448927685e-10, 1.0, 0.8200000000000001, 0.9999999998033685),
         (9.908319448927685e-10, 1.0, 0.9, 1.0000000001043945),
         (-9.908319448927685e-10, 1.0, 0.9, 0.9999999998956054),
         (9.8627948563121e-07, 1.0, 1e-15, 1.0000340649034478),
         (-9.8627948563121e-07, 1.0, 1e-15, 0.9999659351302137),
         (9.8627948563121e-07, 1.0, 9.954054173515295e-13, 1.0000272564642334),
         (-9.8627948563121e-07, 1.0, 9.954054173515295e-13, 0.9999727435616762),
         (9.8627948563121e-07, 1.0, 9.908319448927685e-10, 1.0000204480250188),
         (-9.8627948563121e-07, 1.0, 9.908319448927685e-10, 0.9999795519931387),
         (9.8627948563121e-07, 1.0, 9.8627948563121e-07, 1.0000136395858041),
         (-9.8627948563121e-07, 1.0, 9.8627948563121e-07, 0.9999863604246013),
         (9.8627948563121e-07, 1.0, 0.0009817479430199864, 1.0000068311465977),
         (-9.8627948563121e-07, 1.0, 0.0009817479430199864, 0.9999931688560718),
         (9.8627948563121e-07, 1.0, 0.9772372209558107, 1.0000000227091863),
         (-9.8627948563121e-07, 1.0, 0.9772372209558107, 0.9999999772893375),
         (9.8627948563121e-07, 1.0, 0.5, 1.0000006836358466),
         (-9.8627948563121e-07, 1.0, 0.5, 0.9999993163621571),
         (9.8627948563121e-07, 1.0, 0.58, 1.0000005372522784),
         (-9.8627948563121e-07, 1.0, 0.58, 0.9999994627458016),
         (9.8627948563121e-07, 1.0, 0.66, 1.0000004098134403),
         (-9.8627948563121e-07, 1.0, 0.66, 0.9999995901847235),
         (9.8627948563121e-07, 1.0, 0.74, 1.0000002969729018),
         (-9.8627948563121e-07, 1.0, 0.74, 0.9999997030253498),
         (9.8627948563121e-07, 1.0, 0.8200000000000001, 1.0000001957272608),
         (-9.8627948563121e-07, 1.0, 0.8200000000000001, 0.9999998042710814),
         (9.8627948563121e-07, 1.0, 0.9, 1.0000001039141324),
         (-9.8627948563121e-07, 1.0, 0.9, 0.999999896084302),
         (0.0009817479430199864, 1.0, 1e-15, 1.0339250282922148),
         (-0.0009817479430199864, 1.0, 1e-15, 0.9661083246876301),
         (0.0009817479430199864, 1.0, 9.954054173515295e-13, 1.0271440386777444),
         (-0.0009817479430199864, 1.0, 9.954054173515295e-13, 0.9728816333440857),
         (0.0009817479430199864, 1.0, 9.908319448927685e-10, 1.0203630490632951),
         (-0.0009817479430199864, 1.0, 9.908319448927685e-10, 0.9796549420005626),
         (0.0009817479430199864, 1.0, 9.8627948563121e-07, 1.013582059463309),
         (-0.0009817479430199864, 1.0, 9.8627948563121e-07, 0.9864282506714891),
         (0.0009817479430199864, 1.0, 0.0009817479430199864, 1.0068010777393157),
         (-0.0009817479430199864, 1.0, 0.0009817479430199864, 0.9932015672125323),
         (0.0009817479430199864, 1.0, 0.9772372209558107, 1.0000218746099798),
         (-0.0009817479430199864, 1.0, 0.9772372209558107, 0.9999766627416112),
         (0.0009817479430199864, 1.0, 0.5, 1.0006795069608734),
         (-0.0009817479430199864, 1.0, 0.5, 0.999318515086418),
         (0.0009817479430199864, 1.0, 0.58, 1.0005338338591847),
         (-0.0009817479430199864, 1.0, 0.58, 0.9994642639240775),
         (0.0009817479430199864, 1.0, 0.66, 1.0004070219787016),
         (-0.0009817479430199864, 1.0, 0.66, 0.9995911586442047),
         (0.0009817479430199864, 1.0, 0.74, 1.0002947434772582),
         (-0.0009817479430199864, 1.0, 0.74, 0.9997035243152685),
         (0.0009817479430199864, 1.0, 0.8200000000000001, 1.000194007877457),
         (-0.0009817479430199864, 1.0, 0.8200000000000001, 0.9998043496601365),
         (0.0009817479430199864, 1.0, 0.9, 1.0001026621564573),
         (-0.0009817479430199864, 1.0, 0.9, 0.9998957865509998),
         (0.9772372209558107, 1.0, 1e-15, 33.54138146755254),
         (-0.9772372209558107, 1.0, 1e-15, -1.7309921833159452),
         (0.9772372209558107, 1.0, 9.954054173515295e-13, 26.731274305289283),
         (-0.9772372209558107, 1.0, 9.954054173515295e-13, -1.5754687792791189),
         (0.9772372209558107, 1.0, 9.908319448927685e-10, 19.92116716319439),
         (-0.9772372209558107, 1.0, 9.908319448927685e-10, -1.4199453738046346),
         (0.9772372209558107, 1.0, 9.8627948563121e-07, 13.111073546199362),
         (-0.9772372209558107, 1.0, 9.8627948563121e-07, -1.2644206868745786),
         (0.9772372209558107, 1.0, 0.0009817479430199864, 6.307925990380867),
         (-0.9772372209558107, 1.0, 0.0009817479430199864, -1.107769340610489),
         (0.9772372209558107, 1.0, 0.9772372209558107, 0.6178644442259246),
         (-0.9772372209558107, 1.0, 0.9772372209558107, 0.022458298120551348),
         (0.9772372209558107, 1.0, 0.5, 0.9351501414486935),
         (-0.9772372209558107, 1.0, 0.5, -0.4618759595583068),
         (0.9772372209558107, 1.0, 0.58, 0.8574721907618541),
         (-0.9772372209558107, 1.0, 0.58, -0.37935856292231207),
         (0.9772372209558107, 1.0, 0.66, 0.7932636534377382),
         (-0.9772372209558107, 1.0, 0.66, -0.2975146614096485),
         (0.9772372209558107, 1.0, 0.74, 0.7390824262853827),
         (-0.9772372209558107, 1.0, 0.74, -0.21621542333627888),
         (0.9772372209558107, 1.0, 0.8200000000000001, 0.6926089280418245),
         (-0.9772372209558107, 1.0, 0.8200000000000001, -0.1353691390228755),
         (0.9772372209558107, 1.0, 0.9, 0.652212942230524),
         (-0.9772372209558107, 1.0, 0.9, -0.05490785158944204),
         (0.5, 1.0, 1e-15, 19.94289164317054),
         (-0.5, 1.0, 1e-15, -9.407256238037505),
         (0.5, 1.0, 9.954054173515295e-13, 16.04820625812917),
         (-0.5, 1.0, 9.954054173515295e-13, -7.45991354550856),
         (0.5, 1.0, 9.908319448927685e-10, 12.153520879092884),
         (-0.5, 1.0, 9.908319448927685e-10, -5.512570849698129),
         (0.5, 1.0, 9.8627948563121e-07, 8.258839560784038),
         (-0.5, 1.0, 9.8627948563121e-07, -3.5652258458589094),
         (0.5, 1.0, 0.0009817479430199864, 4.366293173564883),
         (-0.5, 1.0, 0.0009817479430199864, -1.6165372496464037),
         (0.5, 1.0, 0.9772372209558107, 0.8677497311471885),
         (-0.5, 1.0, 0.9772372209558107, 0.7566408346380467),
         (0.5, 1.0, 0.5, 1.1167195397428042),
         (-0.5, 1.0, 0.5, 0.39943814871761907),
         (0.5, 1.0, 0.58, 1.0583204272531297),
         (-0.5, 1.0, 0.58, 0.4721036874200324),
         (0.5, 1.0, 0.66, 1.0089512096942281),
         (-0.5, 1.0, 0.66, 0.5381078366296247),
         (0.5, 1.0, 0.74, 0.9664114786397153),
         (-0.5, 1.0, 0.74, 0.5988650186003032),
         (0.5, 1.0, 0.8200000000000001, 0.9292007905576032),
         (-0.5, 1.0, 0.8200000000000001, 0.65536683117335),
         (0.5, 1.0, 0.9, 0.8962525828551248),
         (-0.5, 1.0, 0.9, 0.7083372400978094),
         (0.58, 1.0, 1e-15, 22.77250125930506),
         (-0.58, 1.0, 1e-15, -9.366929059218016),
         (0.58, 1.0, 9.954054173515295e-13, 18.28098315582528),
         (-0.58, 1.0, 9.954054173515295e-13, -7.469714209130512),
         (0.58, 1.0, 9.908319448927685e-10, 13.789465060351912),
         (-0.58, 1.0, 9.908319448927685e-10, -5.5724993552621935),
         (0.58, 1.0, 9.8627948563121e-07, 9.297952370328316),
         (-0.58, 1.0, 9.8627948563121e-07, -3.6752818210577964),
         (0.58, 1.0, 0.0009817479430199864, 4.809269049834963),
         (-0.58, 1.0, 0.0009817479430199864, -1.7764742547134196),
         (0.58, 1.0, 0.9772372209558107, 0.8291777446256987),
         (-0.58, 1.0, 0.9772372209558107, 0.6677073584345301),
         (0.58, 1.0, 0.5, 1.1003222184966914),
         (-0.58, 1.0, 0.5, 0.2623556184589986),
         (0.58, 1.0, 0.58, 1.0362232740143715),
         (-0.58, 1.0, 0.58, 0.34327348342757846),
         (0.58, 1.0, 0.66, 0.9822550650643523),
         (-0.58, 1.0, 0.66, 0.41746219318073846),
         (0.58, 1.0, 0.74, 0.9359277416998093),
         (-0.58, 1.0, 0.74, 0.48632958142684724),
         (0.58, 1.0, 0.8200000000000001, 0.8955469412634094),
         (-0.58, 1.0, 0.8200000000000001, 0.5508650444414903),
         (0.58, 1.0, 0.9, 0.8599106108954921),
         (-0.58, 1.0, 0.9, 0.6117926533861388),
         (0.66, 1.0, 1e-15, 25.416542915354142),
         (-0.66, 1.0, 1e-15, -8.786489259337205),
         (0.66, 1.0, 9.954054173515295e-13, 20.363599707585774),
         (-0.66, 1.0, 9.954054173515295e-13, -7.050286658170362),
         (0.66, 1.0, 9.908319448927685e-10, 15.310656510034677),
         (-0.66, 1.0, 9.908319448927685e-10, -5.314084052960647),
         (0.66, 1.0, 9.8627948563121e-07, 10.257720200231462),
         (-0.66, 1.0, 9.8627948563121e-07, -3.5778785513556133),
         (0.66, 1.0, 0.0009817479430199864, 5.208374036200848),
         (-0.66, 1.0, 0.0009817479430199864, -1.83991256096359),
         (0.66, 1.0, 0.9772372209558107, 0.7883598832899826),
         (-0.66, 1.0, 0.9772372209558107, 0.5640267881971333),
         (0.66, 1.0, 0.5, 1.0769730110938123),
         (-0.66, 1.0, 0.5, 0.11828678003305232),
         (0.66, 1.0, 0.58, 1.0082292019536123),
         (-0.66, 1.0, 0.58, 0.2053765755173916),
         (0.66, 1.0, 0.66, 0.9505771008187859),
         (-0.66, 1.0, 0.66, 0.2860740841310155),
         (0.66, 1.0, 0.74, 0.9012679671367579),
         (-0.66, 1.0, 0.74, 0.3616958511611604),
         (0.66, 1.0, 0.8200000000000001, 0.8584350192841725),
         (-0.66, 1.0, 0.8200000000000001, 0.43316942309593615),
         (0.66, 1.0, 0.9, 0.8207564416684939),
         (-0.66, 1.0, 0.9, 0.5011752462095138),
         (0.74, 1.0, 1e-15, 27.842753450865533),
         (-0.74, 1.0, 1e-15, -7.678727559608725),
         (0.74, 1.0, 9.954054173515295e-13, 22.27099726119174),
         (-0.74, 1.0, 9.954054173515295e-13, -6.210162418499257),
         (0.74, 1.0, 9.908319448927685e-10, 16.69924108411241),
         (-0.74, 1.0, 9.908319448927685e-10, -4.7415972734006155),
         (0.74, 1.0, 9.8627948563121e-07, 11.127493385264945),
         (-0.74, 1.0, 9.8627948563121e-07, -3.273029227130937),
         (0.74, 1.0, 0.0009817479430199864, 5.560147238295696),
         (-0.74, 1.0, 0.0009817479430199864, -1.8026380114202278),
         (0.74, 1.0, 0.9772372209558107, 0.7460465631600184),
         (-0.74, 1.0, 0.9772372209558107, 0.4460005582883686),
         (0.74, 1.0, 0.5, 1.0476823494474152),
         (-0.74, 1.0, 0.5, -0.030082924724866313),
         (0.74, 1.0, 0.58, 0.9753129452432692),
         (-0.74, 1.0, 0.58, 0.06064529693221547),
         (0.74, 1.0, 0.66, 0.9148508256663467),
         (-0.74, 1.0, 0.66, 0.145753855666554),
         (0.74, 1.0, 0.74, 0.8633212491194826),
         (-0.74, 1.0, 0.74, 0.2263809986943867),
         (0.74, 1.0, 0.8200000000000001, 0.8187079628241395),
         (-0.74, 1.0, 0.8200000000000001, 0.3033306909464118),
         (0.74, 1.0, 0.9, 0.7795860424311746),
         (-0.74, 1.0, 0.9, 0.3771941702467897),
         (0.8200000000000001, 1.0, 1e-15, 30.025741968807306),
         (-0.8200000000000001, 1.0, 1e-15, -6.077523174485454),
         (0.8200000000000001, 1.0, 9.954054173515295e-13, 23.983565743045162),
         (-0.8200000000000001, 1.0, 9.954054173515295e-13, -4.9744872581785105),
         (0.8200000000000001, 1.0, 9.908319448927685e-10, 17.94138953237488),
         (-0.8200000000000001, 1.0, 9.908319448927685e-10, -3.8714513383170663),
         (0.8200000000000001, 1.0, 9.8627948563121e-07, 11.899223467436277),
         (-0.8200000000000001, 1.0, 9.8627948563121e-07, -2.768412770573556),
         (0.8200000000000001, 1.0, 0.0009817479430199864, 5.8623046237161685),
         (-0.8200000000000001, 1.0, 0.0009817479430199864, -1.6636246325208675),
         (0.8200000000000001, 1.0, 0.9772372209558107, 0.7029040455884166),
         (-0.8200000000000001, 1.0, 0.9772372209558107, 0.3144814825281562),
         (0.8200000000000001, 1.0, 0.5, 1.0134265323396514),
         (-0.8200000000000001, 1.0, 0.5, -0.1795554197076357),
         (0.8200000000000001, 1.0, 0.58, 0.9383997849686094),
         (-0.8200000000000001, 1.0, 0.58, -0.0881622144128532),
         (0.8200000000000001, 1.0, 0.66, 0.8759487762722051),
         (-0.8200000000000001, 1.0, 0.66, -0.0011622928358594009),
         (0.8200000000000001, 1.0, 0.74, 0.8229070374576948),
         (-0.8200000000000001, 1.0, 0.74, 0.08231843058545515),
         (0.8200000000000001, 1.0, 0.8200000000000001, 0.7771325856840321),
         (-0.8200000000000001, 1.0, 0.8200000000000001, 0.1628989349096653),
         (0.8200000000000001, 1.0, 0.9, 0.7371145015844095),
         (-0.8200000000000001, 1.0, 0.9, 0.2410355606619742),
         (0.9, 1.0, 1e-15, 31.94680429914452),
         (-0.9, 1.0, 1e-15, -4.039234656880983),
         (0.9, 1.0, 9.954054173515295e-13, 25.48698332008925),
         (-0.9, 1.0, 9.954054173515295e-13, -3.3861805684486734),
         (0.9, 1.0, 9.908319448927685e-10, 19.027162358696064),
         (-0.9, 1.0, 9.908319448927685e-10, -2.7331264773232347),
         (0.9, 1.0, 9.8627948563121e-07, 12.567353255685154),
         (-0.9, 1.0, 9.8627948563121e-07, -2.0800702839623044),
         (0.9, 1.0, 0.0009817479430199864, 6.113654825812453),
         (-0.9, 1.0, 0.0009817479430199864, -1.4254973574406058),
         (0.9, 1.0, 0.9772372209558107, 0.6595155708941504),
         (-0.9, 1.0, 0.9772372209558107, 0.17083596201191248),
         (0.9, 1.0, 0.5, 0.9751339340488573),
         (-0.9, 1.0, 0.5, -0.3264331766672222),
         (0.9, 1.0, 0.58, 0.8983552702331209),
         (-0.9, 1.0, 0.58, -0.23775565109990696),
         (0.9, 1.0, 0.66, 0.8346752398345904),
         (-0.9, 1.0, 0.66, -0.15178982490589157),
         (0.9, 1.0, 0.74, 0.7807704451168263),
         (-0.9, 1.0, 0.74, -0.06800645724342134),
         (0.9, 1.0, 0.8200000000000001, 0.7343971234173323),
         (-0.9, 1.0, 0.8200000000000001, 0.013970219282855183),
         (0.9, 1.0, 0.9, 0.693975521027351),
         (-0.9, 1.0, 0.9, 0.09441794732140422)]
    )
    def test_gh_15650(self, a, b, x, expected):
        # See https://github.com/scipy/scipy/issues/15650
        # b == 1, |a| < 1, 0 < x < 1
        #
        # Reference values computed with mpmath
        #
        # import itertools as it
        # import numpy as np
        #
        # from mpmath import mp
        #
        # cases = []
        # for a, x in it.product(
        #         np.concat(
        #             [np.logspace(-15, -0.01, 6), np.linspace(0.5, 0.9, 6)]
        #         ),
        #         repeat=2,
        # ):
        #     with mp.workdps(100):
        #         cases.append((float(a), 1.0, float(x), float(mp.hyperu(a, 1.0, x))))
        #         cases.append((-float(a), 1.0, float(x), float(mp.hyperu(-a, 1.0, x))))
        assert_allclose(sc.hyperu(a, b, x), expected, rtol=1e-13)


class TestHyp1f1:

    @pytest.mark.parametrize('a, b, x', [
        (np.nan, 1, 1),
        (1, np.nan, 1),
        (1, 1, np.nan)
    ])
    def test_nan_inputs(self, a, b, x):
        assert np.isnan(sc.hyp1f1(a, b, x))

    def test_poles(self):
        assert_equal(sc.hyp1f1(1, [0, -1, -2, -3, -4], 0.5), np.inf)

    @pytest.mark.parametrize('a, b, x, result', [
        (-1, 1, 0.5, 0.5),
        (1, 1, 0.5, 1.6487212707001281468),
        (2, 1, 0.5, 2.4730819060501922203),
        (1, 2, 0.5, 1.2974425414002562937),
        (-10, 1, 0.5, -0.38937441413785204475)
    ])
    def test_special_cases(self, a, b, x, result):
        # Hit all the special case branches at the beginning of the
        # function. Desired answers computed using Mpmath.
        assert_allclose(sc.hyp1f1(a, b, x), result, atol=0, rtol=1e-15)

    @pytest.mark.parametrize('a, b, x, result', [
        (1, 1, 0.44, 1.5527072185113360455),
        (-1, 1, 0.44, 0.55999999999999999778),
        (100, 100, 0.89, 2.4351296512898745592),
        (-100, 100, 0.89, 0.40739062490768104667),
        (1.5, 100, 59.99, 3.8073513625965598107),
        (-1.5, 100, 59.99, 0.25099240047125826943)
    ])
    def test_geometric_convergence(self, a, b, x, result):
        # Test the region where we are relying on the ratio of
        #
        # (|a| + 1) * |x| / |b|
        #
        # being small. Desired answers computed using Mpmath
        assert_allclose(sc.hyp1f1(a, b, x), result, atol=0, rtol=1e-15)

    @pytest.mark.parametrize('a, b, x, result', [
        (-1, 1, 1.5, -0.5),
        (-10, 1, 1.5, 0.41801777430943080357),
        (-25, 1, 1.5, 0.25114491646037839809),
        (-50, 1, 1.5, -0.25683643975194756115),
        (-80, 1, 1.5, -0.24554329325751503601),
        (-150, 1, 1.5, -0.173364795515420454496),
    ])
    def test_a_negative_integer(self, a, b, x, result):
        # Desired answers computed using Mpmath.
        assert_allclose(sc.hyp1f1(a, b, x), result, atol=0, rtol=2e-14)

    @pytest.mark.parametrize('a, b, x, expected', [
        (0.01, 150, -4, 0.99973683897677527773),        # gh-3492
        (1, 5, 0.01, 1.0020033381011970966),            # gh-3593
        (50, 100, 0.01, 1.0050126452421463411),         # gh-3593
        (1, 0.3, -1e3, -7.011932249442947651455e-04),   # gh-14149
        (1, 0.3, -1e4, -7.001190321418937164734e-05),   # gh-14149
        (9, 8.5, -350, -5.224090831922378361082e-20),   # gh-17120
        (9, 8.5, -355, -4.595407159813368193322e-20),   # gh-17120
        (75, -123.5, 15, 3.425753920814889017493e+06),
    ])
    def test_assorted_cases(self, a, b, x, expected):
        # Expected values were computed with mpmath.hyp1f1(a, b, x).
        assert_allclose(sc.hyp1f1(a, b, x), expected, atol=0, rtol=1e-14)

    def test_a_neg_int_and_b_equal_x(self):
        # This is a case where the Boost wrapper will call hypergeometric_pFq
        # instead of hypergeometric_1F1.  When we use a version of Boost in
        # which https://github.com/boostorg/math/issues/833 is fixed, this
        # test case can probably be moved into test_assorted_cases.
        # The expected value was computed with mpmath.hyp1f1(a, b, x).
        a = -10.0
        b = 2.5
        x = 2.5
        expected = 0.0365323664364104338721
        computed = sc.hyp1f1(a, b, x)
        assert_allclose(computed, expected, atol=0, rtol=1e-13)

    @pytest.mark.parametrize('a, b, x, desired', [
        (-1, -2, 2, 2),
        (-1, -4, 10, 3.5),
        (-2, -2, 1, 2.5)
    ])
    def test_gh_11099(self, a, b, x, desired):
        # All desired results computed using Mpmath
        assert sc.hyp1f1(a, b, x) == desired

    @pytest.mark.parametrize('a', [-3, -2])
    def test_x_zero_a_and_b_neg_ints_and_a_ge_b(self, a):
        assert sc.hyp1f1(a, -3, 0) == 1

    # In the following tests with complex z, the reference values
    # were computed with mpmath.hyp1f1(a, b, z), and verified with
    # Wolfram Alpha Hypergeometric1F1(a, b, z), except for the
    # case a=0.1, b=1, z=7-24j, where Wolfram Alpha reported
    # "Standard computation time exceeded".  That reference value
    # was confirmed in an online Matlab session, with the commands
    #
    #  > format long
    #  > hypergeom(0.1, 1, 7-24i)
    #  ans =
    #   -3.712349651834209 + 4.554636556672912i
    #
    @pytest.mark.parametrize(
        'a, b, z, ref',
        [(-0.25, 0.5, 1+2j, 1.1814553180903435-1.2792130661292984j),
         (0.25, 0.5, 1+2j, 0.24636797405707597+1.293434354945675j),
         (25, 1.5, -2j, -516.1771262822523+407.04142751922024j),
         (12, -1.5, -10+20j, -5098507.422706547-1341962.8043508842j),
         pytest.param(
             10, 250, 10-15j, 1.1985998416598884-0.8613474402403436j,
             marks=pytest.mark.xfail,
         ),
         pytest.param(
             0.1, 1, 7-24j, -3.712349651834209+4.554636556672913j,
             marks=pytest.mark.xfail,
         )
         ],
    )
    def test_complex_z(self, a, b, z, ref):
        h = sc.hyp1f1(a, b, z)
        assert_allclose(h, ref, rtol=4e-15)

    # The "legacy edge cases" mentioned in the comments in the following
    # tests refers to the behavior of hyp1f1(a, b, x) when b is a nonpositive
    # integer.  In some subcases, the behavior of SciPy does not match that
    # of Boost (1.81+), mpmath and Mathematica (via Wolfram Alpha online).
    # If the handling of these edges cases is changed to agree with those
    # libraries, these test will have to be updated.

    @pytest.mark.parametrize('b', [0, -1, -5])
    def test_legacy_case1(self, b):
        # Test results of hyp1f1(0, n, x) for n <= 0.
        # This is a legacy edge case.
        # Boost (versions greater than 1.80), Mathematica (via Wolfram Alpha
        # online) and mpmath all return 1 in this case, but SciPy's hyp1f1
        # returns inf.
        assert_equal(sc.hyp1f1(0, b, [-1.5, 0, 1.5]), [np.inf, np.inf, np.inf])

    def test_legacy_case2(self):
        # This is a legacy edge case.
        # In software such as boost (1.81+), mpmath and Mathematica,
        # the value is 1.
        assert sc.hyp1f1(-4, -3, 0) == np.inf
