import numpy as np


class _MockFunction:
    def __init__(self, return_value=None):
        self.number_calls = 0
        self.return_value = return_value
        self.last_args = ([], {})

    def __call__(self, *args, **kwargs):
        self.number_calls += 1
        self.last_args = (args, kwargs)
        return self.return_value


method_names = [
    'agm',
    'ai_zeros',
    'airy',
    'airye',
    'assoc_laguerre',
    'bdtr',
    'bdtrc',
    'bdtri',
    'bdtrik',
    'bdtrin',
    'bei',
    'bei_zeros',
    'beip',
    'beip_zeros',
    'ber',
    'ber_zeros',
    'bernoulli',
    'berp',
    'berp_zeros',
    'besselpoly',
    'beta',
    'betainc',
    'betaincinv',
    'betaln',
    'bi_zeros',
    'binom',
    'boxcox',
    'boxcox1p',
    'btdtr',
    'btdtri',
    'btdtria',
    'btdtrib',
    'cbrt',
    'chdtr',
    'chdtrc',
    'chdtri',
    'chdtriv',
    'chebyc',
    'chebys',
    'chebyt',
    'chebyu',
    'chndtr',
    'chndtridf',
    'chndtrinc',
    'chndtrix',
    'clpmn',
    'comb',
    'cosdg',
    'cosm1',
    'cotdg',
    'dawsn',
    'digamma',
    'diric',
    'ellip_harm',
    'ellip_harm_2',
    'ellip_normal',
    'ellipe',
    'ellipeinc',
    'ellipj',
    'ellipk',
    'ellipkinc',
    'ellipkm1',
    'elliprc',
    'elliprd',
    'elliprf',
    'elliprg',
    'elliprj',
    'entr',
    'erf',
    'erf_zeros',
    'erfc',
    'erfcinv',
    'erfcx',
    'erfi',
    'erfinv',
    'euler',
    'eval_chebyc',
    'eval_chebys',
    'eval_chebyt',
    'eval_chebyu',
    'eval_gegenbauer',
    'eval_genlaguerre',
    'eval_hermite',
    'eval_hermitenorm',
    'eval_jacobi',
    'eval_laguerre',
    'eval_legendre',
    'eval_sh_chebyt',
    'eval_sh_chebyu',
    'eval_sh_jacobi',
    'eval_sh_legendre',
    'exp1',
    'exp10',
    'exp2',
    'expi',
    'expit',
    'expm1',
    'expn',
    'exprel',
    'factorial',
    'factorial2',
    'factorialk',
    'fdtr',
    'fdtrc',
    'fdtri',
    'fdtridfd',
    'fresnel',
    'fresnel_zeros',
    'fresnelc_zeros',
    'fresnels_zeros',
    'gamma',
    'gammainc',
    'gammaincc',
    'gammainccinv',
    'gammaincinv',
    'gammaln',
    'gammasgn',
    'gdtr',
    'gdtrc',
    'gdtria',
    'gdtrib',
    'gdtrix',
    'gegenbauer',
    'genlaguerre',
    'h1vp',
    'h2vp',
    'hankel1',
    'hankel1e',
    'hankel2',
    'hankel2e',
    'hermite',
    'hermitenorm',
    'huber',
    'hyp0f1',
    'hyp1f1',
    'hyp2f1',
    'hyperu',
    'i0',
    'i0e',
    'i1',
    'i1e',
    'inv_boxcox',
    'inv_boxcox1p',
    'it2i0k0',
    'it2j0y0',
    'it2struve0',
    'itairy',
    'iti0k0',
    'itj0y0',
    'itmodstruve0',
    'itstruve0',
    'iv',
    'ive',
    'ivp',
    'j0',
    'j1',
    'jacobi',
    'jn',
    'jn_zeros',
    'jnjnp_zeros',
    'jnp_zeros',
    'jnyn_zeros',
    'jv',
    'jve',
    'jvp',
    'k0',
    'k0e',
    'k1',
    'k1e',
    'kei',
    'kei_zeros',
    'keip',
    'keip_zeros',
    'kelvin',
    'kelvin_zeros',
    'ker',
    'ker_zeros',
    'kerp',
    'kerp_zeros',
    'kl_div',
    'kn',
    'kolmogi',
    'kolmogorov',
    'kv',
    'kve',
    'kvp',
    'laguerre',
    'lambertw',
    'legendre',
    'lmbda',
    'log1p',
    'log_expit',
    'log_ndtr',
    'log_softmax',
    'loggamma',
    'logit',
    'logsumexp',
    'lpmn',
    'lpmv',
    'lpn',
    'lqmn',
    'lqn',
    'mathieu_a',
    'mathieu_b',
    'mathieu_cem',
    'mathieu_even_coef',
    'mathieu_modcem1',
    'mathieu_modcem2',
    'mathieu_modsem1',
    'mathieu_modsem2',
    'mathieu_odd_coef',
    'mathieu_sem',
    'modfresnelm',
    'modfresnelp',
    'modstruve',
    'multigammaln',
    'nbdtr',
    'nbdtrc',
    'nbdtri',
    'nbdtrik',
    'nbdtrin',
    'ncfdtr',
    'ncfdtri',
    'ncfdtridfd',
    'ncfdtridfn',
    'ncfdtrinc',
    'nctdtr',
    'nctdtridf',
    'nctdtrinc',
    'nctdtrit',
    'ndtr',
    'ndtri',
    'ndtri_exp',
    'nrdtrimn',
    'nrdtrisd',
    'obl_ang1',
    'obl_ang1_cv',
    'obl_cv',
    'obl_cv_seq',
    'obl_rad1',
    'obl_rad1_cv',
    'obl_rad2',
    'obl_rad2_cv',
    'owens_t',
    'pbdn_seq',
    'pbdv',
    'pbdv_seq',
    'pbvv',
    'pbvv_seq',
    'pbwa',
    'pdtr',
    'pdtrc',
    'pdtri',
    'pdtrik',
    'perm',
    'poch',
    'polygamma',
    'pro_ang1',
    'pro_ang1_cv',
    'pro_cv',
    'pro_cv_seq',
    'pro_rad1',
    'pro_rad1_cv',
    'pro_rad2',
    'pro_rad2_cv',
    'pseudo_huber',
    'psi',
    'radian',
    'rel_entr',
    'rgamma',
    'riccati_jn',
    'riccati_yn',
    'roots_chebyc',
    'roots_chebys',
    'roots_chebyt',
    'roots_chebyu',
    'roots_gegenbauer',
    'roots_genlaguerre',
    'roots_hermite',
    'roots_hermitenorm',
    'roots_jacobi',
    'roots_laguerre',
    'roots_legendre',
    'roots_sh_chebyt',
    'roots_sh_chebyu',
    'roots_sh_jacobi',
    'roots_sh_legendre',
    'round',
    'sh_chebyt',
    'sh_chebyu',
    'sh_jacobi',
    'sh_legendre',
    'shichi',
    'sici',
    'sinc',
    'sindg',
    'smirnov',
    'smirnovi',
    'softmax',
    'spence',
    'sph_harm',
    'spherical_in',
    'spherical_jn',
    'spherical_kn',
    'spherical_yn',
    'stdtr',
    'stdtridf',
    'stdtrit',
    'struve',
    'tandg',
    'tklmbda',
    'voigt_profile',
    'wofz',
    'wright_bessel',
    'wrightomega',
    'xlog1py',
    'xlogy',
    'y0',
    'y0_zeros',
    'y1',
    'y1_zeros',
    'y1p_zeros',
    'yn',
    'yn_zeros',
    'ynp_zeros',
    'yv',
    'yve',
    'yvp',
    'zeta',
    'zetac',
]

for name in method_names:
    globals()[name] = _MockFunction(np.array([[0, 0], [1, 1]]))


__ua_domain__ = "numpy.scipy.special"


def __ua_function__(method, args, kwargs):
    fn = globals().get(method.__name__)
    return (fn(*args, **kwargs) if fn is not None else NotImplemented)
