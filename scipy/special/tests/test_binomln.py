import numpy as np
import pytest

from numpy.testing import assert_allclose, assert_equal
from scipy.special._ufuncs import _binomln


@pytest.mark.parametrize(
    # # Test cases generated for various signs and orders of magnitude of
    # # n and k using the following script:

    # import numpy as np

    # from mpmath import mp
    # from scipy.special._special_ufuncs import _binomln


    # def mp_binomln(n, k):
    #     with mp.workdps(400):
    #         result = float(mp.log(abs(mp.binomial(n, k))))
    #     return result


    # rng = np.random.default_rng(204054655279796806347416808029333184006)

    # cases = np.asarray([
    #     [rng.uniform(3, 10), rng.uniform(2, 3)],
    #     [rng.uniform(3, 10), rng.uniform(1, 10) * 1e-15],
    #     [rng.uniform(3, 10), rng.uniform(1, 10) * 1e-30],
    #     [rng.uniform(1, 10)*1e-10, rng.uniform(2, 3)],
    #     [rng.uniform(1, 10)*1e-10, rng.uniform(1, 10)*1e-8],
    #     [rng.uniform(1, 10) * 10, rng.uniform(1, 10)],
    #     [rng.uniform(1, 10) * 1e2, rng.uniform(1, 10) * 10],
    #     [rng.uniform(1, 10) * 1e2, rng.uniform(1, 10)],
    #     [rng.uniform(1, 10) * 1e3, rng.uniform(1, 10) * 1e-40],
    #     [rng.uniform(1, 10) * 1e3, rng.uniform(1, 10) * 100],
    #     [rng.uniform(1, 10) * 1e3, rng.uniform(1, 10) * 10],
    #     [rng.uniform(1, 10) * 1e3, rng.uniform(1, 10)],
    #     [rng.uniform(1, 10) * 1e3, rng.uniform(1, 10) * 1e-40],
    #     [rng.uniform(1, 10) * 1e6, rng.uniform(1, 10) * 1e5],
    #     [rng.uniform(1, 10) * 1e6, rng.uniform(1, 10) * 1e3],
    #     [rng.uniform(1, 10) * 1e6, rng.uniform(1, 10) * 10],
    #     [rng.uniform(1, 10) * 1e6, rng.uniform(1, 10) * 1e-20],
    # ])

    # cases = np.vstack(
    #     [
    #         cases,
    #         cases * np.asarray([[-1, 1]]),
    #         cases * np.asarray([[1, -1]]),
    #         cases * np.asarray([[-1, -1]]),
    #     ]
    # )

    # test_cases = []
    # for n, k in cases:
    #     desired = mp_binomln(n, k)
    #     actual = _binomln(n, k)
    #     relative_error = abs(observed_result - expected_result) / abs(expected_result)
    #     rtol = f"1e{int(max(-15, np.ceil(np.log10(relative_error))))}"
    #     test_cases.append([float(n), float(k), float(desired), float(rtol)])
    "n,k,desired,rtol",
    [[7.137061170317553, 2.797708667108254, 3.5574958858318966, 1e-15],
     [4.878954192760786, 6.739705042125718e-15, 1.5239424587606345e-14, 1e-15],
     [7.07597569563355, 2.526768562305524e-30, 6.57698041192323e-30, 1e-15],
     [7.602279283412468e-10, 2.216037722272854, -2.4060104216104747, 1e-15],
     [5.813483662713118e-10, 1.393880699784468e-08, -3.062654012303022e-16, 1e-08],
     [86.25869826519633, 8.836259498426676, 26.53680666135053, 1e-15],
     [984.3123490055298, 61.82952984125586, 228.01265693365877, 1e-14],
     [808.9576291157481, 1.8474260666551023, 11.81188336662364, 1e-13],
     [6466.455400846176, 1.3537314191814245e-40, 1.265965812530353e-39, 1e-15],
     [4887.645434292563, 876.1418640726932, 2294.2761471578774, 1e-15],
     [7717.368726153819, 27.90936650782426, 182.18813884049933, 1e-13],
     [7808.333060888427, 4.598271342966074, 37.09590705927176, 1e-12],
     [1423.6596987814496, 9.812190868322108e-40, 7.691337737413704e-39, 1e-15],
     [5760107.471833449, 156777.7392352095, 719626.1682216804, 1e-14],
     [8429174.01008469, 7280.047036117278, 58627.29505838816, 1e-12],
     [7845187.093923639, 44.096626084723184, 574.3678112783127, 1e-10],
     [2515042.102003092, 8.818294273049943e-20, 1.3505231757971056e-18, 1e-15],
     [-7.137061170317553, 2.797708667108254, 3.555801669394151, 1e-14],
     [-4.878954192760786, 6.739705042125718e-15, -3.911076799970226e-14, 1e-13],
     [-7.07597569563355, 2.526768562305524e-30, 3.8843501934368145e-29, 1e-15],
     [-7.602279283412468e-10, 2.216037722272854, -2.406010413968797, 1e-15],
     [-5.813483662713118e-10, 1.393880699784468e-08, -3.329241987532125e-16, 1e-08],
     [-86.25869826519633, 8.836259498426676, 26.43630627086285, 1e-14],
     [-984.3123490055298, 61.82952984125586, 231.17962850496795, 1e-14],
     [-808.9576291157481, 1.8474260666551023, 13.279714669172202, 1e-14],
     [-6466.455400846176, 1.3537314191814245e-40, 1.3259259066933097e-39, 1e-15],
     [-4887.645434292563, 876.1418640726932, 2451.6306243819417, 1e-14],
     [-7717.368726153819, 27.90936650782426, 182.107335691891, 1e-13],
     [-7808.333060888427, 4.598271342966074, 35.700847911730534, 1e-13],
     [-1423.6596987814496, 9.812190868322108e-40, 5.999776677844573e-39, 1e-15],
     [-5760107.471833449, 156777.7392352095, 723893.3396415903, 1e-13],
     [-8429174.01008469, 7280.047036117278, 58635.310717427754, 1e-12],
     [-7845187.093923639, 44.096626084723184, 575.0295816154234, 1e-10],
     [-2515042.102003092, 8.818294273049943e-20, 2.1852388571316004e-18, 1e-15],
     [7.137061170317553, -2.797708667108254, -7.300051961994057, 1e-15],
     [4.878954192760786, -6.739705042125718e-15, -1.5239424587606427e-14, 1e-15],
     [7.07597569563355, -2.526768562305524e-30, -6.57698041192323e-30, 1e-15],
     [7.602279283412468e-10, -2.216037722272854, -2.40601041899225, 1e-15],
     [5.813483662713118e-10, -1.393880699784468e-08, -3.3292419847034154e-16, 1e-08],
     [86.25869826519633, -8.836259498426676, -31.471154402726977, 1e-15],
     [984.3123490055298, -61.82952984125586, -237.83890122804246, 1e-14],
     [808.9576291157481, -1.8474260666551023, -14.348588808515844, 1e-13],
     [6466.455400846176, -1.3537314191814245e-40, -1.265965812530353e-39, 1e-15],
     [4887.645434292563, -876.1418640726932, -2460.9277205651647, 1e-14],
     [7717.368726153819, -27.90936650782426, -188.03250765991507, 1e-13],
     [7808.333060888427, -4.598271342966074, -39.81745861971589, 1e-12],
     [1423.6596987814496, -9.812190868322108e-40, -7.691337737413704e-39, 1e-15],
     [5760107.471833449, -156777.7392352095, -723907.2689922529, 1e-13],
     [8429174.01008469, -7280.047036117278, -58645.53601031713, 1e-12],
     [7845187.093923639, -44.096626084723184, -580.5067545023265, 1e-10],
     [2515042.102003092, -8.818294273049943e-20, -1.3505231757971056e-18, 1e-15],
     [-7.137061170317553, -2.797708667108254, -5.014478372236406, 1e-15],
     [-4.878954192760786, -6.739705042125718e-15, 3.911076799969894e-14, 1e-13],
     [-7.07597569563355, -2.526768562305524e-30, -3.8843501934368145e-29, 1e-15],
     [-7.602279283412468e-10, -2.216037722272854, -2.4060104165870215, 1e-15],
     [-5.813483662713118e-10, -1.393880699784468e-08, -3.0626540149052234e-16, 1e-08],
     [-86.25869826519633, -8.836259498426676, -30.171570725105095, 1e-15],
     [-984.3123490055298, -61.82952984125586, -233.70620564656514, 1e-14],
     [-808.9576291157481, -1.8474260666551023, -13.403325767237579, 1e-13],
     [-6466.455400846176, -1.3537314191814245e-40, -1.3259259066933097e-39, 1e-15],
     [-4887.645434292563, -876.1418640726932, -2302.7321823620264, 1e-14],
     [-7717.368726153819, -27.90936650782426, -187.84856479867113, 1e-12],
     [-7808.333060888427, -4.598271342966074, -39.97082867770005, 1e-12],
     [-1423.6596987814496, -9.812190868322108e-40, -5.999776677844573e-39, 1e-15],
     [-5760107.471833449, -156777.7392352095, -719639.8526842406, 1e-13],
     [-8429174.01008469, -7280.047036117278, -58637.95106230623, 1e-12],
     [-7845187.093923639, -44.096626084723184, -584.0402844062828, 1e-09],
     [-2515042.102003092, -8.818294273049943e-20, -2.1852388571316004e-18, 1e-15]]
)
def test_binomln(n, k, desired, rtol):
    actual = _binomln(n, k)
    assert_allclose(actual, desired, rtol=rtol)


@pytest.mark.parametrize(
    # binomln(n, k) = log(|gamma(n+2)|) - log(n+1)
    #               - log(|gamma(k+1)|) - log(|gamma(n-k+1)|)
    "n,k,desired",
    [[-1.0, 1.5, np.inf],
     [-3.0, 1.5, np.inf],
     [-1.0, -2.0, np.nan],
     [-3.0, -2.0, np.nan],
     [-1.0, 10.0, np.nan],
     [1.5, -2.0, -np.inf],
     [1.0, 10.0, -np.inf],
    ]
)
def test_binomln_poles(n, k, desired):
    actual = _binomln(n, k)
    assert_equal(actual, desired)
