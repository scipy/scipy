# Last Change: Thu Jun 12 07:00 PM 2008 J
# vim:syntax=python
from os.path import join as pjoin, basename as pbasename
import sys

from distutils.sysconfig import get_python_inc

from numpy.distutils.misc_util import get_numpy_include_dirs
from numscons import GetNumpyEnvironment
from numscons import CheckF77Clib

env = GetNumpyEnvironment(ARGUMENTS)

env.Tool('f2py')

env.AppendUnique(CPPPATH = [get_python_inc(), get_numpy_include_dirs()])
env.AppendUnique(CPPPATH = env['F2PYINCLUDEDIR'])

if sys.platform=='win32':
#        define_macros.append(('NOINFINITIES',None))
#        define_macros.append(('NONANS',None))
    env.AppendUnique(CPPDEFINES = '_USE_MATH_DEFINES')

config = env.NumpyConfigure(custom_tests = {'CheckF77Clib' : CheckF77Clib})
if not config.CheckF77Clib():
    raise RuntimeError("Could not get C/F77 runtime information")
config.Finish()

def build_lib(name, ext, libname = None):
    """ext should be .f or .c"""
    if not libname:
        libname = name
    src = env.Glob(pjoin(name, '*%s' % ext))
    assert len(src) > 0
    env.DistutilsStaticExtLibrary(libname, source = src)

# C libraries
build_lib('c_misc', '.c')
build_lib('cephes', '.c')

# F libraries
# XXX: handle no opt flags for mach
build_lib('mach', '.f')
build_lib('toms', '.f')
build_lib('amos', '.f')
build_lib('cdflib', '.f', 'cdf')
build_lib('specfun', '.f', 'specfunlib')

env.AppendUnique(LIBPATH = ['.'])

# Cephes extension
src = ['_cephesmodule.c', 'amos_wrappers.c', 'specfun_wrappers.c', \
       'toms_wrappers.c','cdf_wrappers.c','ufunc_extras.c']

env.DistutilsPythonExtension('_cephes', 
                         source = src, 
                         LIBS = ['amos', 'toms', 'c_misc', 'cephes', 'mach',\
                                 'cdf', 'specfunlib'], 
                         LINKFLAGSEND = env['F77_LDFLAGS'])

# Specfun extension
env.Prepend(LIBS = ['specfunlib'])
env.DistutilsPythonExtension('specfun', source = 'specfun.pyf',
                         F2PYOPTIONS = ["--no-wrap-functions"],
                         LINKFLAGSEND = env['F77_LDFLAGS'])
