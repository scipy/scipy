TODO
This list contains a number of things which need fixing and/or
improvement.  There's also a small explanatory
note with ideas.  More info is often contained in FIXMEs
at appropriate places in the code.

Note that I don't include much about docstrings, documentation, or
comments here.  Improvement of those, esp as other stuff evolves,
is a given.


************ API and/or MAJOR ISSUES ***********

**possibly allow interp2d to return a 2d array?  Like in the case that
    x and y are 2d arrays in meshgrid format.
    
**allow y to be 2-dimensional?
    It is not decided whether this feature should be supported, but
    I don't think it should; I think there should be another class with
    that functionality which wraps Interpolate1d.  The main reasons
    are:
    1) interpolation should probably be along columns, so the user
    can enter data as enter the data as y=array([obs1, obs2, ...]).  But
    the interpolate_wrapper and fitpack_wrapper interpolate along
    rows; this means there would be messy transposes in the code.
    2) FITPACK doesn't support 2D y arrays, which means we would
    have to store the y columns separately
    3) If we remove bad data, bearing in mind (2), we would also
    have to store copies of x, since the bad data in the y cols aren't
    at the same locations, meaning that different data points should be
    deleted for each column.

**better handling of variable types
    Currently only 1D interpolation deals with both float32
    and float64 data.
    
**include spline pre-filtering in ND interpolation,
    or understand why we don't need to do that.
    
    It appears that higher-order splines also smooth the data
    increasingly.  Yes, I checked and they definitely don't
    reproduce perfectly the input; they flatten stuff.
    
    The pre-filtering definitely improves the output by a whole lot;
    I suspect it returns some sort of transform of the data.  But I
    really wish I knew what it did; why didn't this guy document his
    code better than he did??

**README file that describes the architecture of the
    package and also includes license information.

**figure out NumPy stuff with vectorize.
    In function Interpolate1d.__call__
    It would be nice to remove the hack I used.
    I believe vectorize is supposed to handle arrays of
    length 0, but it's not working on my computer.

**allow newx to be in non-sorted order for 1D
    This requires rethinking the partition of newx into
    low, high and kind
    
    The main hurdle is that I can only really fill and array
    using result[mask] = partial_result if I can guarantee
    that everything will have the same type.  Maybe it is
    worth compromising the generality of the function to
    allow that.
    
********* LONGER TERM ************

**allow for scattered ND data
    A Delaunay triangulation may be a good way to do this. I
    would really like to code it up, but that may be a bit preliminary.
    
**rethink extension packages and capabilities
    Under-the-hood machinery currently comes from _interpolate.cpp
    (used in enthought.interpolate), FITPACK (Fortran, used in 
    scipy.interpolate) and ndimage.  This isn't necessarily the best.  
    Other code is used in scipy.signal.  There is surely other
    code out there too.  Figure out what is best and incorporate it.

    Currently, 1D and 2D both mostly wrap FITPACK through the Spline
    and Spline2d classes, and ND wraps ndimage.

**high-level road map
    when the module is more established, there should be a page on
    the wiki which describes the big-picture of the module; what
    the capabilities are and which should be added, large-scale
    architecture of the module, etc.

    It might note which underlying C/Fortran modules can or should
    be modified or merged.  It would be great if either 1) there were
    only 1 extension module, or 2) the modules showed natural
    differentiation of functionality (one for splines, one for simple
    operations, etc), rather than being a holdover of where they
    were stolen from.
