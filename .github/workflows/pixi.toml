[workspace]
name = "scipy-ci"
description = "Environment and task management for SciPy CI"
authors = ["SciPy Developers <scipy-dev@python.org>"]
channels = ["https://prefix.dev/conda-forge"]
platforms = ["linux-64", "osx-arm64", "win-64"]


### Environments ###
# We include one build task (and a corresponding environment) per solve group

[environments.build]
# tasks: build
features = ["build-deps", "build-task"]
solve-group = "default"

[environments.test]
# tasks: test
features = ["run-deps", "test-deps", "test-task"]
solve-group = "default"

[environments.ipython]
# tasks: ipython
features = ["run-deps", "test-deps", "ipython"]
solve-group = "default"

[environments.build-debug]
# tasks: build-debug
features = ["build-deps", "build-debug"]
solve-group = "debug"

[environments.lldb]
# tasks: lldb
features = ["run-deps", "test-deps", "lldb"]
solve-group = "debug"

[environments.gdb]
# tasks: gdb
features = ["run-deps", "test-deps", "gdb"]
solve-group = "debug"

[environments.lint]
# tasks: lint, check-python-h
features = ["lint"]

# TODO(lucascolley): merge the `default` and `array-api-cpu` solve groups,
# and create a non-default solve group with minimal dependencies
# to more reliably test the very latest versions of core dependencies
[environments.build-cpu]
# tasks: build-cpu
features = ["build-deps", "build-cpu"]
solve-group = "array-api-cpu"

[environments.array-api-strict]
# tasks: test-strict
features = ["run-deps", "test-deps", "array_api_strict", "array_api_strict-tasks"]
solve-group = "array-api-cpu"

[environments.dask-cpu]
# tasks: test-dask
features = ["run-deps", "test-deps", "dask", "dask-tasks"]
solve-group = "array-api-cpu"

[environments.jax-cpu]
# tasks: test-jax
features = ["run-deps", "test-deps", "mkl", "jax-cpu", "jax-cpu-tasks"]
solve-group = "array-api-cpu"

[environments.torch-cpu]
# tasks: test-torch, test-torch-float32
features = ["run-deps", "test-deps", "mkl", "torch-cpu", "torch-cpu-tasks"]
solve-group = "array-api-cpu"

[environments.array-api-cpu]
# tasks: test-cpu
features = ["run-deps", "test-deps", "test-cpu", "mkl", "array_api_strict", "dask", "jax-cpu", "marray", "torch-cpu"]
solve-group = "array-api-cpu"

[environments.build-cuda]
# tasks: build-cuda
# note: py-cuda feature aims to ensure compatibility with both cuda12 and cuda13 solve groups
features = ["build-deps", "build-cuda", "py-cuda"]

[environments.cupy]
# tasks: test-cupy
features = ["run-deps", "test-deps", "cuda13", "py-cuda", "cupy"]
solve-group = "cuda13"

[environments.jax-cuda]
# tasks: test-jax-cuda
features = ["run-deps", "test-deps", "cuda12", "py-cuda", "mkl", "jax-cuda"]
solve-group = "cuda12"

[environments.torch-cuda]
# tasks: test-torch-cuda
features = ["run-deps", "test-deps", "cuda12", "py-cuda", "mkl", "torch-cuda"]
solve-group = "cuda12"

[environments.build-accelerate-lp64]
# tasks: build-accelerate-lp64
features = ["build-deps", "accelerate", "build-accelerate-lp64"]
solve-group = "accelerate-lp64"

[environments.accelerate-lp64]
# tasks: test-accelerate-lp64
features = ["run-deps", "test-deps", "accelerate", "accelerate-lp64"]
solve-group = "accelerate-lp64"

[environments.build-accelerate-ilp64]
# tasks: build-accelerate-ilp64
features = ["build-deps", "accelerate", "build-accelerate-ilp64"]
solve-group = "accelerate-ilp64"

[environments.accelerate-ilp64]
# tasks: test-accelerate-ilp64
features = ["run-deps", "test-deps", "accelerate", "accelerate-ilp64"]
solve-group = "accelerate-ilp64"

[environments.py311-system-libs-osx]
# tasks: build-system-libs, test-system-libs
features = ["build-deps", "run-deps", "test-deps", "py311", "umfpack", "scikit-sparse", "system-libs"]

[environments.scipy-openblas]
# tasks: build-scipy-openblas, test-scipy-openblas
features = ["build-deps", "run-deps", "test-deps", "scipy-openblas"]


### Default dependencies (included in all environments) ###

[dependencies]
spin = "*"
python = "*"


### Default run dependencies (for environments which run SciPy itself) ###

[feature.run-deps.dependencies]
numpy = "*"
blas-devel = "*"


### Default building ###

[feature.build-deps.dependencies]
compilers = "*"
ccache = "*"
pkg-config = "*"
ninja = "*"
meson = "*"
meson-python = "*"
cython = "*"
pythran = "*"
pybind11 = "*"
# needed at build-time as well as run-time
numpy = "*"
blas-devel = "*"

# XXX: when updating this task, remember to update other build tasks if appropriate
[feature.build-task.tasks.build]
cmd = "spin build --setup-args=-Dblas=blas --setup-args=-Dlapack=lapack --setup-args=-Duse-g77-abi=true"
cwd = "../.."
env = { CC = "ccache $CC", CXX = "ccache $CXX", FC = "ccache $FC" }
description = "Build SciPy (default settings)"

[feature.build-task.target.win-64.tasks.build]
cmd = "spin build --setup-args=-Dblas=openblas --setup-args=-Dlapack=openblas --setup-args=-Duse-g77-abi=true && cp .github/workflows/.pixi/envs/build/Library/bin/openblas.dll build-install/Lib/site-packages/scipy/linalg/openblas.dll"
cwd = "../.."
env = { CC = "ccache clang-cl", CXX = "ccache clang-cl", FC = "ccache $FC", FC_LD = "lld-link" }
description = "Build SciPy (default settings)"


### Default testing ###

[feature.test-deps.dependencies]
pytest = "*"
hypothesis = "*"
pytest-timeout = "*"
pytest-xdist = "*"
threadpoolctl = "*"
pooch = "*"
mpmath = "*"
gmpy2 = "*"

# XXX: when updating this task, remember to update other test tasks if appropriate
[feature.test-task.tasks.test]
cmd = "spin test --no-build"
cwd = "../.."
depends-on = "build"
description = "Test SciPy (default settings)"


### IPython ###

[feature.ipython.dependencies]
ipython = "*"

[feature.ipython.tasks.ipython]
cmd = "spin ipython --no-build"
cwd = "../.."
depends-on = "build"
description = "Launch IPython"


### Debugging ###

[feature.build-debug]
platforms = ["linux-64", "osx-arm64"]

[feature.build-debug.tasks.build-debug]
# `-Dc_args='-O0'` needed to override `-O2` from clang activation `CFLAGS`
cmd = "spin build --build-dir=build-debug --setup-args=-Dc_args='-O0' --setup-args=-Dbuildtype=debug --setup-args=-Dblas=blas --setup-args=-Dlapack=lapack --setup-args=-Duse-g77-abi=true"
cwd = "../.."
description = "Build SciPy with debug buildtype"


[feature.lldb]
platforms = ["osx-arm64"]

[feature.lldb.dependencies]
lldb = "*"

[feature.lldb.tasks.lldb]
cmd = "spin lldb --build-dir=build-debug --no-build"
cwd = "../.."
depends-on = "build-debug"
description = "Debug with lldb"


[feature.gdb]
platforms = ["linux-64"]

[feature.gdb.dependencies]
gdb = "*"

[feature.gdb.tasks.gdb]
cmd = "spin gdb --build-dir=build-debug --no-build"
cwd = "../.."
depends-on = "build-debug"
description = "Debug with gdb"


### Linting ###

[feature.lint]
platforms = ["linux-64", "osx-arm64", "win-64"]

[feature.lint.dependencies]
ruff = "*"
cython-lint = "*"
packaging = "*"

[feature.lint.tasks.lint]
cmd = "spin lint"
cwd = "../.."
description = "Run main lint checks"

[feature.lint.tasks.check-python-h]
cmd = "python check_python_h_first.py"
cwd = "../../tools"
description = "Check that `Python.h` is included before any stdlib headers"


### BLAS/LAPACK features ###

[feature.mkl.target.linux-64.dependencies]
libblas = { version = "*", build = "*mkl" }
mkl = "*"

[feature.mkl.tasks.build-mkl]
cmd = "spin build --build-dir=build-mkl --setup-args=-Dblas=mkl-dynamic-ilp64-seq --setup-args=-Duse-g77-abi=true"
cwd = "scipy"
env = { CC = "ccache $CC", CXX = "ccache $CXX", FC = "ccache $FC" }
description = "Build with MKL BLAS"


[feature.accelerate]
platforms = ["osx-arm64"]

[feature.accelerate.dependencies]
libblas = { version = "*", build = "*accelerate" }

[feature.build-accelerate-lp64.tasks.build-accelerate-lp64]
cmd = "spin build --build-dir=build-accelerate-lp64 --with-accelerate"
cwd = "../.."
env = { CC = "ccache $CC", CXX = "ccache $CXX", FC = "ccache $FC" }
description = "Build SciPy with accelerate (lp64)"

[feature.accelerate-lp64.tasks.test-accelerate-lp64]
cmd = "spin test --no-build --build-dir=build-accelerate-lp64"
cwd = "../.."
depends-on = "build-accelerate-lp64"
description = "Test SciPy with accelerate (lp64)"

[feature.build-accelerate-ilp64.tasks.build-accelerate-ilp64]
cmd = "spin build --build-dir=build-accelerate-ilp64 -S-Dblas=accelerate -S-Duse-ilp64=true -S-Dblas-symbol-suffix='$NEWLAPACK$ILP64'"
cwd = "../.."
env = { CC = "ccache $CC", CXX = "ccache $CXX", FC = "ccache $FC" }
description = "Build SciPy with accelerate (ilp64)"

[feature.accelerate-ilp64.tasks.test-accelerate-ilp64]
cmd = "spin test --no-build --build-dir=build-accelerate-ilp64"
cwd = "../.."
depends-on = "build-accelerate-ilp64"
description = "Test SciPy with accelerate (ilp64)"


[feature.scipy-openblas.pypi-dependencies]
scipy-openblas32 = "*"

[feature.scipy-openblas.tasks.build-scipy-openblas]
cmd = "spin build --build-dir=build-scipy-openblas --with-scipy-openblas"
cwd = "../.."
env = { CC = "ccache $CC", CXX = "ccache $CXX", FC = "ccache $FC" }
description = "Build SciPy with scipy-openblas32"

[feature.scipy-openblas.tasks.test-scipy-openblas]
cmd = "spin test --no-build --build-dir=build-scipy-openblas"
cwd = "../.."
depends-on = "build-scipy-openblas"
description = "Test SciPy with scipy-openblas32"


### CPU/CUDA features ###

[feature.build-cpu]
platforms = ["linux-64", "osx-arm64", "win-64"]

[feature.build-cpu.tasks.build-cpu]
cmd = "spin build --build-dir=build-cpu --setup-args=-Dblas=blas --setup-args=-Dlapack=lapack --setup-args=-Duse-g77-abi=true"
cwd = "../.."
env = { CC = "ccache $CC", CXX = "ccache $CXX", FC = "ccache $FC" }
description = "Build SciPy (for CPU environments)"

# XXX: workaround for meson mkl blas detection
[feature.build-cpu.target.linux-64.tasks.build-cpu]
cmd = "spin build --build-dir=build-cpu --setup-args=-Dblas=mkl-dynamic-ilp64-seq --setup-args=-Duse-g77-abi=true"
cwd = "../.."
env = { CC = "ccache $CC", CXX = "ccache $CXX", FC = "ccache $FC" }
description = "Build SciPy (for CPU environments)"

[feature.test-cpu]
platforms = ["linux-64", "osx-arm64", "win-64"]

[feature.test-cpu.tasks.test-cpu]
cmd = "spin test --no-build --build-dir=build-cpu -b all -m 'array_api_backends and not slow'"
cwd = "../.."
depends-on = "build-cpu"
description = "Test with all CPU array backends"


# XXX: the purpose of this feature is to enforce the same minor Python version
# over both the cuda12 and cuda13 solve groups
[feature.py-cuda.dependencies]
python = "3.13.*"

[feature.build-cuda]
platforms = ["linux-64"]

[feature.build-cuda.tasks.build-cuda]
cmd = "spin build --build-dir=build-cuda --setup-args=-Dblas=blas --setup-args=-Dlapack=lapack --setup-args=-Duse-g77-abi=true"
cwd = "../.."
env = { CC = "ccache $CC", CXX = "ccache $CXX", FC = "ccache $FC" }
description = "Build SciPy (for CUDA environments)"

# JAX needs cuda 12 right now
[feature.cuda12]
platforms = ["linux-64"]
system-requirements = { cuda = "12" }

[feature.cuda12.dependencies]
cuda-version = "12.*"

# CuPy seems to need cuda13, possibly related to discussion in scipy/scipy#23458
[feature.cuda13]
platforms = ["linux-64"]
system-requirements = { cuda = "13" }

[feature.cuda13.dependencies]
cuda-version = "13.*"


### Array libraries ###

[feature.torch-cpu]
platforms = ["linux-64", "osx-arm64", "win-64"]

[feature.torch-cpu.dependencies]
pytorch-cpu = "*"

[feature.torch-cpu-tasks.tasks.test-torch]
cmd = "spin test --no-build --build-dir=build-cpu -b torch -m 'array_api_backends and not slow'"
cwd = "../.."
depends-on = "build-cpu"
description = "Test with PyTorch on CPU"

[feature.torch-cpu-tasks.tasks.test-torch-float32]
cmd = "spin test --no-build --build-dir=build-cpu -b torch -m 'array_api_backends and not slow'"
env.SCIPY_DEFAULT_DTYPE = "float32"
cwd = "../.."
depends-on = "build-cpu"
description = "Test with PyTorch and `SCIPY_DEFAULT_DTYPE=float32` on CPU"

[feature.torch-cuda.dependencies]
pytorch-gpu = "*"

[feature.torch-cuda.tasks.test-torch-cuda]
cmd = "spin test --no-build --build-dir=build-cuda -b torch -m 'array_api_backends and not slow'"
cwd = "../.."
env.SCIPY_DEVICE = "cuda"
depends-on = "build-cuda"
description = "Test with PyTorch on CUDA"


[feature.cupy.dependencies]
cupy = "*"

[feature.cupy.tasks.test-cupy]
cmd = "spin test --no-build --build-dir=build-cuda -b cupy -m 'array_api_backends and not slow'"
cwd = "../.."
depends-on = "build-cuda"
description = "Test with CuPy"


[feature.jax-cpu]
# include windows so the array-api env can use the jax-cpu feature
platforms = ["linux-64", "osx-arm64", "win-64"]

# Windows support pending: https://github.com/conda-forge/jaxlib-feedstock/issues/161
[feature.jax-cpu.target.unix.dependencies]
jax = "*"
jaxlib = { version = "*", build = "*cpu*" }

[feature.jax-cpu-tasks]
# Windows support pending: https://github.com/conda-forge/jaxlib-feedstock/issues/161
platforms = ["linux-64", "osx-arm64"]

[feature.jax-cpu-tasks.tasks.test-jax]
cmd = "spin test --no-build --build-dir=build-cpu -b jax.numpy -m 'array_api_backends and not slow'"
cwd = "../.."
depends-on = "build-cpu"
description = "Test with JAX on CPU"

[feature.jax-cuda]
platforms = ["linux-64"]

[feature.jax-cuda.dependencies]
# JAX 0.6.2 and 0.7.0 segfault on CUDA
jaxlib = { version = "!=0.6.2,!=0.7.0", build = "cuda12*" }
jax = "*"

[feature.jax-cuda.tasks.test-jax-cuda]
cmd = "spin test --no-build --build-dir=build-cuda -b jax.numpy -m 'array_api_backends and not slow'"
cwd = "../.."
env.SCIPY_DEVICE = "cuda"
depends-on = "build-cuda"
description = "Test with JAX on CUDA"


[feature.array_api_strict]
platforms = ["linux-64", "osx-arm64", "win-64"]

[feature.array_api_strict.dependencies]
array-api-strict = "*"

[feature.array_api_strict-tasks.tasks.test-strict]
cmd = "spin test --no-build --build-dir=build-cpu -b array_api_strict -m 'array_api_backends and not slow'"
cwd = "../.."
depends-on = "build-cpu"
description = "Test with array-api-strict"


[feature.dask]
platforms = ["linux-64", "osx-arm64", "win-64"]

[feature.dask.dependencies]
dask-core = "*" # Don't install distributed, tornado, etc.

[feature.dask-tasks.tasks.test-dask]
cmd = "spin test --no-build --build-dir=build-cpu -b dask.array -m 'array_api_backends and not slow'"
cwd = "../.."
depends-on = "build-cpu"
description = "Test with Dask"


[feature.marray]
platforms = ["linux-64", "osx-arm64", "win-64"]

[feature.marray.dependencies]
marray-python = "*"


### Optional dependencies ###

[feature.umfpack]
platforms = ["osx-arm64", "linux-64"]

[feature.umfpack.dependencies]
# scikit-umfpack is pinned because 0.4.2 packages seem broken, see gh-23564
scikit-umfpack = "==0.3.3"
setuptools = "<67"


[feature.scikit-sparse]
platforms = ["linux-64", "osx-arm64", "win-64"]

[feature.scikit-sparse.dependencies]
scikit-sparse = "*"


[feature.system-libs]
platforms = ["linux-64", "osx-arm64", "win-64"]

[feature.system-libs.dependencies]
# Pinned to match versions in `meson.build`
libboost-headers = "==1.89.0"
qhull = "==2020.2"

[feature.system-libs.activation.env]
BOOST_INCLUDEDIR = "$PIXI_PROJECT_ROOT/.pixi/envs/py311-system-libs-osx/include/boost"
BOOST_LIBRARYDIR = "$PIXI_PROJECT_ROOT/.pixi/envs/py311-system-libs-osx/lib"

[feature.system-libs.tasks.build-system-libs]
cmd = "spin build --use-system-libraries --setup-args=-Dblas=blas --setup-args=-Dlapack=lapack --setup-args=-Duse-g77-abi=true"
cwd = "../.."
env = { CC = "ccache $CC", CXX = "ccache $CXX", FC = "ccache $FC" }
description = "Build SciPy with system libs (e.g. boost, qhull)"

[feature.system-libs.tasks.test-system-libs]
cmd = "spin test --no-build"
cwd = "../.."
depends-on = "build-system-libs"
description = "Test SciPy with system libs"


### Alternative python versions ###

[feature.py311]
platforms = ["linux-64", "osx-arm64", "win-64"]

[feature.py311.dependencies]
python = "3.11.*"
