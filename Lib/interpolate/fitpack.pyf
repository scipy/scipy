!    -*- f90 -*-
! Author: Pearu Peterson <pearu@cens.ioc.ee>
!
python module dfitpack ! in

  usercode '''

static double dmax(double* seq,int len) {
  double val;
  int i;
  if (len<1)
    return -1e308;
  val = seq[0];
  for(i=1;i<len;++i)
    if (seq[i]>val) val = seq[i];
  return val;
}
static double dmin(double* seq,int len) {
  double val;
  int i;
  if (len<1)
    return 1e308;
  val = seq[0];
  for(i=1;i<len;++i)
    if (seq[i]<val) val = seq[i];
  return val;
}
static double calc_b(double* x,int m,double* tx,int nx) {
  double val1 = dmin(x,m);
  double val2 = dmin(tx,nx);
  if (val2>val1) return val1;
  val1 = dmax(tx,nx);
  return val2 - (val1-val2)/nx;
}
static double calc_e(double* x,int m,double* tx,int nx) {
  double val1 = dmax(x,m);
  double val2 = dmax(tx,nx);
  if (val2<val1) return val1;
  val1 = dmin(tx,nx);
  return val2 + (val2-val1)/nx;
}
static int imax(int i1,int i2) {
  return MAX(i1,i2);
}

static int calc_surfit_lwrk1(int m, int kx, int ky, int nxest, int nyest) {
 int u = nxest-kx-1;
 int v = nyest-ky-1;
 int km = MAX(kx,ky)+1;
 int ne = MAX(nxest,nyest);
 int bx = kx*v+ky+1;
 int by = ky*u+kx+1;
 int b1,b2;
 if (bx<=by) {b1=bx;b2=bx+v-ky;}
 else {b1=by;b2=by+u-kx;}
 return u*v*(2+b1+b2)+2*(u+v+km*(m+ne)+ne-kx-ky)+b2+1;
}
static int calc_surfit_lwrk2(int m, int kx, int ky, int nxest, int nyest) {
 int u = nxest-kx-1;
 int v = nyest-ky-1;
 int bx = kx*v+ky+1;
 int by = ky*u+kx+1;
 int b2 = (bx<=by?bx+v-ky:by+u-kx);
 return u*v*(b2+1)+b2;
}
'''

  interface

     !!!!!!!!!! Univariate spline !!!!!!!!!!!

     subroutine splev(t,n,c,k,x,y,m,ier)
       ! y = splev(t,c,k,x)
       real*8 dimension(n),intent(in) :: t
       integer intent(hide),depend(t) :: n=len(t)
       real*8 dimension(n-k-1),depend(n,k),check(len(c)==n-k-1),intent(in) :: c
       integer :: k
       real*8 dimension(m),intent(in) :: x
       real*8 dimension(m),depend(m),intent(out) :: y
       integer intent(hide),depend(x) :: m=len(x)
       integer intent(hide) :: ier
     end subroutine splev

     subroutine splder(t,n,c,k,nu,x,y,m,wrk,ier)
       ! dy = splder(t,c,k,x,[nu])
       real*8 dimension(n) :: t
       integer depend(t),intent(hide) :: n=len(t)
       real*8 dimension(n-k-1),depend(n,k),check(len(c)==n-k-1),intent(in) :: c
       integer :: k
       integer depend(k),check(0<=nu && nu<=k) :: nu = 1
       real*8 dimension(m) :: x
       real*8 dimension(m),depend(m),intent(out) :: y
       integer depend(x),intent(hide) :: m=len(x)
       real*8 dimension(n),depend(n),intent(cache,hide) :: wrk
       integer intent(hide) :: ier
     end subroutine splder

     function splint(t,n,c,k,a,b,wrk)
       ! iy = splint(t,c,k,a,b)
       real*8 dimension(n),intent(in) :: t
       integer intent(hide),depend(t) :: n=len(t)
       real*8 dimension(n),depend(n),check(len(c)==n) :: c
       integer intent(in) :: k
       real*8 intent(in) :: a
       real*8 intent(in) :: b
       real*8 dimension(n),depend(n),intent(cache,hide) :: wrk
       real*8 :: splint
     end function splint

     subroutine sproot(t,n,c,zero,mest,m,ier)
       ! zero,m,ier = sproot(t,c[,mest])
       real*8 dimension(n),intent(in) :: t
       integer intent(hide),depend(t),check(n>=8) :: n=len(t)
       real*8 dimension(n),depend(n),check(len(c)==n) :: c
       real*8 dimension(mest),intent(out),depend(mest) :: zero
       integer optional,intent(in),depend(n) :: mest=3*(n-7)
       integer intent(out) :: m
       integer intent(out) :: ier
     end subroutine sproot

     subroutine spalde(t,n,c,k,x,d,ier)
       ! d,ier = spalde(t,c,k,x)

       callprotoargument double*,int*,double*,int*,double*,double*,int*
       callstatement {int k1=k+1; (*f2py_func)(t,&n,c,&k1,&x,d,&ier); }

       real*8 dimension(n) :: t
       integer intent(hide),depend(t) :: n=len(t)
       real*8 dimension(n),depend(n),check(len(c)==n) :: c
       integer intent(in) :: k
       real*8 intent(in) :: x
       real*8 dimension(k+1),intent(out),depend(k) :: d
       integer intent(out) :: ier
     end subroutine spalde
 
     subroutine fpcurf0(iopt,x,y,w,m,xb,xe,k,s,nest,tol,maxit,k1,k2,n,t,c,fp,fpint,wrk,nrdata,ier)
       ! x,y,w,xb,xe,k,s,n,t,c,fp,fpint,nrdata,ier = \
       !   fpcurf0(x,y,k,[w,xb,xe,s,nest])

       fortranname fpcurf
       callprotoargument int*,double*,double*,double*,int*,double*,double*,int*,double*,int*,double*,int*,int*,int*,int*,double*,double*,double*,double*,double*,double*,double*,double*,double*,int*,int*
       callstatement (*f2py_func)(&iopt,x,y,w,&m,&xb,&xe,&k,&s,&nest,&tol,&maxit,&k1,&k2,&n,t,c,&fp,fpint,wrk,wrk+nest,wrk+nest*k2,wrk+nest*2*k2,wrk+nest*3*k2,nrdata,&ier)

       integer intent(hide) :: iopt = 0
       real*8 dimension(m),intent(in,out) :: x
       real*8 dimension(m),depend(m),check(len(y)==m),intent(in,out) :: y
       real*8 dimension(m),depend(m),check(len(w)==m),intent(in,out) :: w = 1.0
       integer intent(hide),depend(x),check(m>k),depend(k) :: m=len(x)
       real*8 intent(in,out),depend(x),check(xb<=x[0]) :: xb = x[0]
       real*8 intent(in,out),depend(x,m),check(xe>=x[m-1]) :: xe = x[m-1]
       integer check(1<=k && k<=5),intent(in,out) :: k
       real*8 check(s>=0.0),depend(m),intent(in,out) :: s = m
       integer intent(in),depend(m,s,k,k1),check(nest>=2*k1) :: nest = (s==0.0?m+k+1:MAX(m/2,2*k1))
       real*8 intent(hide) :: tol = 0.001
       integer intent(hide) :: maxit = 20
       integer intent(hide),depend(k) :: k1=k+1
       integer intent(hide),depend(k) :: k2=k+2
       integer intent(out) :: n
       real*8 dimension(nest),intent(out),depend(nest) :: t
       real*8 dimension(nest),depend(nest),intent(out) :: c
       real*8 intent(out) :: fp
       real*8 dimension(nest),depend(nest),intent(out,cache)  :: fpint
       real*8 dimension(nest*3*k2+m*k1),intent(cache,hide),depend(nest,k1,k2,m) :: wrk
       integer dimension(nest),depend(nest),intent(out,cache) :: nrdata
       integer intent(out) :: ier
     end subroutine fpcurf0

     subroutine fpcurf1(iopt,x,y,w,m,xb,xe,k,s,nest,tol,maxit,k1,k2,n,t,c,fp,fpint,wrk,nrdata,ier)
       ! x,y,w,xb,xe,k,s,n,t,c,fp,fpint,nrdata,ier = \
       !   fpcurf1(x,y,w,xb,xe,k,s,n,t,c,fp,fpint,nrdata,ier)

       fortranname fpcurf
       callprotoargument int*,double*,double*,double*,int*,double*,double*,int*,double*,int*,double*,int*,int*,int*,int*,double*,double*,double*,double*,double*,double*,double*,double*,double*,int*,int*
       callstatement (*f2py_func)(&iopt,x,y,w,&m,&xb,&xe,&k,&s,&nest,&tol,&maxit,&k1,&k2,&n,t,c,&fp,fpint,wrk,wrk+nest,wrk+nest*k2,wrk+nest*2*k2,wrk+nest*3*k2,nrdata,&ier)

       integer intent(hide) :: iopt = 1
       real*8 dimension(m),intent(in,out,overwrite) :: x
       real*8 dimension(m),depend(m),check(len(y)==m),intent(in,out,overwrite) :: y
       real*8 dimension(m),depend(m),check(len(w)==m),intent(in,out,overwrite) :: w
       integer intent(hide),depend(x),check(m>k),depend(k) :: m=len(x)
       real*8 intent(in,out) :: xb
       real*8 intent(in,out) :: xe
       integer check(1<=k && k<=5),intent(in,out) :: k
       real*8 check(s>=0.0),intent(in,out) :: s
       integer intent(hide),depend(t) :: nest = len(t)
       real*8 intent(hide) :: tol = 0.001
       integer intent(hide) :: maxit = 20
       integer intent(hide),depend(k) :: k1=k+1
       integer intent(hide),depend(k) :: k2=k+2
       integer intent(in,out) :: n
       real*8 dimension(nest),intent(in,out,overwrite) :: t
       real*8 dimension(nest),depend(nest),check(len(c)==nest),intent(in,out,overwrite) :: c
       real*8 intent(in,out) :: fp
       real*8 dimension(nest),depend(nest),check(len(fpint)==nest),intent(in,out,cache,overwrite)  :: fpint
       real*8 dimension(nest*3*k2+m*k1),intent(cache,hide),depend(nest,k1,k2,m) :: wrk
       integer dimension(nest),depend(nest),check(len(nrdata)==nest),intent(in,out,cache,overwrite) :: nrdata
       integer intent(in,out) :: ier
     end subroutine fpcurf1

     subroutine fpcurfm1(iopt,x,y,w,m,xb,xe,k,s,nest,tol,maxit,k1,k2,n,t,c,fp,fpint,wrk,nrdata,ier)
       ! x,y,w,xb,xe,k,s,n,t,c,fp,fpint,nrdata,ier = \
       !   fpcurfm1(x,y,k,t,[w,xb,xe])

       fortranname fpcurf
       callprotoargument int*,double*,double*,double*,int*,double*,double*,int*,double*,int*,double*,int*,int*,int*,int*,double*,double*,double*,double*,double*,double*,double*,double*,double*,int*,int*
       callstatement (*f2py_func)(&iopt,x,y,w,&m,&xb,&xe,&k,&s,&nest,&tol,&maxit,&k1,&k2,&n,t,c,&fp,fpint,wrk,wrk+nest,wrk+nest*k2,wrk+nest*2*k2,wrk+nest*3*k2,nrdata,&ier)

       integer intent(hide) :: iopt = -1
       real*8 dimension(m),intent(in,out) :: x
       real*8 dimension(m),depend(m),check(len(y)==m),intent(in,out) :: y
       real*8 dimension(m),depend(m),check(len(w)==m),intent(in,out) :: w = 1.0
       integer intent(hide),depend(x),check(m>k),depend(k) :: m=len(x)
       real*8 intent(in,out),depend(x),check(xb<=x[0]) :: xb = x[0]
       real*8 intent(in,out),depend(x,m),check(xe>=x[m-1]) :: xe = x[m-1]
       integer check(1<=k && k<=5),intent(in,out) :: k
       real*8 intent(out) :: s = -1
       integer intent(hide),depend(n) :: nest = n
       real*8 intent(hide) :: tol = 0.001
       integer intent(hide) :: maxit = 20
       integer intent(hide),depend(k) :: k1=k+1
       integer intent(hide),depend(k) :: k2=k+2
       integer intent(out),depend(t) :: n = len(t)
       real*8 dimension(n),intent(in,out,overwrite) :: t
       real*8 dimension(nest),depend(nest),intent(out) :: c
       real*8 intent(out) :: fp
       real*8 dimension(nest),depend(nest),intent(out,cache)  :: fpint
       real*8 dimension(nest*3*k2+m*k1),intent(cache,hide),depend(nest,k1,k2,m) :: wrk
       integer dimension(nest),depend(nest),intent(out,cache) :: nrdata
       integer intent(out) :: ier
     end subroutine fpcurfm1

     !!!!!!!!!! Bivariate spline !!!!!!!!!!!

     subroutine bispev(tx,nx,ty,ny,c,kx,ky,x,mx,y,my,z,wrk,lwrk,iwrk,kwrk,ier)
       ! z,ier = bispev(tx,ty,c,kx,ky,x,y)
       real*8 dimension(nx),intent(in) :: tx
       integer intent(hide),depend(tx) :: nx=len(tx)
       real*8 dimension(ny),intent(in) :: ty
       integer intent(hide),depend(ty) :: ny=len(ty)
       real*8 intent(in),dimension((nx-kx-1)*(ny-ky-1)),depend(nx,ny,kx,ky),&
            check(len(c)==(nx-kx-1)*(ny-ky-1)):: c
       integer :: kx
       integer :: ky
       real*8 intent(in),dimension(mx) :: x
       integer intent(hide),depend(x) :: mx=len(x)
       real*8 intent(in),dimension(my) :: y
       integer intent(hide),depend(y) :: my=len(y)
       real*8 dimension(mx,my),depend(mx,my),intent(out,c) :: z
       real*8 dimension(lwrk),depend(lwrk),intent(hide,cache) :: wrk
       integer intent(hide),depend(mx,kx,my,ky) :: lwrk=mx*(kx+1)+my*(ky+1)
       integer dimension(kwrk),depend(kwrk),intent(hide,cache) :: iwrk
       integer intent(hide),depend(mx,my) :: kwrk=mx+my
       integer intent(out) :: ier
     end subroutine bispev

     subroutine surfit_smth(iopt,m,x,y,z,w,xb,xe,yb,ye,kx,ky,s,nxest,nyest,&
          nmax,eps,nx,tx,ny,ty,c,fp,wrk1,lwrk1,wrk2,lwrk2,&
          iwrk,kwrk,ier)
       !  nx,tx,ny,ty,c,fp,ier = surfit_smth(x,y,z,[w,xb,xe,yb,ye,kx,ky,s,eps,lwrk2])

       fortranname surfit

       integer intent(hide) :: iopt=0
       integer intent(hide),depend(x,kx,ky),check(m>=(kx+1)*(ky+1)) &
            :: m=len(x)
       real*8 dimension(m) :: x
       real*8 dimension(m),depend(m),check(len(y)==m) :: y
       real*8 dimension(m),depend(m),check(len(z)==m) :: z
       real*8 optional,dimension(m),depend(m),check(len(w)==m) :: w = 1.0
       real*8 optional,depend(x,m) :: xb=dmin(x,m)
       real*8 optional,depend(x,m) :: xe=dmax(x,m)
       real*8 optional,depend(y,m) :: yb=dmin(y,m)
       real*8 optional,depend(y,m) :: ye=dmax(y,m)
       integer check(1<=kx && kx<=5) :: kx = 3
       integer check(1<=ky && ky<=5) :: ky = 3
       real*8 optional,check(0.0<=s) :: s = m
       integer optional,depend(kx,m),check(nxest>=2*(kx+1)) &
            :: nxest = imax(kx+1+sqrt(m/2),2*(kx+1))
       integer optional,depend(ky,m),check(nyest>=2*(ky+1)) &
            :: nyest = imax(ky+1+sqrt(m/2),2*(ky+1))
       integer intent(hide),depend(nxest,nyest) :: nmax=MAX(nxest,nyest)
       real*8 optional,check(0.0<eps && eps<1.0) :: eps = 1e-16
       integer intent(out) :: nx
       real*8 dimension(nmax),intent(out),depend(nmax) :: tx
       integer intent(out) :: ny
       real*8 dimension(nmax),intent(out),depend(nmax) :: ty
       real*8 dimension((nxest-kx-1)*(nyest-ky-1)), &
            depend(kx,ky,nxest,nyest),intent(out) :: c
       real*8 intent(out) :: fp
       real*8 dimension(lwrk1),intent(cache,out),depend(lwrk1) :: wrk1
       integer intent(hide),depend(m,kx,ky,nxest,nyest) &
            :: lwrk1=calc_surfit_lwrk1(m,kx,ky,nxest,nyest)
       real*8 dimension(lwrk2),intent(cache,hide),depend(lwrk2) :: wrk2
       integer optional,intent(in),depend(kx,ky,nxest,nyest) &
            :: lwrk2=calc_surfit_lwrk2(m,kx,ky,nxest,nyest)
       integer dimension(kwrk),depend(kwrk),intent(cache,hide) :: iwrk
       integer intent(hide),depend(m,nxest,nyest,kx,ky) &
            :: kwrk=m+(nxest-2*kx-1)*(nyest-2*ky-1)
       integer intent(out) :: ier
     end subroutine surfit_smth

     subroutine surfit_lsq(iopt,m,x,y,z,w,xb,xe,yb,ye,kx,ky,s,nxest,nyest,&
          nmax,eps,nx,tx,ny,ty,c,fp,wrk1,lwrk1,wrk2,lwrk2,&
          iwrk,kwrk,ier)
       ! tx,ty,c,fp,ier = surfit_lsq(x,y,z,tx,ty,[w,xb,xe,yb,ye,kx,ky,eps,lwrk2])

       fortranname surfit

       integer intent(hide) :: iopt=-1
       integer intent(hide),depend(x,kx,ky),check(m>=(kx+1)*(ky+1)) &
            :: m=len(x)
       real*8 dimension(m) :: x
       real*8 dimension(m),depend(m),check(len(y)==m) :: y
       real*8 dimension(m),depend(m),check(len(z)==m) :: z
       real*8 optional,dimension(m),depend(m),check(len(w)==m) :: w = 1.0
       real*8 optional,depend(x,tx,m,nx) :: xb=calc_b(x,m,tx,nx)
       real*8 optional,depend(x,tx,m,nx) :: xe=calc_e(x,m,tx,nx)
       real*8 optional,depend(y,ty,m,ny) :: yb=calc_b(y,m,ty,ny)
       real*8 optional,depend(y,ty,m,ny) :: ye=calc_e(y,m,ty,ny)
       integer check(1<=kx && kx<=5) :: kx = 3
       integer check(1<=ky && ky<=5) :: ky = 3
       real*8 intent(hide) :: s = 0.0
       integer intent(hide),depend(nx) :: nxest = nx
       integer intent(hide),depend(ny) :: nyest = ny
       integer intent(hide),depend(nx,ny) :: nmax=MAX(nx,ny)
       real*8 optional,check(0.0<eps && eps<1.0) :: eps = 1e-16
       integer intent(hide),depend(tx,kx),check(2*kx+2<=nx) :: nx = len(tx)
       real*8 dimension(nx),intent(in,out,overwrite) :: tx
       integer intent(hide),depend(ty,ky),check(2*ky+2<=ny) :: ny = len(ty)
       real*8 dimension(ny),intent(in,out,overwrite) :: ty
       real*8 dimension((nx-kx-1)*(ny-ky-1)),depend(kx,ky,nx,ny),intent(out) :: c
       real*8 intent(out) :: fp
       real*8 dimension(lwrk1),intent(cache,hide),depend(lwrk1) :: wrk1
       integer intent(hide),depend(m,kx,ky,nxest,nyest) &
            :: lwrk1=calc_surfit_lwrk1(m,kx,ky,nxest,nyest)
       real*8 dimension(lwrk2),intent(cache,hide),depend(lwrk2) :: wrk2
       integer optional,intent(in),depend(kx,ky,nxest,nyest) &
            :: lwrk2=calc_surfit_lwrk2(m,kx,ky,nxest,nyest)
       integer dimension(kwrk),depend(kwrk),intent(cache,hide) :: iwrk
       integer intent(hide),depend(m,nx,ny,kx,ky) &
            :: kwrk=m+(nx-2*kx-1)*(ny-2*ky-1)
       integer intent(out) :: ier
     end subroutine surfit_lsq

  end interface
end python module dfitpack

