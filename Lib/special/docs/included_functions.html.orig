<TITLE> Overview of functions in the cephes module for numerical python </TITLE>

Any time a function allows a complex number z it also allows a real number x.

<h1> Airy Functions </h1>
<DL>
<DT>(Ai,Aip,Bi,Bip) = airy(z)
<DD>airy(z) calculates the Airy functions and their derivatives
evaluated at real or complex number z.  The Airy functions Ai and Bi 
are two independent solutions of y"(x)=xy.  Aip and Bip are the first derivatives
evaluated at x of Ai and Bi respectively.

<DT>(Aie,Aipe,Bie,Bipe) = airye(z)
<DD>airye(z) calculates the exponentially scaled Airy functions and 
their derivatives evaluated at real or complex number z.  
airye(z)[0:1] = airy(z)[0:1] * exp(2.0/3.0*z*sqrt(z))
airye(z)[2:3] = airy(z)[2:3] * exp(-abs((2.0/3.0*z*sqrt(z)).real))
</DL>

<h1> Elliptic Functions and Integrals </h1>
<DL>
<DT>(sn,cn,dn,ph) = ellpj_sn(u,m)
<DD>ellpj calculates the Jacobian elliptic functions of
parameter m between 0 and 1, and real u.  The returned functions are
often written sn(u|m), cn(u|m), and dn(u|m).  The value of ph is such
that if u = ellik(ph,m), then sn(u|m) = sin(ph) and cn(u|m) = cos(ph).

<DT>y = ellpe(m1)
<DD>ellpe(m1) returns the complete integral of the second kind:
integral(sqrt(1-(1-m1)*sin(t)**2),t=0..pi/2)

<DT>y = ellie(phi,m)
<DD>ellie(phi,m) returns the incomplete elliptic integral of the
second kind: integral(sqrt(1-m*sin(t)**2),t=0..phi)

<DT>y = ellpk(m1)
<DD>ellpk(m1) returns the complete integral of the first kind:
integral(1/sqrt(1-(1-m1)*sin(t)**2),t=0..pi/2)

<DT>y = ellik(phi,m)
<DD>ellik(phi,m) returns the incomplete elliptic integral of the first
kind: integral(1/sqrt(1-m*sin(t)**2),t=0..phi)
</DL>


<h1> Bessel Functions </h1>
<DL>
<DT>y = jn(n,x)
<DD>jn(n,x) returns the Bessel function of integer order n at  x.

<DT>y = jv(v,z)
<DD>jv(v,z) returns the Bessel function of real order v at complex z.

<DT>y = jve(v,z)
<DD>jve(v,z) returns the exponentially scaled Bessel function of real order
v at complex z: jve(v,z) = jv(v,z) * exp(-abs(z.imag))

<DT>y = yn(n,x)
<DD>yn(n,x) returns the Bessel function of the second kind of integer
order n at x. 

<DT>y = yv(n,z)
<DD>yv(v,z) returns the Bessel function of the second kind of real
order v at complex z.

<DT>y = yve(n,z)
<DD>yve(v,z) returns the exponentially scaled Bessel function of the second 
kind of real order v at complex z: yve(v,z) = yv(v,z) * exp(-abs(z.imag))


<DT>y = kn(n,x)
<DD>kn(n,x) returns the modified Bessel function of the third kind for
integer order n at x.

<DT>y = kv(v,z)
<DD>kv(v,z) returns the modified Bessel function of the third kind for
real order v at complex z.

<DT>y = kve(v,z)
<DD>kve(v,z) returns the exponentially scaled, modified Bessel function
of the third kind for real order v at complex z: kve(v,z) = kv(v,z) * exp(z)

<DT>y = iv(v,z)
<DD>iv(v,z) returns the modified Bessel function of real order v of
z.  If z is of real type and negative, v must be integer valued.

<DT>y = ive(v,z)
<DD>ive(v,z) returns the exponentially scaled modified Bessel function of 
real order v and complex z: ive(v,z) = iv(v,z) * exp(-abs(z.real))

<DT>y = hankel1(v,z)
<DD>hankel1(v,z) returns the Hankel function of the first kind for real order v and complex argument z.  

<DT>y = hankel1e(v,z)
<DD>hankel1e(v,z) returns the exponentially scaled Hankel function of the first
kind for real order v and complex argument z:
hankel1e(v,z) = hankel1(v,z) * exp(-1j * z)

<DT>y = hankel2(v,z)
<DD>hankel2(v,z) returns the Hankel function of the second kind for real order v and complex argument z.  

<DT>y = hankel2e(v,z)
<DD>hankel2e(v,z) returns the exponentially scaled Hankel function of the second
kind for real order v and complex argument z:
hankel1e(v,z) = hankel1(v,z) * exp(1j * z)

<DT>y = j0(x)
<DD>j0(x) returns the Bessel function of order 0 at x.

<DT>y = j1(x)
<DD>j1(x) returns the Bessel function of order 1 at x.

<DT>y = y0(x)
<DD>y0(x) returns the Bessel function of the second kind of order 0 at x.

<DT>y = y1(x)
<DD>y1(x) returns the Bessel function of the second kind of order 1 at x.

<DT>y = i0(x)
<DD>i0(x) returns the modified Bessel function of order 0 at x.

<DT>y = i1(x)
<DD>i1(x) returns the modified Bessel function of order 1 at x.

<DT>y = i0e(x)
<DD>i0e(x) returns the exponentially scaled modified Bessel function
of order 0 at x.  i0e(x) = exp(-|x|) * i0(x).

<DT>y = i1e(x)
<DD>i1e(x) returns the exponentially scaled modified Bessel function
of order 0 at x.  i1e(x) = exp(-|x|) * i1(x).

<DT>y = k0(x)
<DD>i0(x) returns the modified Bessel function of the third kind of
order 0 at x. 

<DT>y = k1(x)
<DD>i1(x) returns the modified Bessel function of the third kind of
order 1 at x. 

<DT>y = k0e(x)
<DD>k0e(x) returns the exponentially scaled modified Bessel function
of the third kind of order 0 at x.  k0e(x) = exp(x) * k0(x).

<DT>y = k1e(x)
<DD>k1e(x) returns the exponentially scaled modified Bessel function
of the third kind of order 1 at x.  k1e(x) = exp(x) * k1(x)
</DL>

<DT>y = besselpoly(a,lambda,nu)
<DD>besselpoly(a,lambda,nu) computes the integral of a bessel function
times a power:  y = integral(x^lambda jv(2*a*x),x=0..1)
</DL>

<h1> Statistical Functions </h1>
<DL>
<DT>y = bdtr(k,n,p)
<DD>bdtr(k,n,p) returns the sum of the terms 0 through k of the
Binomial probability density:  sum(nCj p**j (1-p)**(n-j),j=0..k)

<DT>y = bdtrc(k,n,p)
<DD>bdtrc(k,n,p) returns the sum of the terms k+1 through n of the
Binomial probability density: sum(nCj p**j (1-p)**(n-j), j=k+1..n)

<DT>p = bdtri(k,n,y)
<DD>bdtri(k,n,y) finds the probability p such that the sum of the
terms 0 through k of the Binomial probability density is equal to the
given cumulative probability y.

<DT>y = btdtr(a,b,x)
<DD>btdtr(a,b,x) returns the area from zero to x under the beta
density function: gamma(a+b)/(gamma(a)*gamma(b)))*integral(t**(a-1)
(1-t)**(b-1), t=0..x)

<DT>y = fdtr(df1,df2,x) 
<DD>fdtr(df1,df2,x) returns the area from zero to x under the F density
function (also known as Snedcor's density or the variance ratio
density).  This is the density of X = (u1/df1)/(u2/df2), where u1 and
u2 are random variables having Chi square distributions with df1 and
df2 degrees of freedom, respectively.

<DT>y = fdtrc(df1,df2,x)
<DD>fdtrc(df1,df2,x) returns the area from x to infinity under the F
density function.

<DT>x = fdtri(df1,df2,p)
<DD>fdtri(df1,df2,p) finds the F density argument x such that the
integral from x to infinity of the F density is equal to the given
probability p.

<DT>y = gdtr(a,b,x)
<DD>gdtr(a,b,x) returns the integral from zero to x of the gamma
probability density function: a**b / gamma(b) * integral(t**(b-1) exp(-at),t=0..x)

<DT>y = gdtrc(a,b,x)
<DD>gdtrc(a,b,x) returns the integral from x to infinity of the gamma
probability density function.

<DT>y = nbdtr(k,n,p)
<DD>nbdtr(k,n,p) returns the sum of the terms 0 through k of the
negative binomial distribution: sum((n+j-1)Cj p**n (1-p)**j,j=0..k).
In a sequence of Bernoulli trials this is the probability that k or
fewer failures precede the nth success. 

<DT>y = nbdtrc(k,n,p)
<DD>nbdtrc(k,n,p) returns the sum of the terms k+1 to infinity of the
negative binomial distribution.

<DT>p = nbdtri(k,n,y)
<DD>nbdtri(k,n,y) finds the argument p such that nbdtr(k,n,p) is equal
to y.

<DT>y = pdtr(k,m)
<DD>pdtr(k,m) returns the sum of the first k terms of the Poisson
distribution: sum(exp(-m) * m**j / j!, j=0..k) = igamc( k+1, m).
Arguments must both be positive and k an integer.

<DT>y = pdtrc(k,m)
<DD>pdtr(k,m) returns the sum of the terms from k+1 to infinity of the
Poisson distribution: sum(exp(-m) * m**j / j!, j=k+1..inf) = igam( k+1, m).
Arguments must both be positive and k an integer.

<DT>m = pdtri(k,y)
<DD>pdtri(k,y) returns the Poisson variable x such that the integral
from 0 to x of the Poisson density is equal to the given probability
y:  calculated by igami( k+1, y).  k must be a nonnegative integer and
y between 0 and 1.

<DT>p = stdtr(k,t)
<DD>stdtr(k,t) returns the integral from minus infinity to t of the Student t
distribution with integer k > 0 degrees of freedom:
gamma((k+1)/2)/(sqrt(k*pi)*gamma(k/2)) *
integral((1+x**2/k)**(-k/2-1/2),x=-inf..t) 

<DT>t = stdtri(k,p)
<DD>stdtri(k,p) returns the argument t such that stdtr(k,t) is equal to p.

<DT>p = chdtr(v,x)
<DD>Returns the area under the left hand tail (from 0 to x) of the Chi
square probability density function with v degrees of freedom:
1/(2**(v/2) * gamma(v/2)) * integral(t**(v/2-1) * exp(-t/2), t=0..x)

<DT>p = chdtrc(v,x)
<DD>chdtrc(v,x) returns the area under the right hand tail (from x to
infinity) of the Chi square probability density function with v
degrees of freedom:
1/(2**(v/2) * gamma(v/2)) * integral(t**(v/2-1) * exp(-t/2), t=x..inf)

<DT>x = chdtri(v,p)
<DD>chdtri(v,p) returns the argument x such that chdtrc(v,x) is equal
to p.

<DT>y = ndtr(x)
<DD>ndtr(x) returns the area under the Gaussian probability density
function, integrated from minus infinity to x:
1/sqrt(2*pi) * integral(exp(-t**2 / 2),t=-inf..x)

<DT>y = ndtri(x)
<DD>ndtri(x) returns the argument x for which the area udnder the
Gaussian probability density function (integrated from minus infinity
to x) is equal to y.

<DT>y = erf(x)
<DD>erf(x) returns the error function defined as
2/sqrt(pi) * integral(exp(-t**2 / 2),t=0..x)

<DT>y = erfc(x)
<DD>erfc(x) returns 1 - erf(x).

<DT>y = smirnov(n,e)
<DD>smirnov(n,e) returns the exact Smirnov statistic for a one-sided
test equal to the probability that the maximum difference between a
theoretical distribution and an empirical one based on n samples is
greater that e.

<DT>e = smirnovi(n,y)
<DD>smirnovi(n,y) returns e such that smirnov(n,e) = y.

<DT>p = kolmogorov(y)
<DD>kolmogorov(y) returns Kolmogorov's limiting distribution of a
two-sided test or probability that sqrt(n) * max deviation > y.

<DT>y = kolmogorovi(p)
<DD>kolmogorovi(p) returns y such that kolmogorov(y) = p
</DL>

<h1> Gamma and Related Functions </h1>
<DL>
<DT>y = gamma(x)
<DD>gamma(x) returns the gamma function of the argument.  The gamma
function is often referred to as the generalized factorial since
x*gamma(x) = gamma(x+1) and gamma(n+1) = n! for nonnegative n.

<DT>y = lgam(x)
<DD>lgam(x) returns the base e logarithm of the absolute value of the
gamma function of x: ln(|gamma(x)|)

<DT>y = igam(a,x)
<DD>igam(a,x) returns the incomplete gamma integral defined as
1 / gamma(a) * integral(exp(-t) * t**(a-1), t=0..x).  Both arguments
must be positive.

<DT>y = igamc(a,x)
<DD>igamc(a,x) returns the complemented incomplete gamma integral
defined as 1 / gamma(a) * integral(exp(-t) * t**(a-1), t=x..inf) = 1 -
igam(a,x).  Both arguments must be positive.

<DT>x = igami(a,y)
<DD>igami(a,y) returns x such that igamc(a,x) = y.  k must be a
nonnegative integer.

<DT>y = beta(a,b)
<DD>beta(a,b) returns gamma(a) * gamma(b) / gamma(a+b)

<DT>y = lbeta(x)
<DD>lbeta(a,b) returns the natural logarithm of the absolute value of
beta: ln(|beta(x)|). 

<DT>y = incbet(a,b,x)
<DD>incbet(a,b,x) returns the incomplete beta integral of the
arguments, evaluated from zero to x: gamma(a+b) / (gamma(a)*gamma(b))
* integral(t**(a-1) (1-t)**(b-1), t=0..x).

<DT>x = incbi(a,b,y)
<DD>incbi(a,b,y) returns x such that incbet(a,b,x) = y.

<DT>y = psi(x)
<DD>psi(x) is the logarithmic derivative of the gamma function
evaluated at x.

<DT>y = rgamma(x)
<DD>rgamma(x) returns one divided by the gamma function of x. 
</DL>

<h1> HyperGeometric Functions </h1>
<DL>
<DT>y = hyp2f1(a,b,c,x)
<DD>hyp2f1(a,b,c,x) returns the gauss hypergeometric function
( 2F1(a,b;c;x) ).

<DT>y = hyperg(a,b,x)
<DD>hyperg(a,b,x) returns the confluent hypergeometeric function
( 1F1(a,b;x) ) evaluated at the values a, b, and x.

<DT>(y,err) = hyp2f0(a,b,x,type)
<DD>hyp2f0 returns the hypergeometric function 2F0 in y and an error
estimate in err.  The input type determines a convergence factor and
can be either 1 or 2.

<DT>(y,err) = onef2(a,b,c,x)
<DD>onef2 returns the hypergeometric function 1F2 in y and an error
estimate in err.  

<DT>(y,err) = threef0(a,b,c,x)
<DD>threef0 returns the hypergeometric function 3F0 in y and an error
estimate in err.  
</DL>

<h1> Other Special Functions </h1>
<DL>
<DT>y = expn(n,x)
<DD>expn(n,x) return the exponential integral for integer n and
non-negative x and n: integral(exp(-x*t) / t**n, t=1..inf).

<DT>y = wofz(z) 
<DD>wofz(z) returns the value of the faddeeva function for complex argument
z: exp(-z**2)*erfc(-i*z)

<DT>y = besselpoly(a,lam,nu) 
<DD>besselpoly(a,lam,nu) returns the value of the integral:
integral(x**lam * jv(nu,2*a*x),x=0..1).

<DT>(ssa,cca) = fresnl(x)
<DD>fresnl(x) returns the fresnel sin and cos integrals: integral(sin(pi/2
* t**2),t=0..x) and integral(cos(pi/2 * t**2),t=0..x).

<DT>y = dawsn(x)
<DD>dawsn(x) returns dawson's integral: exp(-x**2) *
integral(exp(t**2),t=0..x).

<DT>(shi,chi) = shichi(x)
<DD>shichi(x) returns the hyperbolic sine and cosine integrals:
integral(sinh(t)/t,t=0..x) and eul + ln x +
integral((cosh(t)-1)/t,t=0..x) where eul is Euler's Constant.

<DT>(si,ci) = sici(x)
<DD>sici(x) returns in si the integral of the sinc function from 0 to x:
integral(sin(t)/t,t=0..x).  It returns in ci the cosine integral: eul + ln x +
integral((cos(t) - 1)/t,t=0..x).

<DT>y = spence(x)
<DD>spence(x) returns the dilogarithm integral: -integral(log t /
(t-1),t=1..x)

<DT>y = struve(v,x)
<DD>struve(v,x) returns the Struve function Hv(x) of order v at x, x
must be positive unless v is an integer.

<DT>y = zeta(x,q)
<DD>zeta(x,q) returns the Riemann zeta function of two arguments:
sum((k+q)**(-x),k=0..inf)

<DT>y = zetac(x)
<DD>zetac(x) returns the Riemann zeta function: sum(k**(-x), k=2..inf)
</DL>

<h1> Convenience Functions </h1>
<DL>
<DT>y = cbrt(x)
<DD>cbrt(x) returns the real cube root of x. 

<DT>y = exp10(x)
<DD>exp10(x) returns 10 raised to the x power.

<DT>y = exp2(x)
<DD>exp2(x) returns 2 raised to the x power.

<DT>y = radian(d,m,s)
<DD>radian(d,m,s) returns the angle given in (d)egrees, (m)inutes, and
(s)econds in radians.

<DT>y = cosdg(x)
<DD>cosdg(x) calculates the cosine of the angle x given in degrees.

<DT>y = sindg(x)
<DD>sindg(x) calculates the sine of the angle x given in degrees.

<DT>y = tandg(x)
<DD>tandg(x) calculates the tangent of the angle x given in degrees.

<DT>y = cotdg(x)
<DD>cotdg(x) calculates the cotangent of the angle x given in degrees.

<DT>y = log1p(x)
<DD>log1p(x) calculates log(1+x) for use when x is near zero.

<DT>y = expm1(x)
<DD>expm1(x) calculates exp(x) - 1 for use when x is near zero.

<DT>y = cosm1(x)
<DD>calculates cos(x) - 1 for use when x is near zero.
</DL>



















