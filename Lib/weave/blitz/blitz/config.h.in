/* blitz/config.h.in.  Generated from configure.ac by autoheader.  */


/******************************************************************************
 * config.h           Compiler language support flags
 *
 * This file was generated automatically when running the configure script.
 * You should rerun configure each time you switch compilers, install new
 * standard libraries, or change compiler versions.
 *
 */



/* define if bool is a built-in type */
#undef HAVE_BOOL

/* define if the compiler has <climits> header */
#undef HAVE_CLIMITS

/* define if the compiler has complex<T> */
#undef HAVE_COMPLEX

/* define if the compiler has standard complex<T> functions */
#undef HAVE_COMPLEX_FCNS

/* define if the compiler has complex math functions */
#undef HAVE_COMPLEX_MATH1

/* define if the compiler has more complex math functions */
#undef HAVE_COMPLEX_MATH2

/* define if complex math functions are in namespace std */
#undef HAVE_COMPLEX_MATH_IN_NAMESPACE_STD

/* define if the compiler supports const_cast<> */
#undef HAVE_CONST_CAST

/* define if the compiler supports default template parameters */
#undef HAVE_DEFAULT_TEMPLATE_PARAMETERS

/* define if the compiler supports dynamic_cast<> */
#undef HAVE_DYNAMIC_CAST

/* define if the compiler handle computations inside an enum */
#undef HAVE_ENUM_COMPUTATIONS

/* define if the compiler handles (int) casts in enum computations */
#undef HAVE_ENUM_COMPUTATIONS_WITH_CAST

/* define if the compiler supports exceptions */
#undef HAVE_EXCEPTIONS

/* define if the compiler supports the explicit keyword */
#undef HAVE_EXPLICIT

/* define if the compiler supports explicit template function qualification */
#undef HAVE_EXPLICIT_TEMPLATE_FUNCTION_QUALIFICATION

/* define if the compiler recognizes the full specialization syntax */
#undef HAVE_FULL_SPECIALIZATION_SYNTAX

/* define if the compiler supports function templates with non-type parameters
   */
#undef HAVE_FUNCTION_NONTYPE_PARAMETERS

/* define if the compiler supports IEEE math library */
#undef HAVE_IEEE_MATH

/* Define to 1 if you have the `m' library (-lm). */
#undef HAVE_LIBM

/* define if the compiler supports member constants */
#undef HAVE_MEMBER_CONSTANTS

/* define if the compiler supports member templates */
#undef HAVE_MEMBER_TEMPLATES

/* define if the compiler supports member templates outside the class
   declaration */
#undef HAVE_MEMBER_TEMPLATES_OUTSIDE_CLASS

/* define if the compiler supports the mutable keyword */
#undef HAVE_MUTABLE

/* define if the compiler implements namespaces */
#undef HAVE_NAMESPACES

/* define if the compiler supports the Numerical C Extensions Group restrict
   keyword */
#undef HAVE_NCEG_RESTRICT

/* define if the compiler supports the __restrict__ keyword */
#undef HAVE_NCEG_RESTRICT_EGCS

/* define if the compiler has numeric_limits<T> */
#undef HAVE_NUMERIC_LIMITS

/* define if the compiler accepts the old for scoping rules */
#undef HAVE_OLD_FOR_SCOPING

/* define if the compiler supports partial ordering */
#undef HAVE_PARTIAL_ORDERING

/* define if the compiler supports partial specialization */
#undef HAVE_PARTIAL_SPECIALIZATION

/* define if the compiler supports reinterpret_cast<> */
#undef HAVE_REINTERPRET_CAST

/* define if the compiler supports Run-Time Type Identification */
#undef HAVE_RTTI

/* define if the compiler has getrusage() function */
#undef HAVE_RUSAGE

/* define if the compiler supports static_cast<> */
#undef HAVE_STATIC_CAST

/* define if the compiler supports ISO C++ standard library */
#undef HAVE_STD

/* define if the compiler supports Standard Template Library */
#undef HAVE_STL

/* define if the compiler supports System V math library */
#undef HAVE_SYSTEM_V_MATH

/* define if the compiler supports basic templates */
#undef HAVE_TEMPLATES

/* define if the compiler supports templates as template arguments */
#undef HAVE_TEMPLATES_AS_TEMPLATE_ARGUMENTS

/* define if the compiler supports use of the template keyword as a qualifier
   */
#undef HAVE_TEMPLATE_KEYWORD_QUALIFIER

/* define if the compiler supports template-qualified base class specifiers */
#undef HAVE_TEMPLATE_QUALIFIED_BASE_CLASS

/* define if the compiler supports template-qualified return types */
#undef HAVE_TEMPLATE_QUALIFIED_RETURN_TYPE

/* define if the compiler supports function matching with argument types which
   are template scope-qualified */
#undef HAVE_TEMPLATE_SCOPED_ARGUMENT_MATCHING

/* define if the compiler recognizes typename */
#undef HAVE_TYPENAME

/* define if the compiler supports the vector type promotion mechanism */
#undef HAVE_TYPE_PROMOTION

/* define if the compiler supports numeric traits promotions */
#undef HAVE_USE_NUMTRAIT

/* define if the compiler has valarray<T> */
#undef HAVE_VALARRAY

/* define if the compiler has isnan function in namespace std */
#undef ISNAN_IN_NAMESPACE_STD

/* define if the compiler has C math functions in namespace std */
#undef MATH_FN_IN_NAMESPACE_STD

/* Name of package */
#undef PACKAGE

/* Define to the address where bug reports for this package should be sent. */
#undef PACKAGE_BUGREPORT

/* Define to the full name of this package. */
#undef PACKAGE_NAME

/* Define to the full name and version of this package. */
#undef PACKAGE_STRING

/* Define to the one symbol short name of this package. */
#undef PACKAGE_TARNAME

/* Define to the version of this package. */
#undef PACKAGE_VERSION

/* Version number of package */
#undef VERSION

/* CXX */
#undef _compiler_name

/* CXXFLAGS */
#undef _compiler_options

/* date */
#undef _config_date

/* uname -a */
#undef _os_name

/* target */
#undef _platform
