# Note that in maintenance branches, all build dependencies should
# have an upper bound equal to the most recent already-released version
# of the dependency. This to prevent that a future backwards-incompatible
# release will break the source build of a SciPy release.
# Do accept micro (bug-fix) releases. So for example, if pybind11 2.4.3 is
# the most recent version on PyPI:
#
#     "pybind11>=2.4.3,<2.5.0",
#
# Upper bounds in release branches must have notes on why they are added.
# Distro packages can ignore upper bounds added only to prevent future
# breakage; if we add pins or bounds because of known problems then they need
# them too.

# Run tools/generate_requirements.txt when making changes to any dependencies

[build-system]
build-backend = 'mesonpy'
requires = [
    "meson-python>=0.15.0",
    "Cython>=3.0.8",        # when updating version, also update check in meson.build
    "pybind11>=2.12.0",     # when updating version, also update check in scipy/meson.build
    "pythran>=0.14.0",

    # numpy requirement for wheel builds for distribution on PyPI - building
    # against 2.x yields wheels that are also compatible with numpy 1.x at
    # runtime.
    # Note that building against numpy 1.x works fine too - users and
    # redistributors can do this by installing the numpy version they like and
    # disabling build isolation.
    "numpy>=2.0.0rc1",
]

[project]
name = "scipy"
version = "1.15.0.dev0"
# TODO: add `license-files` once PEP 639 is accepted (see meson-python#88)
#       at that point, no longer include them in `py3.install_sources()`
license = { file = "LICENSE.txt" }
description = "Fundamental algorithms for scientific computing in Python"
maintainers = [
    { name = "SciPy Developers", email = "scipy-dev@python.org" },
]
# Note: Python and NumPy upper version bounds should be set correctly in
# release branches, see:
#     https://scipy.github.io/devdocs/dev/core-dev/index.html#version-ranges-for-numpy-and-other-dependencies
requires-python = ">=3.10"
dependencies = ["numpy>=1.23.5"]  # keep in sync with `min_numpy_version` in meson.build
readme = "README.rst"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: C",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries",
    "Topic :: Scientific/Engineering",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
]

[project.optional-dependencies]
test = [
    "pytest",
    "pytest-cov",
    "pytest-timeout",
    "pytest-xdist",
    "asv",
    "mpmath",
    "gmpy2",
    "threadpoolctl",
    "scikit-umfpack",
    "pooch",
    "hypothesis>=6.30",
    "array-api-strict",
    "Cython",
    "meson",
    'ninja; sys_platform != "emscripten"',
]
doc = [
    "sphinx>=5.0.0",
    "intersphinx_registry",
    "pydata-sphinx-theme>=0.15.2",
    "sphinx-design>=0.4.0",
    "matplotlib>=3.5",
    "numpydoc",
    "jupytext",
    "myst-nb",
    "pooch",
    "jupyterlite-sphinx>=0.13.1",
    "jupyterlite-pyodide-kernel",
]
dev = [
    "mypy==1.10.0",
    "typing_extensions",
    "types-psutil",
    "pycodestyle",
    "ruff>=0.0.292",
    "cython-lint>=0.12.2",
    "rich-click",
    "doit>=0.36.0",
    "pydevtool",
]

[project.urls]
homepage = "https://scipy.org/"
documentation = "https://docs.scipy.org/doc/scipy/"
source = "https://github.com/scipy/scipy"
download = "https://github.com/scipy/scipy/releases"
tracker = "https://github.com/scipy/scipy/issues"

[tool.doit]
dodoFile = "dev.py"


[tool.cibuildwheel]
skip = "cp36-* cp37-* cp38-* pp* *_ppc64le *_i686 *_s390x"
# gmpy2 and scikit-umfpack are usually added for testing. However, there are
# currently wheels missing that make the test script fail.
test-requires = [
    "pytest",
    "pytest-cov",
    "pytest-xdist",
    "mpmath",
    "threadpoolctl",
    "pooch",
    "hypothesis",
]
before-test = "bash {project}/tools/wheels/cibw_before_test.sh {project}"
test-command = "bash {project}/tools/wheels/cibw_test_command.sh {project}"

[tool.cibuildwheel.linux]
manylinux-x86_64-image = "manylinux2014"
manylinux-aarch64-image = "manylinux2014"
before-build = "bash {project}/tools/wheels/cibw_before_build_linux.sh {project}"

[tool.cibuildwheel.linux.environment]
# /project will be the $PWD equivalent inside the docker used to build the wheel
PKG_CONFIG_PATH="/project/"

[tool.cibuildwheel.macos]
before-build = "bash {project}/tools/wheels/cibw_before_build_macos.sh {project}"

[tool.cibuildwheel.macos.environment]
PKG_CONFIG_PATH="{project}"

[tool.cibuildwheel.windows]
before-build = "bash {project}/tools/wheels/cibw_before_build_win.sh {project}"
repair-wheel-command = "bash ./tools/wheels/repair_windows.sh {wheel} {dest_dir}"

[tool.cibuildwheel.windows.environment]
# This does not work because pkg-config does not like backslashes,
PKG_CONFIG_PATH="{project}"
# do this instead (which will override this setting)
# set CIBW_ENVIRONMENT_WINDOWS=PKG_CONFIG_PATH=PWD.replace('\\', '/')
