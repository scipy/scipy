# Note that in maintenance branches, all build dependencies should
# have an upper bound equal to the most recent already-released version
# of the dependency. This to prevent that a future backwards-incompatible
# release will break the source build of a SciPy release.
# Do accept micro (bug-fix) releases. So for example, if pybind11 2.4.3 is
# the most recent version on PyPI:
#
#     "pybind11>=2.4.3,<2.5.0",

[build-system]
build-backend = 'mesonpy'
requires = [
    "meson-python>=0.14.0",
    "Cython>=0.29.35",  # when updating version, also update check in meson.build
    "pybind11>=2.10.4",
    "pythran>=0.14.0",

    # When numpy 2.0.0rc1 comes out, we should update this to build against 2.0,
    # and then runtime depend on the range 1.22.X to <2.3. No need to switch to
    # 1.25.2 in the meantime (1.25.x is the first version which exports older C
    # API versions by default).

    # default numpy requirements
    "numpy==1.22.4; python_version<='3.10' and platform_python_implementation != 'PyPy'",
    "numpy==1.23.2; python_version=='3.11' and platform_python_implementation != 'PyPy'",
    # For Python versions which aren't yet officially supported, we specify an
    # unpinned NumPy which allows source distributions to be used and allows
    # wheels to be used as soon as they become available.
    "numpy>=1.26.0b1; python_version>='3.12'",
    "numpy; python_version>='3.9' and platform_python_implementation=='PyPy'",
]

[project]
name = "SciPy"
version = "1.12.0.dev0"
# TODO: add `license-files` once PEP 639 is accepted (see meson-python#88)
#       at that point, no longer include them in `py3.install_sources()`
license = {file = "LICENSE.txt"}
description = "Fundamental algorithms for scientific computing in Python"
maintainers = [
    {name = "SciPy Developers", email = "scipy-dev@python.org"},
]
# Note: Python and NumPy upper version bounds should be set correctly in
# release branches, see:
#     https://scipy.github.io/devdocs/dev/core-dev/index.html#version-ranges-for-numpy-and-other-dependencies
requires-python = ">=3.9"
dependencies = [
    # TODO: update to "pin-compatible" once possible, see
    # https://github.com/mesonbuild/meson-python/issues/29
    "numpy>=1.22.4",
]
readme = "README.rst"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: C",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries",
    "Topic :: Scientific/Engineering",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
]

[project.optional-dependencies]
test = [
    "pytest",
    "pytest-cov",
    "pytest-timeout",
    "pytest-xdist",
    "asv",
    "mpmath",
    "gmpy2",
    "threadpoolctl",
    "scikit-umfpack",
    "pooch",
    "hypothesis",
]
doc = [
    "sphinx!=4.1.0",
    "pydata-sphinx-theme==0.9.0",
    "sphinx-design>=0.2.0",
    "matplotlib>2",
    "numpydoc",
    "jupytext",
    "myst-nb",
    "pooch",
]
dev = [
    "mypy",
    "typing_extensions",
    "types-psutil",
    "pycodestyle",
    "ruff",
    "cython-lint>=0.12.2",
    "rich-click",
    "click",
    "doit>=0.36.0",
    "pydevtool",
]

[project.urls]
homepage = "https://scipy.org/"
documentation = "https://docs.scipy.org/doc/scipy/"
source = "https://github.com/scipy/scipy"
download = "https://github.com/scipy/scipy/releases"
tracker = "https://github.com/scipy/scipy/issues"

[tool.doit]
dodoFile = "dev.py"


[tool.cibuildwheel]
skip = "cp36-* cp37-* cp38-* pp* *_ppc64le *_i686 *_s390x"
build-verbosity = "3"
# gmpy2 and scikit-umfpack are usually added for testing. However, there are
# currently wheels missing that make the test script fail.
test-requires = ["pytest", "pytest-cov", "pytest-xdist", "mpmath", "threadpoolctl", "pooch", "hypothesis"]
test-command = "bash {project}/tools/wheels/cibw_test_command.sh {project}"

[tool.cibuildwheel.linux]
manylinux-x86_64-image = "manylinux2014"
manylinux-aarch64-image = "manylinux2014"
before-build = "bash {project}/tools/wheels/cibw_before_build_linux.sh {project}"

[tool.cibuildwheel.macos]
before-build = "bash {project}/tools/wheels/cibw_before_build_macos.sh {project}"

[tool.cibuildwheel.windows]
before-build = "bash {project}/tools/wheels/cibw_before_build_win.sh {project}"
repair-wheel-command = "bash ./tools/wheels/repair_windows.sh {wheel} {dest_dir}"

[[tool.cibuildwheel.overrides]]
select = "*-win32"

[[tool.cibuildwheel.overrides]]
select = "*-win_amd64"
# can use pkg-config detection for win_amd64 because the installed rtools
# provide a working pkg-config.
# An alternative is to set CMAKE_PREFIX_PATH="c:/opt/openblas/if_32/32"
# Don't use double backslash for path separators, they don't get passed
# to the build correctly
# environment = { CMAKE_PREFIX_PATH="c:/opt/64" }
environment = { PKG_CONFIG_PATH="c:/opt/64/lib/pkgconfig" }
