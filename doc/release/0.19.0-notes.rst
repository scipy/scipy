==========================
SciPy 0.19.0 Release Notes
==========================

.. note:: Scipy 0.19.0 is not released yet!

.. contents::

SciPy 0.19.0 is the culmination of X months of hard work. It contains
many new features, numerous bug-fixes, improved test coverage and
better documentation.  There have been a number of deprecations and
API changes in this release, which are documented below.  All users
are encouraged to upgrade to this release, as there are a large number
of bug-fixes and optimizations.  Moreover, our development attention
will now shift to bug-fix releases on the 0.20.x branch, and on adding
new features on the master branch.

This release requires Python 2.7 or 3.4-3.5 and NumPy 1.7.1 or greater.



New features
============

`scipy.ndimage` improvements
----------------------------

The callback function C API supports PyCapsules in Python 2.7

`scipy.optimize` improvements
-----------------------------

The `scipy.optimize.basinhopping` global minimizer obtained a new keyword,
`seed`, which can be used to seed the random number generator and obtain
repeatable minimizations.

The keyword `sigma` in `scipy.optimize.curve_fit` was overloaded to also accept
the covariance matrix of errors in the data.

`scipy.signal` improvements
---------------------------

The function `scipy.signal.sosfreqz` was added to compute the frequency
response from second-order sections.

The function `scipy.signal.unit_impulse` was added to conveniently
generate an impulse function.

The function `scipy.signal.irrnotch` was added to design second-order
IIR notch filters that can be used to remove a frequency component from
a signal. The dual function  `scipy.signal.irrpeak` was added to
compute the coeficients of a second-order IIR peak (resonant) filter.

`scipy.sparse` improvements
---------------------------

The functions `scipy.sparse.save_npz` and `scipy.sparse.load_npz` were added,
providing simple serialization for some sparse formats.

`scipy.special` improvements
----------------------------

The new family of functions `scipy.special.weight_*` calculate the
weight functions of orthogonal polynomials. For example,
`scipy.special.weight_jacobi` computes the weight function of Jacobi
polynomials.

Deprecated features
===================

The functions `scipy.special.legendre`, `scipy.special.chebyt`,
`scipy.special.chebyu`, `scipy.special.chebyc`,
`scipy.special.chebys`, `scipy.special.jacobi`,
`scipy.special.laguerre`, `scipy.special.genlaguerre`,
`scipy.special.hermite`, `scipy.special.hermitenorm`,
`scipy.special.gegenbauer`, `scipy.special.sh_legendre`,
`scipy.special.sh_chebyt`, `scipy.special.sh_chebyu`, and
`scipy.special.sh_jacobi` have been deprecated and their functionality
has been split into separate functions. For example if you want to
evaluate Jacobi polynomials then you should use `eval_jacobi`. If you
want to get roots and quadrature weights of Jacobi polynomials you
should use `roots_jacobi`. If you want to get the weight function of
Jacobi polynomials you should use `weight_jacobi`.

The old family of functions `scipy.special.*_roots` for calculating
the roots and weights of orthogonal polynomials has been deprecated,
and new versions have been created that are consistent with naming
conventions for orthogonal polynomials elsewhere in the module. For
example, the old function `scipy.special.j_roots` for getting the
roots and quadrature weights of Jacobi polynomials should now be
accessed though `scipy.special.roots_jacobi`. Note that although the
`scipy.special.*_roots` functions are deprecated, there are currently
no plans to remove them.

Backwards incompatible changes
==============================



Other changes
=============




Authors
=======




Issues closed for 0.19.0
------------------------


Pull requests for 0.19.0
------------------------

