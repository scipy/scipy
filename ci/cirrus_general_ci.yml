# Regular CI for testing musllinux, linux_aarch64 and macosx_arm64 natively
# This only runs if cirrus is not building wheels. The rationale is that
# cibuildwheel also runs tests during the wheel build process, so there's no need
# to have duplication.

modified_clone: &MODIFIED_CLONE
  # makes sure that for a PR the CI runs against a merged main
  clone_script: |
    if [ -z "$CIRRUS_PR" ]; then
      # if you're not in a PR then clone against the branch name that was pushed to.
      git clone --recursive --branch=$CIRRUS_BRANCH https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR
      git reset --hard $CIRRUS_CHANGE_IN_REPO
    else
      # it's a PR so clone the main branch then merge the changes from the PR
      git clone https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR
      git fetch origin pull/$CIRRUS_PR/head:pull/$CIRRUS_PR
    
      # CIRRUS_BASE_BRANCH will probably be `main` for the majority of the time
      # However, if you do a PR against a maintenance branch we will want to
      # merge the PR into the maintenance branch, not main
      git checkout $CIRRUS_BASE_BRANCH

      # alpine git package needs default user.name and user.email to be set before a merge
      git -c user.email="you@example.com" merge --no-commit pull/$CIRRUS_PR
      git submodule update --init --recursive
    fi


linux_aarch64_test_task:
  compute_engine_instance:
    image_project: cirrus-images
    image: family/docker-builder-arm64
    architecture: arm64
    platform: linux
    cpu: 1
    memory: 4G

  <<: *MODIFIED_CLONE

  ccache_cache:
    folder: .ccache
    populate_script:
      - mkdir -p .ccache
    fingerprint_key: ccache-linux_aarch64

  pip_cache:
    folder: /root/.cache/pip

  prepare_env_script: |
    apt-get update
    apt-get install -y --no-install-recommends software-properties-common gcc g++ gfortran pkg-config
    apt-get install -y --no-install-recommends libopenblas-dev libatlas-base-dev liblapack-dev ccache

    # When this task was written the linux image used ubuntu:jammy, for which
    # python3.10 is the default. If required different versions can be
    # installed using the deadsnakes apt repository.
    # add-apt-repository -y ppa:deadsnakes/ppa
    # apt-get update
    # DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata

    apt-get install -y python3.10 python3.10-venv
    # python3.10 -m ensurepip --default-pip --user

    ln -s $(which python3.10) python
    export PATH=/usr/lib/ccache:$PWD:$PATH
    echo "PATH=$PATH" >> $CIRRUS_ENV
    echo "CCACHE_DIR=$PWD/.ccache" >> $CIRRUS_ENV

    python -m pip install meson ninja numpy cython pybind11 pythran cython
    python -m pip install click rich_click doit pydevtool
    python -m pip install pytest pooch pytest-xdist hypothesis
    
    # this line tells us where the task keeps its pip cache. 
    # It may change over time!
    echo $(python -m pip cache dir)
    echo $(python -m pip cache list)

  build_script: |
    python dev.py build -j1

  test_script: |
    python dev.py test -j1
    ccache -s


macos_arm64_test_task:
  depends_on:
    - linux_aarch64_test
  macos_instance:
    image: ghcr.io/cirruslabs/macos-monterey-xcode:latest

  <<: *MODIFIED_CLONE

  ccache_cache:
    folder: .ccache
    populate_script:
      - mkdir -p .ccache
    fingerprint_key: ccache-macosx_arm64

  pip_cache:
    folder: /Users/admin/Library/Caches/pip

  prepare_env_script: |
    brew install python@3.10 ccache

    export PATH=/opt/homebrew/opt/python@3.10/libexec/bin:$PATH
    export PATH=/opt/homebrew/opt/ccache/libexec:$PATH
    export PYTHONPATH=/opt/homebrew/lib/python3.10/site-packages
    
    echo "PYTHONPATH=$PYTHONPATH" >> $CIRRUS_ENV
    echo "_CWD=$PWD" >> $CIRRUS_ENV
    echo "PATH=$PATH" >> $CIRRUS_ENV

    python --version

    # used for installing OpenBLAS/gfortran
    bash tools/wheels/cibw_before_build_macos.sh $PWD
    echo "DYLD_LIBRARY_PATH=/usr/local/gfortran/lib:/opt/arm64-builds/lib" >> $CIRRUS_ENV

    echo "PKG_CONFIG_PATH=/opt/arm64-builds/lib/pkgconfig" >> $CIRRUS_ENV
    echo "CMAKE_PREFIX_PATH=/opt/arm64-builds/" >> $CIRRUS_ENV
    # export CCACHE_DIR=$PWD/.ccache
    
    cd ..
    python -m venv test_env
    source test_env/bin/activate
    cd $_CWD

    python -m pip install meson ninja numpy cython pybind11 pythran cython
    python -m pip install click rich_click doit pydevtool
    python -m pip install pytest pooch pytest-xdist hypothesis
    
    # this line tells us where the task keeps its pip cache. 
    # It may change over time!
    echo $(python -m pip cache dir)
    echo $(python -m pip cache list)

  build_script: |
    cd ..
    source test_env/bin/activate
    cd $_CWD
    python dev.py build
    # ccache -s

  test_script: |
    cd ..
    source test_env/bin/activate
    cd $_CWD
    python dev.py test
