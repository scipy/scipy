build_and_store_wheels: &BUILD_AND_STORE_WHEELS
  install_cibuildwheel_script:
    - python -m pip install cibuildwheel==2.20.0
  cibuildwheel_script:
    - cibuildwheel
  wheels_artifacts:
    path: "wheelhouse/*"


######################################################################
# Build linux_aarch64 natively
######################################################################

cirrus_wheels_linux_aarch64_task:
  compute_engine_instance:
    image_project: cirrus-images
    image: family/docker-builder-arm64
    architecture: arm64
    platform: linux
    cpu: 2
    memory: 4G
  matrix:
    # build in a matrix because building and testing all four wheels in a
    # single task takes longer than 60 mins (the default time limit for a
    # cirrus-ci task).
    - env:
        CIBW_BUILD: cp313-manylinux* cp310-manylinux*
    - env:
        CIBW_BUILD: cp311-manylinux* cp312-manylinux*
  env:
    CIBW_PRERELEASE_PYTHONS: True
    # The following settings are useful when targetting an unreleased Python version.
    #CIBW_BEFORE_BUILD_LINUX: "pip install numpy>=2.0.0.dev0 meson-python cython pythran pybind11 ninja;bash {project}/tools/wheels/cibw_before_build_linux.sh {project}"
    #CIBW_ENVIRONMENT: >
    #  PIP_PRE=1
    #  PIP_EXTRA_INDEX_URL=https://pypi.anaconda.org/scientific-python-nightly-wheels/simple
    #  PIP_NO_BUILD_ISOLATION=false

  build_script: |
    apt install -y python3-venv python-is-python3
    which python
    echo $CIRRUS_CHANGE_MESSAGE
    # needed for submodules
    git submodule update --init
  <<: *BUILD_AND_STORE_WHEELS


######################################################################
# Upload all wheels
######################################################################

cirrus_wheels_upload_task:
  # Artifacts don't seem to be persistent from task to task.
  # Rather than upload wheels at the end of each cibuildwheel run we do a
  # final upload here. This is because a run may be on different OS for
  # which bash, etc, may not be present.
  depends_on:
    - cirrus_wheels_linux_aarch64
  compute_engine_instance:
    image_project: cirrus-images
    image: family/docker-builder
    platform: linux

  env:
    # created as SCIPY_STAGING_UPLOAD_TOKEN_CIRRUS and SCIPY_NIGHTLY_UPLOAD_TOKEN_CIRRUS (will expire 2028/07/08)
    SCIPY_STAGING_UPLOAD_TOKEN: ENCRYPTED[!47775a024e7cd7a9bfc2dfcb0ac5ce3e22e5aac44e7a88ddf9008c0aa27b38f92b63014e50395c9d3cd355224be014d0!]
    SCIPY_NIGHTLY_UPLOAD_TOKEN: ENCRYPTED[!818fdb1d46f9e75ca3a810c8905bfa0f8742090cba34869d4b113ee01cecf4d93cd96102c53274ed5003f79d8f42775b!]

  upload_script: |
    export IS_SCHEDULE_DISPATCH="false"
    export IS_PUSH="false"

    # cron job
    if [[ "$CIRRUS_CRON" == "nightly" ]]; then
      export IS_SCHEDULE_DISPATCH="true"
    fi

    # If it's a push event to a maintenance branch, and the commit message contains
    # '[wheel build]' then upload to staging
    COMMIT_MSG=$(git log --no-merges -1)
    if [[ "$COMMIT_MSG" == *"[wheel build]"* ]] && [[ $CIRRUS_BRANCH == maintenance* ]]; then
          export IS_PUSH="true"
    fi
    
    if [[ $IS_PUSH == "true" ]] || [[ $IS_SCHEDULE_DISPATCH == "true" ]]; then
        apt-get update
        apt-get install -y curl wget

        # install miniforge in the home directory. For some reason HOME isn't set by Cirrus
        export HOME=$PWD
        
        # install miniforge for uploading to anaconda
        wget -O Miniforge3.sh "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh"
        bash Miniforge3.sh -b -p "${HOME}/miniforge"
        $HOME/miniforge/bin/conda init bash
        source $HOME/miniforge/bin/activate
        conda install -y anaconda-client
        
        # The name of the zip file is derived from the `wheels_artifact` line.
        # If you change the artifact line to `myfile_artifact` then it would be
        # called myfile.zip
        
        curl https://api.cirrus-ci.com/v1/artifact/build/$CIRRUS_BUILD_ID/wheels.zip --output wheels.zip
        unzip wheels.zip
        
        source tools/wheels/upload_wheels.sh
        set_upload_vars
        # For cron jobs (restricted to main branch)
        # an upload to:
        #
        # https://anaconda.org/scientific-python-nightly-wheels/scipy
        # 
        # Pushes to a maintenance branch that contain '[wheel build]' will
        # cause wheels to be built and uploaded to:
        #
        # https://anaconda.org/multibuild-wheels-staging/scipy
        #
        # The tokens were originally generated at anaconda.org
        upload_wheels
    fi
