build_and_store_wheels: &BUILD_AND_STORE_WHEELS
  install_cibuildwheel_script:
    - python -m pip install cibuildwheel==2.17.0
  cibuildwheel_script:
    - cibuildwheel
  wheels_artifacts:
    path: "wheelhouse/*"


######################################################################
# Build linux_aarch64 natively
######################################################################

cirrus_wheels_linux_aarch64_task:
  compute_engine_instance:
    image_project: cirrus-images
    image: family/docker-builder-arm64
    architecture: arm64
    platform: linux
    cpu: 2
    memory: 4G
  matrix:
    # build in a matrix because building and testing all four wheels in a
    # single task takes longer than 60 mins (the default time limit for a
    # cirrus-ci task).
    - env:
        CIBW_BUILD: cp310-manylinux*
    - env:
        CIBW_BUILD: cp311-manylinux* cp312-manylinux*
  env:
    CIBW_PRERELEASE_PYTHONS: True
    # TODO remove the CIBW_BEFORE_BUILD_LINUX line once there are numpy2.0 wheels available on PyPI.
    # Also remove/comment out PIP_NO_BUILD_ISOLATION, PIP_EXTRA_INDEX_URL flags.
    CIBW_BEFORE_BUILD_LINUX: "pip install numpy>=2.0.0.dev0 meson-python cython pythran pybind11 ninja;bash {project}/tools/wheels/cibw_before_build_linux.sh {project}"
    CIBW_ENVIRONMENT: >
      PIP_PRE=1
      PIP_EXTRA_INDEX_URL=https://pypi.anaconda.org/scientific-python-nightly-wheels/simple
      PIP_NO_BUILD_ISOLATION=false
      PKG_CONFIG_PATH=/project

  build_script: |
    apt install -y python3-venv python-is-python3
    which python
    echo $CIRRUS_CHANGE_MESSAGE
    # needed for submodules
    git submodule update --init
  <<: *BUILD_AND_STORE_WHEELS


######################################################################
# Upload all wheels
######################################################################

cirrus_wheels_upload_task:
  # Artifacts don't seem to be persistent from task to task.
  # Rather than upload wheels at the end of each cibuildwheel run we do a
  # final upload here. This is because a run may be on different OS for
  # which bash, etc, may not be present.
  depends_on:
    - cirrus_wheels_linux_aarch64
  compute_engine_instance:
    image_project: cirrus-images
    image: family/docker-builder
    platform: linux

  env:
    # created as SCIPY_STAGING_UPLOAD_TOKEN_CIRRUS and SCIPY_NIGHTLY_UPLOAD_TOKEN_CIRRUS
    SCIPY_STAGING_UPLOAD_TOKEN: ENCRYPTED[5940af5e589adf1647fb2832be2c912812de22b5b6551d93e177600da69b2103ffdf0ee1cf16671cf5e76f69a966bc30]
    SCIPY_NIGHTLY_UPLOAD_TOKEN: ENCRYPTED[6e711cf90dfcf0e901f16a0be0bbc22b555ce6591cf60cb96e7edf133a7c7d42df5b9c3d7d4352d686756dc00f5c222a]

  upload_script: |
    export IS_SCHEDULE_DISPATCH="false"
    export IS_PUSH="false"

    # cron job
    if [[ "$CIRRUS_CRON" == "nightly" ]]; then
      export IS_SCHEDULE_DISPATCH="true"
    fi

    # If it's a push event to a maintenance branch, and the commit message contains
    # '[wheel build]' then upload to staging
    COMMIT_MSG=$(git log --no-merges -1)
    if [[ "$COMMIT_MSG" == *"[wheel build]"* ]] && [[ $CIRRUS_BRANCH == maintenance* ]]; then
          export IS_PUSH="true"
    fi
    
    if [[ $IS_PUSH == "true" ]] || [[ $IS_SCHEDULE_DISPATCH == "true" ]]; then
        apt-get update
        apt-get install -y curl wget

        # install miniconda in the home directory. For some reason HOME isn't set by Cirrus
        export HOME=$PWD
        
        # install miniconda for uploading to anaconda
        wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
        bash miniconda.sh -b -p $HOME/miniconda3
        $HOME/miniconda3/bin/conda init bash
        source $HOME/miniconda3/bin/activate
        conda install -y anaconda-client
        
        # The name of the zip file is derived from the `wheels_artifact` line.
        # If you change the artifact line to `myfile_artifact` then it would be
        # called myfile.zip
        
        curl https://api.cirrus-ci.com/v1/artifact/build/$CIRRUS_BUILD_ID/wheels.zip --output wheels.zip
        unzip wheels.zip
        
        source tools/wheels/upload_wheels.sh
        set_upload_vars
        # For cron jobs (restricted to main branch)
        # an upload to:
        #
        # https://anaconda.org/scientific-python-nightly-wheels/scipy
        # 
        # Pushes to a maintenance branch that contain '[wheel build]' will
        # cause wheels to be built and uploaded to:
        #
        # https://anaconda.org/multibuild-wheels-staging/scipy
        #
        # The tokens were originally generated at anaconda.org
        upload_wheels
    fi
