build_and_store_wheels: &BUILD_AND_STORE_WHEELS
  install_cibuildwheel_script:
    - python -m pip install cibuildwheel==2.11.3
  cibuildwheel_script:
    - cibuildwheel
  wheels_artifacts:
    path: "wheelhouse/*"


######################################################################
# Build linux_aarch64 natively
######################################################################

cirrus_wheels_linux_aarch64_task:
  compute_engine_instance:
    image_project: cirrus-images
    image: family/docker-builder-arm64
    architecture: arm64
    platform: linux
    cpu: 4
    memory: 8G
  matrix:
    # build in a matrix because building and testing all four wheels in a
    # single task takes longer than 60 mins (the default time limit for a
    # cirrus-ci task).
    - env:
        CIBW_BUILD: cp38-* cp39-*
    - env:
        CIBW_BUILD: cp310-* cp311-*
  build_script: |
    apt install -y python3-venv python-is-python3
    which python
    echo $CIRRUS_CHANGE_MESSAGE
    # needed for submodules
    git submodule update --init
  <<: *BUILD_AND_STORE_WHEELS


######################################################################
# Build macosx_arm64 natively
######################################################################

cirrus_wheels_macos_arm64_task:
  macos_instance:
    image: ghcr.io/cirruslabs/macos-monterey-xcode:13.3.1
  matrix:
    - env:
        CIBW_BUILD: cp38-*
        CIBW_BEFORE_ALL: bash tools/wheels/cibw_before_all_cp38_macosx_arm64.sh
    - env:
        CIBW_BUILD: cp39-*
    - env:
        CIBW_BUILD: cp310-* cp311-*
  env:
    PATH: /opt/homebrew/opt/python@3.10/bin:$PATH
    CIBW_ENVIRONMENT: MACOSX_DEPLOYMENT_TARGET=12.0 _PYTHON_HOST_PLATFORM="macosx-12.0-arm64"
    PKG_CONFIG_PATH: /opt/arm64-builds/lib/pkgconfig
    # assumes that the cmake config is in /usr/local/lib/cmake
    CMAKE_PREFIX_PATH: /opt/arm64-builds/
    REPAIR_PATH: /usr/local/gfortran/lib:/opt/arm64-builds/lib
    CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
      DYLD_LIBRARY_PATH=/usr/local/gfortran/lib:/opt/arm64-builds/lib delocate-listdeps {wheel} &&
      DYLD_LIBRARY_PATH=/usr/local/gfortran/lib:/opt/arm64-builds/lib delocate-wheel --require-archs {delocate_archs} -w {dest_dir} {wheel}

  install_pre_requirements_script:
    - brew install python@3.10
    - ln -s python3 /opt/homebrew/opt/python@3.10/bin/python

  build_script:
    - which python
    # needed for submodules
    - git submodule update --init
    - uname -m
    - python -c "import platform;print(platform.python_version());print(platform.system());print(platform.machine())"
    - clang --version
  <<: *BUILD_AND_STORE_WHEELS


######################################################################
# Upload all wheels
######################################################################

cirrus_wheels_upload_task:
  # Artifacts don't seem to be persistent from task to task.
  # Rather than upload wheels at the end of each cibuildwheel run we do a
  # final upload here. This is because a run may be on different OS for
  # which bash, etc, may not be present.
  depends_on:
    - cirrus_wheels_linux_aarch64
    - cirrus_wheels_macos_arm64
  compute_engine_instance:
    image_project: cirrus-images
    image: family/docker-builder
    platform: linux

  env:
    # created as SCIPY_STAGING_UPLOAD_TOKEN_CIRRUS and SCIPY_NIGHTLY_UPLOAD_TOKEN_CIRRUS
    SCIPY_STAGING_UPLOAD_TOKEN: ENCRYPTED[5940af5e589adf1647fb2832be2c912812de22b5b6551d93e177600da69b2103ffdf0ee1cf16671cf5e76f69a966bc30]
    SCIPY_NIGHTLY_UPLOAD_TOKEN: ENCRYPTED[377be83afdaf9e8fa8bac105022bb1d362f72fff8501c2b5e827018b82270111828fb542fd7bd56bbfac9745603bd535]

  upload_script: |
    apt-get install -y python3-venv python-is-python3 curl
    export IS_SCHEDULE_DISPATCH="false"
    export IS_PUSH="false"

    # cron job
    if [[ "$CIRRUS_CRON" == "nightly" ]]; then
      export IS_SCHEDULE_DISPATCH="true"
    fi

    # If it's a push event to a maintenance branch, and the commit message contains
    # '[wheel build]' then upload to staging
    COMMIT_MSG=$(git log --no-merges -1)
    if [[ "$COMMIT_MSG" == *"[wheel build]"* ]] && [[ $CIRRUS_BRANCH == maintenance* ]]; then
          export IS_PUSH="true"
    fi
    
    # The name of the zip file is derived from the `wheels_artifact` line.
    # If you change the artifact line to `myfile_artifact` then it would be
    # called myfile.zip
    
    curl https://api.cirrus-ci.com/v1/artifact/build/$CIRRUS_BUILD_ID/wheels.zip --output wheels.zip
    unzip wheels.zip
    
    source tools/wheels/upload_wheels.sh
    set_upload_vars
    # For cron jobs (restricted to main branch)
    # an upload to:
    #
    # https://anaconda.org/scipy-wheels-nightly/scipy
    # 
    # Pushes to a maintenance branch that contain '[wheel build]' will
    # cause wheels to be built and uploaded to:
    #
    # https://anaconda.org/multibuild-wheels-staging/scipy
    #
    # The tokens were originally generated at anaconda.org
    upload_wheels
