version: 2
jobs:
  build_docs:
    docker:
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/python:3.7.0

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: update submodules
          command: |
            git submodule init
            git submodule update

      - run:
          name: install Debian dependencies
          command: |
            sudo apt-get update
            sudo apt-get install libatlas-dev libatlas-base-dev liblapack-dev gfortran libgmp-dev libmpfr-dev libfreetype6-dev libpng-dev zlib1g zlib1g-dev texlive-fonts-recommended texlive-latex-recommended texlive-latex-extra texlive-generic-extra latexmk texlive-xetex

      - run:
          name: setup Python venv
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --install-option="--no-cython-compile" cython
            pip install numpy
            pip install nose mpmath argparse Pillow codecov matplotlib Sphinx

      - run:
          name: build docs
          command: |
            . venv/bin/activate
            export SHELL=$(which bash)
            python -u runtests.py -g --shell -- -c 'make -C doc PYTHON=python html-scipyorg latex'
            make -C doc/build/latex all-pdf LATEXOPTS="-file-line-error -halt-on-error"
            cp -f doc/build/latex/scipy-ref.pdf doc/build/html-scipyorg/

      - store_artifacts:
          path: doc/build/html-scipyorg
          destination: html-scipyorg

      - persist_to_workspace:
          root: doc/build
          paths:
            - html-scipyorg


# Upload build output to scipy/devdocs repository, using SSH deploy keys.
# The keys are only available for builds on master branch.
# https://developer.github.com/guides/managing-deploy-keys/
# https://circleci.com/docs/2.0/configuration-reference/#add_ssh_keys

  deploy:
    docker:
      - image: circleci/python:3.7.0

    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: /tmp/build

      - add_ssh_keys:
          fingerprints:
            - "08:18:07:68:71:e3:f9:5f:bd:95:f0:6a:df:a9:47:a2"

      - run:
          name: upload
          command: |
            set -e;
            mkdir -p ~/.ssh
            echo -e "Host *\nStrictHostKeyChecking no" > ~/.ssh/config
            chmod og= ~/.ssh/config
            git clone git@github.com:scipy/devdocs.git devdocs;
            cd devdocs;
            (git checkout --orphan tmp && git branch -D gh-pages || true);
            git checkout --orphan gh-pages;
            git reset --hard;
            cp -R /tmp/build/html-scipyorg/. .;
            touch .nojekyll;
            git config --global user.email "scipy-circleci-bot@nomail";
            git config --global user.name "scipy-circleci-bot";
            git config --global push.default simple;
            git add . > /dev/null;
            git commit -m "Docs build of $CIRCLE_SHA1";
            git push --set-upstream origin gh-pages --force


  # Run test suite on pypy3
  pypy3:
    docker:
      # Comment out official image for now, set up the nightly
      # until they release a bugfix
      # https://github.com/numpy/numpy/issues/12740

      # image: pypy:3-6.0.0
      - image: circleci/python:3.7.0
    steps:
      - restore_cache:
          keys:
            - pypy3-nightly-ccache-{{ .Branch }}
            - pypy3-nightly-ccache
      - checkout
      - run:
          name: install libs and set global env vars
          command: |
            sudo apt-get -yq update
            sudo apt-get -yq install libatlas-dev libatlas-base-dev liblapack-dev gfortran ccache
            ccache -M 512M
            echo "export CCACHE_COMPRESS=1" >> $BASH_ENV
            echo "export PATH=/usr/lib/ccache:$PATH" >> $BASH_ENV
      - run:
          name: install nightly
          command: |
            wget http://security.debian.org/debian-security/pool/updates/main/o/openssl/libssl1.0.0_1.0.1t-1+deb8u10_amd64.deb
            sudo dpkg --install libssl1.0.0_1.0.1t-1+deb8u10_amd64.deb
            wget http://buildbot.pypy.org/nightly/py3.6/pypy-c-jit-latest-linux64.tar.bz2 -O pypy.tar.bz2
            mkdir -p pypy3.6-latest
            (cd pypy3.6-latest; tar --strip-components=1 -xf ../pypy.tar.bz2)
            export PATH=${PWD}/pypy3.6-latest/bin:$PATH
            echo "export PATH=${PWD}/pypy3.6/latest/bin:$PATH" >> $BASH_ENV
            pypy3 -mensurepip
      - run:
          name: setup pypy3
          command: |
            export NPY_NUM_BUILD_JOBS=`pypy3 -c 'import multiprocessing as mp; print(mp.cpu_count())'`
            pypy3 -mpip install --upgrade pip setuptools wheel
            pypy3 -mpip install Cython>=0.28.5
            pypy3 -mpip install numpy>=1.15.0
            pypy3 -mpip install --no-build-isolation --extra-index https://antocuni.github.io/pypy-wheels/ubuntu pytest pytest-xdist Tempita mpmath
      - run:
          name: build SciPy
          command: |
            # Limit parallelism for Cythonization to 4 processes, to
            # avoid exceeding CircleCI memory limits
            export SCIPY_NUM_CYTHONIZE_JOBS=4
            export NPY_NUM_BUILD_JOBS=`pypy3 -c 'import multiprocessing as mp; print(mp.cpu_count())'`
            # Less aggressive optimization flags for faster compilation
            OPT="-O1" FOPT="-O1" pypy3 setup.py build
      - save_cache:
          key: pypy3-nightly-ccache-{{ .Branch }}-{{ .BuildNum }}
          paths:
            - ~/.ccache
            - ~/.cache/pip
      - run:
          name: test
          command: |
            # CircleCI has 4G memory limit, play it safe
            export SCIPY_AVAILABLE_MEM=1G
            # Try to limit per-process GC memory usage
            export PYPY_GC_MAX=900MB
            pypy3 runtests.py -- -rfEX -n 3 --durations=30


workflows:
  version: 2
  default:
    jobs:
      - build_docs
      - deploy:
          requires:
            - build_docs

          filters:
            branches:
              only: master
      - pypy3
