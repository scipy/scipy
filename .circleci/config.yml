version: 2.1

# Aliases to reuse
_defaults: &defaults
  docker:
    # CircleCI maintains a library of pre-built images
    # documented at https://circleci.com/docs/2.0/circleci-images/
    - image: cimg/python:3.8
  working_directory: ~/repo

commands:
  check-skip:
    steps:
      - run:
          name: Check-skip
          command: |
            if [ ! -d "scipy" ]; then
              echo "Build was not run due to skip, exiting job ${CIRCLE_JOB} for PR ${CIRCLE_PULL_REQUEST}."
              circleci-agent step halt;
            fi

            export git_log=$(git log --max-count=1 --pretty=format:"%B" | tr "\n" " ")
            echo "Got commit message:"
            echo "${git_log}"
            if [[ -v CIRCLE_PULL_REQUEST ]] && ([[ "$git_log" == *"[skip circle]"* ]] || [[ "$git_log" == *"[circle skip]"* ]]); then
              echo "Skip detected, exiting job ${CIRCLE_JOB} for PR ${CIRCLE_PULL_REQUEST}."
              circleci-agent step halt;
            fi

  apt-install:
    steps:
      - run:
          name: Install apt packages
          command: |
            sudo apt-get update
            sudo apt-get install libopenblas-dev gfortran libgmp-dev libmpfr-dev ccache

  merge:
    steps:
      - run:
          name: merge with upstream
          command: |
            echo $(git log -1 --pretty=%B) | tee gitlog.txt
            echo ${CI_PULL_REQUEST//*pull\//} | tee merge.txt
            if [[ $(cat merge.txt) != "" ]]; then
              echo "Merging $(cat merge.txt)";
              git remote add upstream https://github.com/scipy/scipy.git;
              git pull --ff-only upstream "refs/pull/$(cat merge.txt)/merge";
              git fetch upstream main;
            fi

jobs:
# Build SciPy from source
  build_scipy:
    <<: *defaults
    steps:
      - checkout
      - check-skip
      - merge

      - apt-install

      - run:
          name: update submodules
          command: |
            git submodule init
            git submodule update

      - restore_cache:
          keys:
              - deps_ccache-{{ .Branch }}
              - deps_ccache

      - run:
          name: setup Python venv
          command: |
            pip install --install-option="--no-cython-compile" cython
            pip install numpy==1.21.5
            pip install -r doc_requirements.txt
            # `asv` pin because of slowdowns reported in gh-15568
            pip install mpmath gmpy2 "asv==0.4.2" pythran ninja meson
            pip install pybind11
            # extra benchmark deps
            pip install pyfftw cffi pytest

      - run:
          name: build SciPy
          command: |
            python dev.py --build-only -j2

      - save_cache:
          key: deps_ccache-{{ .Branch }}
          paths:
            - ~/.ccache
            - ~/.cache/pip

      - run:
          name: ccache performance
          command: |
            ccache -s

      - persist_to_workspace:
          root: ~/
          paths:
            - .

# Build docs
  build_docs:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/

      - check-skip
      - apt-install

      - run:
          name: build docs
          no_output_timeout: 25m
          command: |
            export PYTHONPATH=$PWD/build-install/lib/python3.8/site-packages
            python dev.py -n -j2 --doc html-scipyorg

      - store_artifacts:
          path: doc/build/html-scipyorg
          destination: html-scipyorg

      - persist_to_workspace:
          root: doc/build
          paths:
            - html-scipyorg

# Run benchmarks

  run_benchmarks:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/

      - check-skip
      - apt-install

      - run:
          name: run asv
          no_output_timeout: 30m
          command: |
            export PYTHONPATH=$PWD/build-install/lib/python3.8/site-packages
            cd benchmarks
            asv machine --machine CircleCI
            export SCIPY_GLOBAL_BENCH_NUMTRIALS=1
            export SCIPY_ALLOW_BENCH_IMPORT_ERRORS=0
            export OPENBLAS_NUM_THREADS=1
            time asv --config asv.conf.json dev -m CircleCI --python=same --bench '^((?!BenchGlobal|QuadraticAssignment).)*$'
            asv --config asv.conf.json publish

      - store_artifacts:
          path: benchmarks/html
          destination: html-benchmarks

# Upload build output to scipy/devdocs repository, using SSH deploy keys.
# The keys are only available for builds on main branch.
# https://developer.github.com/guides/managing-deploy-keys/
# https://circleci.com/docs/2.0/configuration-reference/#add_ssh_keys

  deploy:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /tmp/build

      - add_ssh_keys:
          fingerprints:
            - "08:18:07:68:71:e3:f9:5f:bd:95:f0:6a:df:a9:47:a2"

      - run:
          name: upload
          command: |
            set -e;
            mkdir -p ~/.ssh
            echo -e "Host *\nStrictHostKeyChecking no" > ~/.ssh/config
            chmod og= ~/.ssh/config
            git clone git@github.com:scipy/devdocs.git devdocs;
            cd devdocs;
            (git checkout --orphan tmp && git branch -D gh-pages || true);
            git checkout --orphan gh-pages;
            git reset --hard;
            cp -R /tmp/build/html-scipyorg/. .;
            touch .nojekyll;
            git config --global user.email "scipy-circleci-bot@nomail";
            git config --global user.name "scipy-circleci-bot";
            git config --global push.default simple;
            git add . > /dev/null;
            git commit -m "Docs build of $CIRCLE_SHA1";
            git push --set-upstream origin gh-pages --force

workflows:
  version: 2
  default:
    jobs:
      - build_scipy
      - build_docs:
          requires:
            - build_scipy
      - run_benchmarks:
          requires:
            - build_scipy
      - deploy:
          requires:
            - build_docs
          filters:
            branches:
              only: main
